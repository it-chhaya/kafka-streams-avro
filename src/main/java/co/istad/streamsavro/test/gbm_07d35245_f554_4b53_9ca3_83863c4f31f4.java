package co.istad.streamsavro.test;/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2025-01-29T14:25:36.330+07:00
  3.46.0.6
  
  Standalone prediction code with sample test data for GBMModel named gbm_07d35245_f554_4b53_9ca3_83863c4f31f4

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://192.168.0.111:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://192.168.0.111:54321/3/Models.java/gbm-07d35245-f554-4b53-9ca3-83863c4f31f4 > gbm_07d35245_f554_4b53_9ca3_83863c4f31f4.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m gbm_07d35245_f554_4b53_9ca3_83863c4f31f4.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="gbm_07d35245_f554_4b53_9ca3_83863c4f31f4", algorithm="gbm")
public class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Binomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 13; }
  public int nclasses() { return 2; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_gbm_07d35245_f554_4b53_9ca3_83863c4f31f4.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 2;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* Year */ gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_ColInfo_0.VALUES,
    /* Month */ gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_ColInfo_1.VALUES,
    /* DayofMonth */ gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_ColInfo_2.VALUES,
    /* DayOfWeek */ gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_ColInfo_3.VALUES,
    /* CRSDepTime */ null,
    /* CRSArrTime */ null,
    /* FlightNum */ null,
    /* AirTime */ null,
    /* Origin */ gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_ColInfo_8.VALUES,
    /* Dest */ gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_ColInfo_9.VALUES,
    /* Distance */ null,
    /* TaxiIn */ null,
    /* TaxiOut */ null,
    /* IsArrDelayed */ gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_ColInfo_13.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.4439372411499743,0.5560627588500257};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {0.4439372411499743,0.5560627588500257};

  public gbm_07d35245_f554_4b53_9ca3_83863c4f31f4() { super(NAMES,DOMAINS,"IsArrDelayed"); }
  public String getUUID() { return Long.toString(-3362861896740214124L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_0.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_1.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_2.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_3.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_4.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_5.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_6.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_7.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_8.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_9.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_10.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_11.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_12.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_13.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_14.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_15.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_16.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_17.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_18.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_19.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_20.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_21.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_22.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_23.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_24.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_25.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_26.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_27.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_28.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_29.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_30.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_31.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_32.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_33.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_34.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_35.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_36.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_37.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_38.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_39.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_40.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_41.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_42.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_43.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_44.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_45.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_46.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_47.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_48.score0(data,preds);
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_49.score0(data,preds);
    preds[2] = preds[1] + 0.22519795982992225;
    preds[2] = 1./(1. + Math.min(1e19, Math.exp(-(preds[2]))));
    preds[1] = 1.0-preds[2];
    preds[0] = GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.4329953557600464);
    return preds;
  }
}
// The class representing training column names
class NamesHolder_gbm_07d35245_f554_4b53_9ca3_83863c4f31f4 implements java.io.Serializable {
  public static final String[] VALUES = new String[13];
  static {
    NamesHolder_gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_0.fill(VALUES);
  }
  static final class NamesHolder_gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "Year";
      sa[1] = "Month";
      sa[2] = "DayofMonth";
      sa[3] = "DayOfWeek";
      sa[4] = "CRSDepTime";
      sa[5] = "CRSArrTime";
      sa[6] = "FlightNum";
      sa[7] = "AirTime";
      sa[8] = "Origin";
      sa[9] = "Dest";
      sa[10] = "Distance";
      sa[11] = "TaxiIn";
      sa[12] = "TaxiOut";
    }
  }
}
// The class representing column Year
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_ColInfo_0 implements java.io.Serializable {
  public static final String[] VALUES = new String[22];
  static {
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_ColInfo_0_0.fill(VALUES);
  }
  static final class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_ColInfo_0_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1987";
      sa[1] = "1988";
      sa[2] = "1989";
      sa[3] = "1990";
      sa[4] = "1991";
      sa[5] = "1992";
      sa[6] = "1993";
      sa[7] = "1994";
      sa[8] = "1995";
      sa[9] = "1996";
      sa[10] = "1997";
      sa[11] = "1998";
      sa[12] = "1999";
      sa[13] = "2000";
      sa[14] = "2001";
      sa[15] = "2002";
      sa[16] = "2003";
      sa[17] = "2004";
      sa[18] = "2005";
      sa[19] = "2006";
      sa[20] = "2007";
      sa[21] = "2008";
    }
  }
}
// The class representing column Month
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_ColInfo_1 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_ColInfo_1_0.fill(VALUES);
  }
  static final class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_ColInfo_1_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "10";
    }
  }
}
// The class representing column DayofMonth
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_ColInfo_2 implements java.io.Serializable {
  public static final String[] VALUES = new String[31];
  static {
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_ColInfo_2_0.fill(VALUES);
  }
  static final class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_ColInfo_2_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "10";
      sa[2] = "11";
      sa[3] = "12";
      sa[4] = "13";
      sa[5] = "14";
      sa[6] = "15";
      sa[7] = "16";
      sa[8] = "17";
      sa[9] = "18";
      sa[10] = "19";
      sa[11] = "2";
      sa[12] = "20";
      sa[13] = "21";
      sa[14] = "22";
      sa[15] = "23";
      sa[16] = "24";
      sa[17] = "25";
      sa[18] = "26";
      sa[19] = "27";
      sa[20] = "28";
      sa[21] = "29";
      sa[22] = "3";
      sa[23] = "30";
      sa[24] = "31";
      sa[25] = "4";
      sa[26] = "5";
      sa[27] = "6";
      sa[28] = "7";
      sa[29] = "8";
      sa[30] = "9";
    }
  }
}
// The class representing column DayOfWeek
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_ColInfo_3 implements java.io.Serializable {
  public static final String[] VALUES = new String[7];
  static {
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_ColInfo_3_0.fill(VALUES);
  }
  static final class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_ColInfo_3_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
      sa[6] = "7";
    }
  }
}
// The class representing column Origin
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_ColInfo_8 implements java.io.Serializable {
  public static final String[] VALUES = new String[132];
  static {
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_ColInfo_8_0.fill(VALUES);
  }
  static final class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_ColInfo_8_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "ABE";
      sa[1] = "ABQ";
      sa[2] = "ACY";
      sa[3] = "ALB";
      sa[4] = "AMA";
      sa[5] = "ANC";
      sa[6] = "ATL";
      sa[7] = "AUS";
      sa[8] = "AVP";
      sa[9] = "BDL";
      sa[10] = "BGM";
      sa[11] = "BHM";
      sa[12] = "BIL";
      sa[13] = "BNA";
      sa[14] = "BOI";
      sa[15] = "BOS";
      sa[16] = "BTV";
      sa[17] = "BUF";
      sa[18] = "BUR";
      sa[19] = "BWI";
      sa[20] = "CAE";
      sa[21] = "CHO";
      sa[22] = "CHS";
      sa[23] = "CLE";
      sa[24] = "CLT";
      sa[25] = "CMH";
      sa[26] = "COS";
      sa[27] = "CRP";
      sa[28] = "CRW";
      sa[29] = "CVG";
      sa[30] = "DAL";
      sa[31] = "DAY";
      sa[32] = "DCA";
      sa[33] = "DEN";
      sa[34] = "DFW";
      sa[35] = "DSM";
      sa[36] = "DTW";
      sa[37] = "EGE";
      sa[38] = "ELP";
      sa[39] = "ERI";
      sa[40] = "EWR";
      sa[41] = "EYW";
      sa[42] = "FLL";
      sa[43] = "GEG";
      sa[44] = "GNV";
      sa[45] = "GRR";
      sa[46] = "GSO";
      sa[47] = "HNL";
      sa[48] = "HOU";
      sa[49] = "HPN";
      sa[50] = "HRL";
      sa[51] = "IAD";
      sa[52] = "IAH";
      sa[53] = "ICT";
      sa[54] = "IND";
      sa[55] = "ISP";
      sa[56] = "JAN";
      sa[57] = "JAX";
      sa[58] = "JFK";
      sa[59] = "KOA";
      sa[60] = "LAN";
      sa[61] = "LAS";
      sa[62] = "LAX";
      sa[63] = "LBB";
      sa[64] = "LEX";
      sa[65] = "LGA";
      sa[66] = "LIH";
      sa[67] = "LIT";
      sa[68] = "LYH";
      sa[69] = "MAF";
      sa[70] = "MCI";
      sa[71] = "MCO";
      sa[72] = "MDT";
      sa[73] = "MDW";
      sa[74] = "MEM";
      sa[75] = "MFR";
      sa[76] = "MHT";
      sa[77] = "MIA";
      sa[78] = "MKE";
      sa[79] = "MLB";
      sa[80] = "MRY";
      sa[81] = "MSP";
      sa[82] = "MSY";
      sa[83] = "MYR";
      sa[84] = "OAK";
      sa[85] = "OGG";
      sa[86] = "OKC";
      sa[87] = "OMA";
      sa[88] = "ONT";
      sa[89] = "ORD";
      sa[90] = "ORF";
      sa[91] = "PBI";
      sa[92] = "PDX";
      sa[93] = "PHF";
      sa[94] = "PHL";
      sa[95] = "PHX";
      sa[96] = "PIT";
      sa[97] = "PSP";
      sa[98] = "PVD";
      sa[99] = "PWM";
      sa[100] = "RDU";
      sa[101] = "RIC";
      sa[102] = "RNO";
      sa[103] = "ROA";
      sa[104] = "ROC";
      sa[105] = "RSW";
      sa[106] = "SAN";
      sa[107] = "SAT";
      sa[108] = "SAV";
      sa[109] = "SBN";
      sa[110] = "SCK";
      sa[111] = "SDF";
      sa[112] = "SEA";
      sa[113] = "SFO";
      sa[114] = "SJC";
      sa[115] = "SJU";
      sa[116] = "SLC";
      sa[117] = "SMF";
      sa[118] = "SNA";
      sa[119] = "SRQ";
      sa[120] = "STL";
      sa[121] = "STT";
      sa[122] = "STX";
      sa[123] = "SWF";
      sa[124] = "SYR";
      sa[125] = "TLH";
      sa[126] = "TPA";
      sa[127] = "TRI";
      sa[128] = "TUL";
      sa[129] = "TUS";
      sa[130] = "TYS";
      sa[131] = "UCA";
    }
  }
}
// The class representing column Dest
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_ColInfo_9 implements java.io.Serializable {
  public static final String[] VALUES = new String[134];
  static {
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_ColInfo_9_0.fill(VALUES);
  }
  static final class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_ColInfo_9_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "ABE";
      sa[1] = "ABQ";
      sa[2] = "ACY";
      sa[3] = "ALB";
      sa[4] = "AMA";
      sa[5] = "ANC";
      sa[6] = "ATL";
      sa[7] = "AUS";
      sa[8] = "AVL";
      sa[9] = "AVP";
      sa[10] = "BDL";
      sa[11] = "BGM";
      sa[12] = "BHM";
      sa[13] = "BNA";
      sa[14] = "BOI";
      sa[15] = "BOS";
      sa[16] = "BTV";
      sa[17] = "BUF";
      sa[18] = "BUR";
      sa[19] = "BWI";
      sa[20] = "CAE";
      sa[21] = "CAK";
      sa[22] = "CHA";
      sa[23] = "CHO";
      sa[24] = "CHS";
      sa[25] = "CLE";
      sa[26] = "CLT";
      sa[27] = "CMH";
      sa[28] = "COS";
      sa[29] = "CRP";
      sa[30] = "CVG";
      sa[31] = "DAL";
      sa[32] = "DAY";
      sa[33] = "DCA";
      sa[34] = "DEN";
      sa[35] = "DFW";
      sa[36] = "DSM";
      sa[37] = "DTW";
      sa[38] = "ELM";
      sa[39] = "ELP";
      sa[40] = "ERI";
      sa[41] = "EUG";
      sa[42] = "EWR";
      sa[43] = "EYW";
      sa[44] = "FAT";
      sa[45] = "FAY";
      sa[46] = "FLL";
      sa[47] = "FNT";
      sa[48] = "GEG";
      sa[49] = "GRR";
      sa[50] = "GSO";
      sa[51] = "GSP";
      sa[52] = "HNL";
      sa[53] = "HOU";
      sa[54] = "HPN";
      sa[55] = "HRL";
      sa[56] = "HTS";
      sa[57] = "IAD";
      sa[58] = "IAH";
      sa[59] = "ICT";
      sa[60] = "ILM";
      sa[61] = "IND";
      sa[62] = "ISP";
      sa[63] = "JAN";
      sa[64] = "JAX";
      sa[65] = "JFK";
      sa[66] = "KOA";
      sa[67] = "LAS";
      sa[68] = "LAX";
      sa[69] = "LBB";
      sa[70] = "LEX";
      sa[71] = "LGA";
      sa[72] = "LIH";
      sa[73] = "LIT";
      sa[74] = "LYH";
      sa[75] = "MAF";
      sa[76] = "MCI";
      sa[77] = "MCO";
      sa[78] = "MDT";
      sa[79] = "MDW";
      sa[80] = "MHT";
      sa[81] = "MIA";
      sa[82] = "MKE";
      sa[83] = "MRY";
      sa[84] = "MSP";
      sa[85] = "MSY";
      sa[86] = "MYR";
      sa[87] = "OAJ";
      sa[88] = "OAK";
      sa[89] = "OGG";
      sa[90] = "OKC";
      sa[91] = "OMA";
      sa[92] = "ONT";
      sa[93] = "ORD";
      sa[94] = "ORF";
      sa[95] = "ORH";
      sa[96] = "PBI";
      sa[97] = "PDX";
      sa[98] = "PHF";
      sa[99] = "PHL";
      sa[100] = "PHX";
      sa[101] = "PIT";
      sa[102] = "PNS";
      sa[103] = "PSP";
      sa[104] = "PVD";
      sa[105] = "PWM";
      sa[106] = "RDU";
      sa[107] = "RIC";
      sa[108] = "RNO";
      sa[109] = "ROA";
      sa[110] = "ROC";
      sa[111] = "RSW";
      sa[112] = "SAN";
      sa[113] = "SAT";
      sa[114] = "SBN";
      sa[115] = "SCK";
      sa[116] = "SDF";
      sa[117] = "SEA";
      sa[118] = "SFO";
      sa[119] = "SJC";
      sa[120] = "SJU";
      sa[121] = "SLC";
      sa[122] = "SMF";
      sa[123] = "SNA";
      sa[124] = "SRQ";
      sa[125] = "STL";
      sa[126] = "STT";
      sa[127] = "SWF";
      sa[128] = "SYR";
      sa[129] = "TOL";
      sa[130] = "TPA";
      sa[131] = "TUL";
      sa[132] = "TUS";
      sa[133] = "UCA";
    }
  }
}
// The class representing column IsArrDelayed
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_ColInfo_13_0.fill(VALUES);
  }
  static final class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "NO";
      sa[1] = "YES";
    }
  }
}

class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_0_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 22.0f ? 
             (data[7 /* AirTime */] < 243.5f ? 
                 (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
                     (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 14.5f ? 
                        -0.10821749f : 
                        -0.04769006f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT2, 132, 0, data[8])) ? 
                        -0.06180518f : 
                        0.0102734165f)) : 
                 (data[12 /* TaxiOut */] < 5.5f ? 
                     (data[6 /* FlightNum */] < 143.5f ? 
                        0.14607808f : 
                        0.17983581f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(130, 2, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT3, 130, 2, data[8])) ? 
                        -0.058464956f : 
                        0.015645124f))) : 
             (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 28.5f ? 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT4, 133, 0, data[9])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                        -0.06663636f : 
                        0.04604367f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT6, 129, 1, data[8])) ? 
                        -0.00628794f : 
                        0.1080472f)) : 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT7, 133, 0, data[9])) ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(129, 1, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT8, 129, 1, data[8])) ? 
                        0.07012316f : 
                        0.16090624f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT9, 129, 1, data[8])) ? 
                        -0.0042973114f : 
                        0.16932195f)))) : 
         (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT10, 132, 0, data[8])) ? 
             (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 16.5f ? 
                 (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(132, 1, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(132, 1, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT11, 132, 1, data[9])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(130, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT12, 130, 1, data[8])) ? 
                        -0.046671435f : 
                        0.011538951f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                        0.0066912784f : 
                        0.100902274f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(130, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT14, 130, 1, data[8])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[2])) ? 
                        -0.1371934f : 
                        0.061365258f) : 
                     (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 24.0f ? 
                        0.12766476f : 
                        0.1772556f))) : 
             (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT16, 134, 0, data[9])) ? 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT17, 132, 0, data[8])) ? 
                     (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                        0.044596154f : 
                        0.119071886f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                        0.05392857f : 
                        0.12653412f)) : 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT20, 132, 0, data[8])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[2])) ? 
                        0.08307796f : 
                        0.13842057f) : 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[0])) ? 
                        0.011047116f : 
                        0.14965844f)))));
    return pred;
  } // constant pool size = 423B, number of visited nodes = 31, static init size = 1782B
  // {10010001 01101000 00000100 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-119, 22, 32, 0};
  // {00000000 10000100 00101000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 33, 20, 0};
  // {01000010 00000101 00100000 00000100 00110000 00010000 00100000 01000110 00000000 10000000 01001000 00010010 10000000 01000000 00011111 10001000 0000}
  public static final byte[] GRPSPLIT2 = new byte[] {66, -96, 4, 32, 12, 8, 4, 98, 0, 1, 18, 72, 1, 2, -8, 17, 0};
  // {...2 0-bits... 01111001 11101111 01110001 11111101 11111101 11010111 10011110 11011111 01111101 11100111 00011111 11101111 11000111 11100101 01101101 11100111 11}
  public static final byte[] GRPSPLIT3 = new byte[] {-98, -9, -114, -65, -65, -21, 121, -5, -66, -25, -8, -9, -29, -89, -74, -25, 3};
  // {00101101 11011011 00111111 11111111 10101111 11111111 01110111 11011011 11101111 11110000 10111111 01111111 01111001 10111100 11111011 11011111 11110}
  public static final byte[] GRPSPLIT4 = new byte[] {-76, -37, -4, -1, -11, -1, -18, -37, -9, 15, -3, -2, -98, 61, -33, -5, 15};
  // {11001001 11011100 00110000 10110000}
  public static final byte[] GRPSPLIT5 = new byte[] {-109, 59, 12, 13};
  // {...1 0-bits... 11111111 11111111 11111111 11110101 10100111 11011111 11011111 11111111 01111111 11110111 10111111 11101111 11111111 11111111 11101011 11111111 1}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -81, -27, -5, -5, -1, -2, -17, -3, -9, -1, -1, -41, -1, 1};
  // {11111111 11011111 01111111 11111111 10101111 11011111 11111111 11011111 11101111 11111111 10011111 11111111 10110011 11111101 00111011 00111111 11011}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -5, -2, -1, -11, -5, -1, -5, -9, -1, -7, -1, -51, -65, -36, -4, 27};
  // {...1 0-bits... 11111111 11111111 11111100 11111110 10111110 11111111 11111111 10111111 01111111 11111111 11111111 01111010 11111111 11111111 01111111 11111111 1}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -1, 63, 127, 125, -1, -1, -3, -2, -1, -1, 94, -1, -1, -2, -1, 1};
  // {...1 0-bits... 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111 11101111 1}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -9, 1};
  // {10111110 11111011 11000100 01111111 00010111 11111101 11110100 10111110 10101110 11110010 11111100 01101111 10011011 10011110 11100111 01111110 1101}
  public static final byte[] GRPSPLIT10 = new byte[] {125, -33, 35, -2, -24, -65, 47, 125, 117, 79, 63, -10, -39, 121, -25, 126, 11};
  // {...1 0-bits... 10100010 01010100 00010001 10100000 00001000 00000000 00000000 10000111 00110010 00000001 10000001 00000000 00000001 01000011 00000110 01000000 0000}
  public static final byte[] GRPSPLIT11 = new byte[] {69, 42, -120, 5, 16, 0, 0, -31, 76, -128, -127, 0, -128, -62, 96, 2, 0};
  // {...1 0-bits... 11111111 11111111 10001111 11111111 10101111 11111011 11101101 01111111 11111101 11111101 11111010 11111111 11111111 10111101 11001111 11111101 10}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -1, -15, -1, -11, -33, -73, -2, -65, -65, 95, -1, -1, -67, -13, -65, 1};
  // {10111111 11010001 00101111 01000110}
  public static final byte[] GRPSPLIT13 = new byte[] {-3, -117, -12, 98};
  // {...1 0-bits... 11111111 11110111 11111101 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 01111111 11101110 11111111 11}
  public static final byte[] GRPSPLIT14 = new byte[] {-1, -17, -65, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -2, 119, -1, 3};
  // {10000111 11110111 01100011 11110110}
  public static final byte[] GRPSPLIT15 = new byte[] {-31, -17, -58, 111};
  // {00011000 00100000 01010000 01000001 01100000 10000000 10100000 01100001 00001000 00010100 00000000 00010010 00000000 10001000 10011011 00110100 001100}
  public static final byte[] GRPSPLIT16 = new byte[] {24, 4, 10, -126, 6, 1, 5, -122, 16, 40, 0, 72, 0, 17, -39, 44, 12};
  // {00000000 01000001 10000000 00000001 00000001 00100000 01010000 00000000 00000000 11000000 00101000 01100000 00000010 10000000 00000110 00110000 0000}
  public static final byte[] GRPSPLIT17 = new byte[] {0, -126, 1, -128, -128, 4, 10, 0, 0, 3, 20, 6, 64, 1, 96, 12, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {0, 2, 0, 0};
  // {01011111 11111111 01101110 01111110}
  public static final byte[] GRPSPLIT19 = new byte[] {-6, -1, 118, 126};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 11111101 11101111 01011111 11011100 01111101 11101111 11011111 11111111 1011}
  public static final byte[] GRPSPLIT20 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -65, -65, -9, -6, 59, -66, -9, -5, -1, 13};
  // {10111011 11010000 00000101 01000100}
  public static final byte[] GRPSPLIT21 = new byte[] {-35, 11, -96, 34};
  // {11101111 11111111 11111100 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {-9, -1, 63, 0};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_1_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 22.0f ? 
             (data[7 /* AirTime */] < 243.5f ? 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[9])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                        -0.11301043f : 
                        -0.041920897f) : 
                     (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 15.5f ? 
                        -0.05659752f : 
                        0.01600058f)) : 
                 (data[12 /* TaxiOut */] < 5.5f ? 
                     (data[6 /* FlightNum */] < 143.5f ? 
                        0.13449004f : 
                        0.16669543f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(130, 2, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(130, 2, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT3, 130, 2, data[8])) ? 
                        -0.030458955f : 
                        0.032254666f))) : 
             (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 28.5f ? 
                 (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(133, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT4, 133, 0, data[9])) ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(129, 1, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT5, 129, 1, data[8])) ? 
                        -8.351549E-4f : 
                        0.11660303f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                        0.017564308f : 
                        0.13993591f)) : 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT7, 133, 0, data[9])) ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(129, 1, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT8, 129, 1, data[8])) ? 
                        0.061124705f : 
                        0.14857307f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT9, 129, 1, data[8])) ? 
                        -0.0038656292f : 
                        0.15620112f)))) : 
         (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT10, 132, 0, data[8])) ? 
             (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 16.5f ? 
                 (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(132, 1, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(132, 1, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT11, 132, 1, data[9])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
                        -0.03134709f : 
                        0.022334248f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                        0.02393296f : 
                        0.10046332f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(130, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT14, 130, 1, data[8])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[2])) ? 
                        -0.10850901f : 
                        0.06260191f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                        0.10078743f : 
                        0.15126576f))) : 
             (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                     (Double.isNaN(data[7]) || data[7 /* AirTime */] < 168.0f ? 
                        0.04326736f : 
                        -0.028360603f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[8])) ? 
                        0.05649835f : 
                        0.11874522f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT20, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT21, 134, 0, data[9])) ? 
                        0.018479764f : 
                        0.09397246f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT22, 134, 0, data[9])) ? 
                        0.06975796f : 
                        0.1304269f)))));
    return pred;
  } // constant pool size = 423B, number of visited nodes = 31, static init size = 1782B
  // {10010001 01101000 00000100 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-119, 22, 32, 0};
  // {00100101 10111110 00110111 10110011 00001011 11011011 11111110 10010001 01100111 10110101 00011101 11000111 11111011 11100111 00011100 01110111 111001}
  public static final byte[] GRPSPLIT1 = new byte[] {-92, 125, -20, -51, -48, -37, 127, -119, -26, -83, -72, -29, -33, -25, 56, -18, 39};
  // {00000000 00010000 00000011 01110000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 8, -64, 14};
  // {...2 0-bits... 01001001 10000011 00010001 10100100 11100000 10000110 00010100 10011010 00100001 00100011 00010101 11000110 10000100 10000000 01000000 00100001 01}
  public static final byte[] GRPSPLIT3 = new byte[] {-110, -63, -120, 37, 7, 97, 40, 89, -124, -60, -88, 99, 33, 1, 2, -124, 2};
  // {00000001 11001010 00110000 10100010 10101000 00100100 00100110 01001000 11001001 00000000 10100010 00101010 01010000 10011100 01000010 11000100 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {-128, 83, 12, 69, 21, 36, 100, 18, -109, 0, 69, 84, 10, 57, 66, 35, 0};
  // {...1 0-bits... 00100111 00000000 11100000 11010000 10000000 00001000 10000000 00000000 00000111 00011000 00000010 00000000 01000001 00100000 10001000 00000100 0}
  public static final byte[] GRPSPLIT5 = new byte[] {-28, 0, 7, 11, 1, 16, 1, 0, -32, 24, 64, 0, -126, 4, 17, 32, 0};
  // {01110011 10111111 11101011 11111110}
  public static final byte[] GRPSPLIT6 = new byte[] {-50, -3, -41, 127};
  // {11111111 11011111 01111111 11111111 10101111 11111111 11111111 11011111 11101111 11111111 10011111 11111111 10110011 11111101 00111011 00111111 11011}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -5, -2, -1, -11, -1, -1, -5, -9, -1, -7, -1, -51, -65, -36, -4, 27};
  // {...1 0-bits... 11111111 11111111 11111100 11111110 10111110 11111111 11111111 10111111 01111111 11111111 11111111 01111010 11111111 11111111 01111111 11111111 1}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -1, 63, 127, 125, -1, -1, -3, -2, -1, -1, 94, -1, -1, -2, -1, 1};
  // {...1 0-bits... 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111 11101111 1}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -9, 1};
  // {10111110 11111011 11000100 01111111 00010111 11111101 11110100 10111110 10101110 11110010 11111100 01101111 10011011 10011110 11100111 01111110 1101}
  public static final byte[] GRPSPLIT10 = new byte[] {125, -33, 35, -2, -24, -65, 47, 125, 117, 79, 63, -10, -39, 121, -25, 126, 11};
  // {...1 0-bits... 10100010 01010100 00010001 10100000 00001000 00000000 00001000 10000111 00110000 00000001 10000001 00000000 00000001 01000011 00000110 01000000 0000}
  public static final byte[] GRPSPLIT11 = new byte[] {69, 42, -120, 5, 16, 0, 16, -31, 12, -128, -127, 0, -128, -62, 96, 2, 0};
  // {00001001 11010110 01100010 01110000}
  public static final byte[] GRPSPLIT12 = new byte[] {-112, 107, 70, 14};
  // {10111101 01011000 00100111 01000010}
  public static final byte[] GRPSPLIT13 = new byte[] {-67, 26, -28, 66};
  // {...1 0-bits... 11111111 11110111 11111101 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 01111111 11101110 11111111 11}
  public static final byte[] GRPSPLIT14 = new byte[] {-1, -17, -65, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -2, 119, -1, 3};
  // {10000111 11110111 01000010 11110100}
  public static final byte[] GRPSPLIT15 = new byte[] {-31, -17, 66, 47};
  // {11010100 11011111 11111101 11001000}
  public static final byte[] GRPSPLIT16 = new byte[] {43, -5, -65, 19};
  // {11101111 11010111 11111100 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {-9, -21, 63, 0};
  // {11010101 00010011 00100010 01110110}
  public static final byte[] GRPSPLIT18 = new byte[] {-85, -56, 68, 110};
  // {01111101 11111111 11111111 10111011 11111111 01111111 11111111 11111011 11111111 11111111 11111111 11111101 01111111 11111111 10111111 11111111 1111}
  public static final byte[] GRPSPLIT19 = new byte[] {-66, -1, -1, -35, -1, -2, -1, -33, -1, -1, -1, -65, -2, -1, -3, -1, 15};
  // {00000010 00000001 10000000 01000100 00000001 10100000 01010000 00000100 00000000 11000000 00001000 00101000 00000000 00000010 11000110 00000000 0100}
  public static final byte[] GRPSPLIT20 = new byte[] {64, -128, 1, 34, -128, 5, 10, 32, 0, 3, 16, 20, 0, 64, 99, 0, 2};
  // {00000000 00000000 00110000 00100001 00100101 10100010 00100000 00000000 00001000 01000100 10000000 10011100 00001000 10001000 11000010 01100100 001100}
  public static final byte[] GRPSPLIT21 = new byte[] {0, 0, 12, -124, -92, 69, 4, 0, 16, 34, 1, 57, 16, 17, 67, 38, 12};
  // {10111111 11110000 11111111 11111111 11011110 11111111 11111011 10111111 11111111 10111110 01111011 01110111 10111111 11111111 10111011 10111111 011101}
  public static final byte[] GRPSPLIT22 = new byte[] {-3, 15, -1, -1, 123, -1, -33, -3, -1, 125, -34, -18, -3, -1, -35, -3, 46};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_2_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 22.0f ? 
             (data[7 /* AirTime */] < 236.5f ? 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
                     (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 16.5f ? 
                        -0.09005887f : 
                        -0.0261646f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(130, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT2, 130, 0, data[8])) ? 
                        -0.046375375f : 
                        0.03901934f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT3, 130, 0, data[8])) ? 
                     (data[12 /* TaxiOut */] < 5.5f ? 
                        0.15650922f : 
                        -0.067348935f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT4, 133, 0, data[9])) ? 
                        -0.024425983f : 
                        0.055878263f))) : 
             (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT5, 133, 0, data[9])) ? 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT7, 130, 0, data[8])) ? 
                        -0.085455f : 
                        0.034778964f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT8, 130, 0, data[8])) ? 
                        0.052581735f : 
                        0.16014417f)) : 
                 (data[12 /* TaxiOut */] < 28.5f ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(126, 6, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(126, 6, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT9, 126, 6, data[9])) ? 
                        0.0399356f : 
                        0.12694359f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT10, 129, 1, data[8])) ? 
                        0.101139225f : 
                        0.14744982f)))) : 
         (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT11, 132, 0, data[8])) ? 
             (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 16.5f ? 
                 (data[4 /* CRSDepTime */] < 1209.5f ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(133, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT12, 133, 0, data[9])) ? 
                        -0.056985475f : 
                        0.008148685f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(133, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT13, 133, 0, data[9])) ? 
                        -0.002769525f : 
                        0.06685318f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(124, 7, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT14, 124, 7, data[8])) ? 
                     (data[12 /* TaxiOut */] < 20.5f ? 
                        -0.16575068f : 
                        0.012929865f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[2])) ? 
                        0.09606221f : 
                        0.15078864f))) : 
             (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT16, 134, 0, data[9])) ? 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT18, 132, 0, data[8])) ? 
                        -0.21234654f : 
                        -0.11971731f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[8])) ? 
                        -0.11134668f : 
                        0.06382486f)) : 
                 (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT21, 132, 0, data[8])) ? 
                        -0.0013185767f : 
                        0.057032753f) : 
                     (data[4 /* CRSDepTime */] < 1069.5f ? 
                        0.048699725f : 
                        0.11464488f)))));
    return pred;
  } // constant pool size = 442B, number of visited nodes = 31, static init size = 1896B
  // {11110001 11101100 00000100 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-113, 55, 32, 0};
  // {00000000 00110000 00000010 01110000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 12, 64, 14};
  // {01000010 00000001 00000010 01000000 01100000 00000100 01000000 01000110 00000000 00101000 00001000 00110000 00101000 00010000 00101100 00000000 00}
  public static final byte[] GRPSPLIT2 = new byte[] {66, -128, 64, 2, 6, 32, 2, 98, 0, 20, 16, 12, 20, 8, 52, 0, 0};
  // {11011111 01011010 11101110 01111011 11111111 01111101 11100111 10011111 10111100 01111111 11011111 11011011 11110001 11111111 01111011 01111001 11}
  public static final byte[] GRPSPLIT3 = new byte[] {-5, 90, 119, -34, -1, -66, -25, -7, 61, -2, -5, -37, -113, -1, -34, -98, 3};
  // {00001101 11001010 00101111 10111111 01111011 11111110 10111111 11111111 00100111 11110001 11111111 11111101 11111111 11111101 11111111 11011011 11110}
  public static final byte[] GRPSPLIT4 = new byte[] {-80, 83, -12, -3, -34, 127, -3, -1, -28, -113, -1, -65, -1, -65, -1, -37, 15};
  // {00101111 11011111 01111111 11111111 10101111 11111111 11110111 11011111 11101111 11111100 10111011 01111111 11110001 10111100 11111111 11011111 11110}
  public static final byte[] GRPSPLIT5 = new byte[] {-12, -5, -2, -1, -11, -1, -17, -5, -9, 63, -35, -2, -113, 61, -1, -5, 15};
  // {11000000 00101100 00010000 01110000}
  public static final byte[] GRPSPLIT6 = new byte[] {3, 52, 8, 14};
  // {00000000 00000001 10110000 01001000 01101000 00000000 01010000 00000010 00000010 00001000 00000000 01010000 00101000 00000000 00000100 00000000 00}
  public static final byte[] GRPSPLIT7 = new byte[] {0, -128, 13, 18, 22, 0, 10, 64, 64, 16, 0, 10, 20, 0, 32, 0, 0};
  // {11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 10111111 11111111 11111111 10111111 11111111 11}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -3, -1, -1, -3, -1, 3};
  // {...6 0-bits... 01111110 10101111 11101011 11111110 11111111 01011111 11111110 11111111 11111100 11111101 11111110 11011011 11111111 11011110 00111011 111100}
  public static final byte[] GRPSPLIT9 = new byte[] {126, -11, -41, 127, -1, -6, 127, -1, 63, -65, 127, -37, -1, 123, -36, 15};
  // {...1 0-bits... 11111111 01111111 11111111 11111101 11101110 11111111 11111111 11111111 11111111 11101111 11111111 11111011 11111111 11111111 10101111 11101111 1}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -2, -1, -65, 119, -1, -1, -1, -1, -9, -1, -33, -1, -1, -11, -9, 1};
  // {11111110 11101111 11010100 11111111 00110111 11111101 11110110 10111110 11001111 11110000 11001101 00001111 10000011 10011100 11100111 11111110 1101}
  public static final byte[] GRPSPLIT11 = new byte[] {127, -9, 43, -1, -20, -65, 111, 125, -13, 15, -77, -16, -63, 57, -25, 127, 11};
  // {00000000 00000100 00010000 10000000 00110000 00000000 00000000 00000110 10010000 00000000 00000000 10000000 00000100 00000000 10000011 00100100 00001}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 32, 8, 1, 12, 0, 0, 96, 9, 0, 0, 1, 32, 0, -63, 36, 16};
  // {11000001 00000010 00000000 00100001 00100001 00100010 00000100 00000010 10011001 00000000 00000000 00000100 00000100 00001000 00001001 00100000 00001}
  public static final byte[] GRPSPLIT13 = new byte[] {-125, 64, 0, -124, -124, 68, 32, 64, -103, 0, 0, 32, 32, 16, -112, 4, 16};
  // {...7 0-bits... 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11011111 11111011 11111111 1111}
  public static final byte[] GRPSPLIT14 = new byte[] {-1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -17, -1, -5, -33, -1, 15};
  // {10111110 11011111 11010100 01001000}
  public static final byte[] GRPSPLIT15 = new byte[] {125, -5, 43, 18};
  // {11111111 11111111 11111111 11111111 11111101 11111011 11110110 11111101 01011111 11111111 11111011 11111111 01111111 11101111 11111111 11111111 101111}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, -1, -1, -1, -65, -33, 111, -65, -6, -1, -33, -1, -2, -9, -1, -1, 61};
  // {01001100 00000011 00000010 01110000}
  public static final byte[] GRPSPLIT17 = new byte[] {50, -64, 64, 14};
  // {11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT18 = new byte[] {-1, -1, -1, -2, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, 15};
  // {11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111011 11111111 11111111 11111111 11111100 11111111 11101111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT19 = new byte[] {-1, -1, -1, -2, -1, -1, -1, -33, -1, -1, -1, 63, -1, -9, -1, -1, 15};
  // {10000000 01000000 00000100 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {1, 2, 32, 0};
  // {11111111 11111111 11111111 11011011 11111111 11111111 11111111 11111001 11111110 11111111 11110111 11111111 11111111 11111111 00011111 11111111 1111}
  public static final byte[] GRPSPLIT21 = new byte[] {-1, -1, -1, -37, -1, -1, -1, -97, 127, -1, -17, -1, -1, -1, -8, -1, 15};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_3_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 20.0f ? 
             (data[7 /* AirTime */] < 243.5f ? 
                 (data[5 /* CRSArrTime */] < 1548.5f ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(130, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT1, 130, 0, data[8])) ? 
                        -0.10055473f : 
                        -0.04372268f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(133, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT2, 133, 0, data[9])) ? 
                        -0.0600705f : 
                        0.0147436205f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT3, 130, 0, data[8])) ? 
                     (data[12 /* TaxiOut */] < 5.5f ? 
                        0.1485596f : 
                        -0.05990347f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(133, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT4, 133, 0, data[9])) ? 
                        -0.012625821f : 
                        0.06352633f))) : 
             (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 29.5f ? 
                 (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(133, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT5, 133, 0, data[9])) ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(129, 1, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT6, 129, 1, data[8])) ? 
                        -0.027783489f : 
                        0.063966475f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(129, 1, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT7, 129, 1, data[8])) ? 
                        0.06454741f : 
                        0.1398832f)) : 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT8, 133, 0, data[9])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[2])) ? 
                        0.03273878f : 
                        0.15449823f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[2])) ? 
                        0.11645885f : 
                        0.14681442f)))) : 
         (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT11, 132, 0, data[8])) ? 
             (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 12.5f ? 
                 (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(133, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT12, 133, 0, data[9])) ? 
                     (Double.isNaN(data[7]) || data[7 /* AirTime */] < 133.5f ? 
                        -0.043773178f : 
                        0.03863982f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                        -0.03068262f : 
                        0.05538298f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(124, 7, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT14, 124, 7, data[8])) ? 
                     (data[7 /* AirTime */] < 248.5f ? 
                        -0.10062966f : 
                        0.089572124f) : 
                     (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 17.5f ? 
                        0.041148312f : 
                        0.11879599f))) : 
             (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT15, 134, 0, data[9])) ? 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT17, 132, 0, data[8])) ? 
                        -0.17705566f : 
                        -0.09148924f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT18, 132, 0, data[8])) ? 
                        -0.13225304f : 
                        0.05192483f)) : 
                 (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT20, 134, 0, data[9])) ? 
                        -0.020410085f : 
                        0.046696287f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT21, 132, 0, data[8])) ? 
                        0.049608722f : 
                        0.10243366f)))));
    return pred;
  } // constant pool size = 443B, number of visited nodes = 31, static init size = 1902B
  // {11110001 11101100 00000100 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-113, 55, 32, 0};
  // {01000001 00000000 01100010 01100001 00011100 00000000 01100000 01000111 00000000 10001000 00011000 10111001 00100100 00000000 10001000 00000000 01}
  public static final byte[] GRPSPLIT1 = new byte[] {-126, 0, 70, -122, 56, 0, 6, -30, 0, 17, 24, -99, 36, 0, 17, 0, 2};
  // {00011001 00100111 00110000 10000011 01001000 00010010 10100100 00000101 00000101 01010001 10001000 00000110 10010010 11100011 00001100 01110010 00100}
  public static final byte[] GRPSPLIT2 = new byte[] {-104, -28, 12, -63, 18, 72, 37, -96, -96, -118, 17, 96, 73, -57, 48, 78, 4};
  // {11011101 01011011 11101110 01111011 11111111 01110101 11100111 10011111 10111100 01111011 11011111 11011011 11100001 11111111 01111011 01111001 11}
  public static final byte[] GRPSPLIT3 = new byte[] {-69, -38, 119, -34, -1, -82, -25, -7, 61, -34, -5, -37, -121, -1, -34, -98, 3};
  // {00001101 11001010 00101111 10111111 01111011 11111110 10111111 11011011 00100111 11110001 11111111 11111101 11110111 01111101 11111111 11011011 11110}
  public static final byte[] GRPSPLIT4 = new byte[] {-80, 83, -12, -3, -34, 127, -3, -37, -28, -113, -1, -65, -17, -66, -1, -37, 15};
  // {01000001 11001010 00110000 10100011 10101000 00100110 00100110 01001000 11000101 01000100 00001000 00101010 01000000 10001100 01000011 01000100 10100}
  public static final byte[] GRPSPLIT5 = new byte[] {-126, 83, 12, -59, 21, 100, 100, 18, -93, 34, 16, 84, 2, 49, -62, 34, 5};
  // {...1 0-bits... 11111111 11111001 11111110 11110100 10101010 10011111 11001111 11111011 01111011 11111111 10111111 01101011 11111110 11111110 00101010 11101111 1}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -97, 127, 47, 85, -7, -13, -33, -34, -1, -3, -42, 127, 127, 84, -9, 1};
  // {...1 0-bits... 11111111 01111101 11111111 11111111 11110110 11011111 11001011 11111111 01111101 11101111 11111111 01111000 11101111 10111110 00011111 11111111 1}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -66, -1, -1, 111, -5, -45, -1, -66, -9, -1, 30, -9, 125, -8, -1, 1};
  // {11111111 11011111 01111111 11111111 10101111 11011111 11111111 11011111 11101111 11111011 10111111 11111111 11110011 11111101 01111011 10111111 11111}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -5, -2, -1, -11, -5, -1, -5, -9, -33, -3, -1, -49, -65, -34, -3, 31};
  // {10011001 10100110 00001000 01110000}
  public static final byte[] GRPSPLIT9 = new byte[] {-103, 101, 16, 14};
  // {00110110 00111101 11101110 00110100}
  public static final byte[] GRPSPLIT10 = new byte[] {108, -68, 119, 44};
  // {11111110 11101111 11010100 11111111 00110111 11111101 11110110 10111110 11001110 11110000 11001101 00001111 10000011 10011100 11100111 11111110 1101}
  public static final byte[] GRPSPLIT11 = new byte[] {127, -9, 43, -1, -20, -65, 111, 125, 115, 15, -77, -16, -63, 57, -25, 127, 11};
  // {11111111 11111010 00111111 11011111 10101110 11111111 11110111 10011111 11111111 11110011 11111011 11111001 01100110 11110100 10111111 11111111 01011}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, 95, -4, -5, 117, -1, -17, -7, -1, -49, -33, -97, 102, 47, -3, -1, 26};
  // {10110111 11011000 00000110 01111110}
  public static final byte[] GRPSPLIT13 = new byte[] {-19, 27, 96, 126};
  // {...7 0-bits... 11111111 11111111 01111111 11111111 11111111 11111111 01111111 11110111 11111011 11111111 11111111 11111111 11111111 11111011 11111111 1111}
  public static final byte[] GRPSPLIT14 = new byte[] {-1, -1, -2, -1, -1, -1, -2, -17, -33, -1, -1, -1, -1, -33, -1, 15};
  // {11111111 11011011 11111111 11111111 11111101 11111011 11110110 11111101 01011111 11111111 11111011 11111111 01111111 11101110 11111111 11111111 101111}
  public static final byte[] GRPSPLIT15 = new byte[] {-1, -37, -1, -1, -65, -33, 111, -65, -6, -1, -33, -1, -2, 119, -1, -1, 61};
  // {00001000 01000010 00000010 01110000}
  public static final byte[] GRPSPLIT16 = new byte[] {16, 66, 64, 14};
  // {11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT17 = new byte[] {-1, -1, -1, -2, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, 15};
  // {11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT18 = new byte[] {-1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, 15};
  // {10100001 01000000 00000100 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {-123, 2, 32, 0};
  // {10111111 11111111 11011111 11111111 10111111 11111111 11111111 11111011 11100111 11111111 11111111 11111101 11111111 11111111 01111110 11111111 111101}
  public static final byte[] GRPSPLIT20 = new byte[] {-3, -1, -5, -1, -3, -1, -1, -33, -25, -1, -1, -65, -1, -1, 126, -1, 47};
  // {01000010 00000001 10000000 01000100 00000001 00100001 11000000 10000100 00000000 11000000 00001100 00001000 00000000 00000000 01000110 00010000 0100}
  public static final byte[] GRPSPLIT21 = new byte[] {66, -128, 1, 34, -128, -124, 3, 33, 0, 3, 48, 16, 0, 0, 98, 8, 2};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_4_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* TaxiOut */] < 16.5f ? 
         (data[7 /* AirTime */] < 326.5f ? 
             (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(130, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT2, 130, 0, data[8])) ? 
                        -0.094362415f : 
                        -0.046500318f) : 
                     (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                        -0.04519074f : 
                        0.04585557f)) : 
                 (data[4 /* CRSDepTime */] < 1143.5f ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(129, 1, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT4, 129, 1, data[8])) ? 
                        -0.06383099f : 
                        6.6555646E-4f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(129, 1, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT5, 129, 1, data[8])) ? 
                        -0.0027432714f : 
                        0.079424635f))) : 
             (data[7 /* AirTime */] < 336.0f ? 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                    -0.06765806f : 
                    0.16866128f) : 
                 (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                     (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 6.5f ? 
                        0.15110499f : 
                        0.1802793f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(126, 1, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(126, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT8, 126, 1, data[8])) ? 
                        0.16452299f : 
                        0.18708274f)))) : 
         (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
             (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT10, 132, 0, data[8])) ? 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[9])) ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[8])) ? 
                        -0.10198072f : 
                        -0.0057677887f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[8])) ? 
                        -0.05852783f : 
                        -4.5213115E-4f)) : 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT14, 134, 0, data[9])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[2])) ? 
                        -0.07218502f : 
                        -0.010099554f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT16, 132, 0, data[8])) ? 
                        0.024049465f : 
                        0.081333004f))) : 
             (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT17, 132, 0, data[8])) ? 
                 (data[12 /* TaxiOut */] < 24.5f ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(130, 1, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(130, 1, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT18, 130, 1, data[9])) ? 
                        -0.039565712f : 
                        0.0464393f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(130, 1, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT19, 130, 1, data[9])) ? 
                        0.008606125f : 
                        0.09096482f)) : 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT20, 134, 0, data[9])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[2])) ? 
                        -0.030074708f : 
                        0.06723963f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT22, 132, 0, data[8])) ? 
                        0.08753405f : 
                        0.12960196f)))));
    return pred;
  } // constant pool size = 427B, number of visited nodes = 29, static init size = 1854B
  // {00000000 11101100 00001100 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 55, 48, 0};
  // {00000000 00110000 00000010 11110000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 12, 64, 15};
  // {00000001 00011000 11100000 01101000 10001100 00100000 01000000 01000000 00000000 10000000 00010001 01011011 00011100 00000000 01010100 00000010 01}
  public static final byte[] GRPSPLIT2 = new byte[] {-128, 24, 7, 22, 49, 4, 2, 2, 0, 1, -120, -38, 56, 0, 42, 64, 2};
  // {00000000 00000000 01100000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 6, 0};
  // {...1 0-bits... 10000100 00001010 00100001 10001000 00010000 00000000 01000000 10000100 00000010 10000000 00000000 10110000 00000101 11000001 00000000 00010000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {33, 80, -124, 17, 8, 0, 2, 33, 64, 1, 0, 13, -96, -125, 0, 8, 0};
  // {...1 0-bits... 10000000 00100100 00000001 00000000 00000000 01000000 00000001 00001110 00001110 10010000 00010111 00010011 00000100 01100011 01001110 01000000 0}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 36, -128, 0, 0, 2, -128, 112, 112, 9, -24, -56, 32, -58, 114, 2, 0};
  // {00101111 11010111 11111111 11111010}
  public static final byte[] GRPSPLIT6 = new byte[] {-12, -21, -1, 95};
  // {00000000 01101000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 22, 0, 0};
  // {...1 0-bits... 00000010 00000000 01000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00110000 000000}
  public static final byte[] GRPSPLIT8 = new byte[] {64, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 12, 0};
  // {10000000 11101110 01111100 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 119, 62, 0};
  // {11011110 01111011 11010110 01111011 11111111 11100101 11110111 10111011 11011110 10111100 11000111 11111011 11100001 11111101 01001011 01111000 1101}
  public static final byte[] GRPSPLIT10 = new byte[] {123, -34, 107, -34, -1, -89, -17, -35, 123, 61, -29, -33, -121, -65, -46, 30, 11};
  // {11111101 11111010 10101111 10111111 10111111 11111001 11110111 11011111 11111111 11111011 11111011 11111111 11101111 11011110 11111111 11111111 011111}
  public static final byte[] GRPSPLIT11 = new byte[] {-65, 95, -11, -3, -3, -97, -17, -5, -1, -33, -33, -1, -9, 123, -1, -1, 62};
  // {00000000 00000100 00000000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 32, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0};
  // {00000000 00000000 00100001 10000000 00000000 00001000 00000000 00000100 00000001 01000000 00110000 00000000 00001000 00000000 10000000 00000000 0000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 0, -124, 1, 0, 16, 0, 32, -128, 2, 12, 0, 16, 0, 1, 0, 0};
  // {10011101 11011010 00011111 10110111 11101101 11111010 10100111 01101111 01011111 11111101 10111011 11001101 11011110 11101101 10111110 11101111 101101}
  public static final byte[] GRPSPLIT14 = new byte[] {-71, 91, -8, -19, -73, 95, -27, -10, -6, -65, -35, -77, 123, -73, 125, -9, 45};
  // {01111100 01110110 00100010 01110110}
  public static final byte[] GRPSPLIT15 = new byte[] {62, 110, 68, 110};
  // {00010000 01100001 10000100 00100001 00010001 00100101 11000000 00100000 10001000 00000000 11000100 10000000 00100001 00001000 00001000 00010000 0001}
  public static final byte[] GRPSPLIT16 = new byte[] {8, -122, 33, -124, -120, -92, 3, 4, 17, 0, 35, 1, -124, 16, 16, 8, 8};
  // {11111111 10101000 11111110 11111110 01110011 01001101 11110111 11011101 10111110 11111001 01111101 00100101 11101001 10011111 11110111 11111111 1111}
  public static final byte[] GRPSPLIT17 = new byte[] {-1, 21, 127, 127, -50, -78, -17, -69, 125, -97, -66, -92, -105, -7, -17, -1, 15};
  // {...1 0-bits... 01111011 11111111 01011111 01011111 01111111 11111111 11111111 00110011 11111111 11111101 01110111 11111111 11000111 01011010 11110111 10110111 10}
  public static final byte[] GRPSPLIT18 = new byte[] {-34, -1, -6, -6, -2, -1, -1, -52, -1, -65, -18, -1, -29, 90, -17, -19, 1};
  // {...1 0-bits... 01111111 10111110 11111111 11111111 01111111 11111111 11111111 11111110 11001111 11111111 01111110 11111111 11110111 01111001 11111100 01111111 11}
  public static final byte[] GRPSPLIT19 = new byte[] {-2, 125, -1, -1, -2, -1, -1, 127, -13, -1, 126, -1, -17, -98, 63, -2, 3};
  // {00111111 11111111 10111111 11101111 11101011 11111101 11110101 11111011 01111111 11111111 11010011 01111111 00111111 01101010 11111011 10111101 111111}
  public static final byte[] GRPSPLIT20 = new byte[] {-4, -1, -3, -9, -41, -65, -81, -33, -2, -1, -53, -2, -4, 86, -33, -67, 63};
  // {10001111 11111011 00011110 01101110}
  public static final byte[] GRPSPLIT21 = new byte[] {-15, -33, 120, 118};
  // {11111100 11111111 10111101 01011011 10011101 11111111 11101111 11111011 11111101 01100111 10111111 11111111 01111111 11111111 00001001 01111111 1111}
  public static final byte[] GRPSPLIT22 = new byte[] {63, -1, -67, -38, -71, -1, -9, -33, -65, -26, -3, -1, -2, -1, -112, -2, 15};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_5_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 22.0f ? 
             (data[7 /* AirTime */] < 243.5f ? 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[9])) ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT2, 132, 0, data[8])) ? 
                        -0.08703724f : 
                        -0.008597995f) : 
                     (Double.isNaN(data[5]) || data[5 /* CRSArrTime */] < 1585.5f ? 
                        -0.05237656f : 
                        -0.005596742f)) : 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[9])) ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT4, 132, 0, data[8])) ? 
                        -0.048902668f : 
                        0.022329567f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT5, 132, 0, data[8])) ? 
                        -0.032998838f : 
                        0.035803907f))) : 
             (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT6, 134, 0, data[9])) ? 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT8, 132, 0, data[8])) ? 
                        -0.089374036f : 
                        0.15770708f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT9, 132, 0, data[8])) ? 
                        0.057905443f : 
                        0.15890788f)) : 
                 (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 28.5f ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(127, 6, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(127, 6, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT10, 127, 6, data[9])) ? 
                        0.032285675f : 
                        0.099750765f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT11, 129, 1, data[8])) ? 
                        -0.06336828f : 
                        0.11662775f)))) : 
         (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT12, 134, 0, data[9])) ? 
             (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[8])) ? 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
                     (Double.isNaN(data[3 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 7) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[3])) ? 
                        -0.06130054f : 
                        0.009223871f) : 
                     (Double.isNaN(data[5]) || data[5 /* CRSArrTime */] < 1678.0f ? 
                        -0.008829678f : 
                        0.06487339f)) : 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                     (data[12 /* TaxiOut */] < 17.5f ? 
                        -0.006561961f : 
                        0.052465305f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT17, 134, 0, data[9])) ? 
                        0.015479095f : 
                        0.08664001f))) : 
             (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT18, 132, 0, data[8])) ? 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                     (Double.isNaN(data[4]) || data[4 /* CRSDepTime */] < 1438.5f ? 
                        -0.041309923f : 
                        0.05248603f) : 
                     (!Double.isNaN(data[3 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 7) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[3])) ? 
                        0.020858336f : 
                        0.115299314f)) : 
                 (data[4 /* CRSDepTime */] < 626.5f ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(129, 3, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(129, 3, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT21, 129, 3, data[9])) ? 
                        -0.23471358f : 
                        0.026830574f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[2])) ? 
                        0.0490804f : 
                        0.08923912f)))));
    return pred;
  } // constant pool size = 435B, number of visited nodes = 31, static init size = 1854B
  // {10010001 01101000 00000100 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-119, 22, 32, 0};
  // {00100101 10111111 00110111 10110011 01001011 11011011 11111110 10010001 11100111 10110101 00011101 11000111 11111011 11100111 10011110 11110111 111001}
  public static final byte[] GRPSPLIT1 = new byte[] {-92, -3, -20, -51, -46, -37, 127, -119, -25, -83, -72, -29, -33, -25, 121, -17, 39};
  // {00000000 10000000 00110000 01000000 00100100 00000000 01000000 00000110 00000010 00000000 01001000 10100000 00001000 00000000 00001100 00000000 0100}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 1, 12, 2, 36, 0, 2, 96, 64, 0, 18, 5, 16, 0, 48, 0, 2};
  // {10011111 11011010 11011011 00111111 11111001 11011010 10100111 11101011 01001110 11110001 11111010 01111101 01111111 11011110 01111111 11011011 011111}
  public static final byte[] GRPSPLIT3 = new byte[] {-7, 91, -37, -4, -97, 91, -27, -41, 114, -113, 95, -66, -2, 123, -2, -37, 62};
  // {00010010 00000000 01000100 01000000 01100000 00000000 00000110 00000100 00000001 00000100 00000000 01000001 00000000 10100000 00000010 00001000 0001}
  public static final byte[] GRPSPLIT4 = new byte[] {72, 0, 34, 2, 6, 0, 96, 32, -128, 32, 0, -126, 0, 5, 64, 16, 8};
  // {11011111 01111011 11111110 11111111 11111111 01110111 11100101 10110111 11111110 00111001 11000111 11111011 11100101 00111001 01011011 01111111 1111}
  public static final byte[] GRPSPLIT5 = new byte[] {-5, -34, 127, -1, -1, -18, -89, -19, 127, -100, -29, -33, -89, -100, -38, -2, 15};
  // {00101111 11011111 01111111 11111111 10101111 11111111 11110111 11111111 11101111 11111111 10111111 01111111 11111001 10111100 11111111 11011111 111111}
  public static final byte[] GRPSPLIT6 = new byte[] {-12, -5, -2, -1, -11, -1, -17, -1, -9, -1, -3, -2, -97, 61, -1, -5, 63};
  // {11010001 00101100 10110001 01110000}
  public static final byte[] GRPSPLIT7 = new byte[] {-117, 52, -115, 14};
  // {00000000 00000000 00100000 00001000 01001000 00000000 00000000 00000000 00000010 00001000 00000000 00000000 00101000 00000000 00000100 00000000 0000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 4, 16, 18, 0, 0, 0, 64, 16, 0, 0, 20, 0, 32, 0, 0};
  // {11111111 11111110 11111111 01111111 10111111 11111111 11111111 11111111 11111111 11111111 11111111 10111101 11111111 11111111 10111111 01111111 1111}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 127, -1, -2, -3, -1, -1, -1, -1, -1, -1, -67, -1, -1, -3, -2, 15};
  // {...6 0-bits... 01111110 10101111 11101011 11111111 11111111 01011111 11110110 11111111 11111100 00111100 11111110 11011101 11111111 11011110 00111011 1111000}
  public static final byte[] GRPSPLIT10 = new byte[] {126, -11, -41, -1, -1, -6, 111, -1, 63, 60, 127, -69, -1, 123, -36, 15};
  // {...1 0-bits... 11111111 11111111 11111111 11111111 11111110 11111111 11111111 10111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111 11101111 1}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, -1, -1, -1, 127, -1, -1, -3, -1, -1, -1, -1, -1, -1, -3, -9, 1};
  // {10111110 11110010 10111111 01001111 00111111 11111001 11111010 01111001 01111110 10111110 10111011 11011101 00000010 11101100 10111011 11111111 001101}
  public static final byte[] GRPSPLIT12 = new byte[] {125, 79, -3, -14, -4, -97, 95, -98, 126, 125, -35, -69, 64, 55, -35, -1, 44};
  // {11000010 01000001 10000011 01100101 01100001 10100000 01010010 00000010 00000010 11001000 00100001 01100010 00101100 10010000 10000000 00111010 0000}
  public static final byte[] GRPSPLIT13 = new byte[] {67, -126, -63, -90, -122, 5, 74, 64, 64, 19, -124, 70, 52, 9, 1, 92, 0};
  // {10001000 11010010 00000010 01111000}
  public static final byte[] GRPSPLIT14 = new byte[] {17, 75, 64, 30};
  // {00011100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {56, 0, 0, 0};
  // {01000000 01100110 11100010 01110000}
  public static final byte[] GRPSPLIT16 = new byte[] {2, 102, 71, 14};
  // {00000000 00000001 01000000 00100000 00000000 00000000 00000000 00000010 00000001 01000000 00000100 00000010 01011100 00000010 00000100 00000000 000000}
  public static final byte[] GRPSPLIT17 = new byte[] {0, -128, 2, 4, 0, 0, 0, 64, -128, 2, 32, 64, 58, 64, 32, 0, 0};
  // {11111111 11111111 11101111 11111111 11111111 11111111 11111100 11111110 11101101 11110111 01011100 01111111 10011111 00011110 11111111 11110111 1111}
  public static final byte[] GRPSPLIT18 = new byte[] {-1, -1, -9, -1, -1, -1, 63, 127, -73, -17, 58, -2, -7, 120, -1, -17, 15};
  // {10100101 10010001 00100100 11000010}
  public static final byte[] GRPSPLIT19 = new byte[] {-91, -119, 36, 67};
  // {11111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {31, 0, 0, 0};
  // {...3 0-bits... 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000100 01001000 00000001 0}
  public static final byte[] GRPSPLIT21 = new byte[] {0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 32, 18, -128, 0};
  // {10111111 11011111 00111110 01010110}
  public static final byte[] GRPSPLIT22 = new byte[] {-3, -5, 124, 106};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_6_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_6_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 20.0f ? 
             (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(130, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT1, 130, 0, data[8])) ? 
                 (data[12 /* TaxiOut */] < 2.0f ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(132, 1, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(132, 1, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT2, 132, 1, data[9])) ? 
                        0.13746667f : 
                        0.145341f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(132, 1, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT3, 132, 1, data[9])) ? 
                        -0.09609517f : 
                        -0.045773927f)) : 
                 (data[7 /* AirTime */] < 87.5f ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT4, 133, 0, data[9])) ? 
                        -0.11414929f : 
                        -0.029352961f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT5, 133, 0, data[9])) ? 
                        -0.02309548f : 
                        0.034298737f))) : 
             (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT6, 133, 0, data[9])) ? 
                 (Double.isNaN(data[6]) || data[6 /* FlightNum */] < 1866.5f ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                        -0.04648334f : 
                        0.057350453f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                        -0.04412396f : 
                        0.15502737f)) : 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(130, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT9, 130, 0, data[8])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[2])) ? 
                        -0.0057546017f : 
                        0.07390018f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT11, 133, 0, data[9])) ? 
                        0.01803422f : 
                        0.12510279f)))) : 
         (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[8])) ? 
             (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                 (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                     (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 17.5f ? 
                        -0.024295876f : 
                        0.055250634f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[2])) ? 
                        0.03133466f : 
                        0.11094316f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT16, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT17, 134, 0, data[9])) ? 
                        -0.080820546f : 
                        0.013122363f) : 
                     (data[4 /* CRSDepTime */] < 848.5f ? 
                        0.0016847954f : 
                        0.065838285f))) : 
             (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                 (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT19, 134, 0, data[9])) ? 
                     (data[7 /* AirTime */] < 208.5f ? 
                        -0.10108009f : 
                        -0.0060248924f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT20, 134, 0, data[9])) ? 
                        0.04056246f : 
                        0.12089348f)) : 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT21, 134, 0, data[9])) ? 
                     (Double.isNaN(data[4]) || data[4 /* CRSDepTime */] < 1548.5f ? 
                        -0.024631202f : 
                        0.047302715f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT22, 132, 0, data[8])) ? 
                        0.05259462f : 
                        0.09045028f)))));
    return pred;
  } // constant pool size = 436B, number of visited nodes = 31, static init size = 1860B
  // {11110001 11101100 00100100 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-113, 55, 36, 0};
  // {01010010 01100000 11100010 01101001 10011000 00101101 01100111 00001110 10000001 00101100 01010001 00011011 10011000 10100100 00001110 00001000 01}
  public static final byte[] GRPSPLIT1 = new byte[] {74, 6, 71, -106, 25, -76, -26, 112, -127, 52, -118, -40, 25, 37, 112, 16, 2};
  // {...1 0-bits... 00000010 00000000 00100000 00000010 00000000 00000000 00001000 00001000 00000010 00000001 00010000 00000000 10010000 00100000 00000000 00001000 0010}
  public static final byte[] GRPSPLIT2 = new byte[] {64, 0, 4, 64, 0, 0, 16, 16, 64, -128, 8, 0, 9, 4, 0, 16, 4};
  // {...1 0-bits... 01101011 11111110 01111111 11100111 00010101 11110111 11111101 00011110 11011101 01111010 01111111 10011110 11111111 10101111 11111011 11101111 1101}
  public static final byte[] GRPSPLIT3 = new byte[] {-42, 127, -2, -25, -88, -17, -65, 120, -69, 94, -2, 121, -1, -11, -33, -9, 11};
  // {01101101 10111001 11111111 10101111 11011111 11011111 11111111 10111010 11110111 11111111 11011011 11111111 11111111 11101111 10011101 11101111 11011}
  public static final byte[] GRPSPLIT4 = new byte[] {-74, -99, -1, -11, -5, -5, -1, 93, -17, -1, -37, -1, -1, -9, -71, -9, 27};
  // {10001111 11001010 10101111 11111111 01001011 11111110 00111111 10011111 00100111 11110001 11010011 01101001 11110111 11110101 00111111 11111011 11111}
  public static final byte[] GRPSPLIT5 = new byte[] {-15, 83, -11, -1, -46, 127, -4, -7, -28, -113, -53, -106, -17, -81, -4, -33, 31};
  // {01101101 11011111 00111111 11110111 10101111 11111111 11110111 11111011 11100111 11111100 10011111 11111111 11110001 10011100 11111111 11011111 11110}
  public static final byte[] GRPSPLIT6 = new byte[] {-74, -5, -4, -17, -11, -1, -17, -33, -25, 63, -7, -1, -113, 57, -1, -5, 15};
  // {11000000 10100100 00000001 01111000}
  public static final byte[] GRPSPLIT7 = new byte[] {3, 37, -128, 30};
  // {11111111 01101011 10111111 11111010}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -42, -3, 95};
  // {11111111 10111110 11111111 11111111 11110111 01101111 11100111 11111011 10111111 11110011 11011111 10110101 01111111 01111111 01000111 01110111 11}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 125, -1, -1, -17, -10, -25, -33, -3, -49, -5, -83, -2, -2, -30, -18, 3};
  // {01100001 11111101 11111110 11110100}
  public static final byte[] GRPSPLIT10 = new byte[] {-122, -65, 127, 47};
  // {10111111 11111011 11111111 10101111 11111011 11111101 11111111 10111111 11111111 11110111 01110101 11111101 01111111 11101111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT11 = new byte[] {-3, -33, -1, -11, -33, -65, -1, -3, -1, -17, -82, -65, -2, -9, -1, -1, 31};
  // {10111110 11101101 11010100 11011111 00010011 11111101 11110110 10111100 11001110 11110000 11001100 00000101 10000011 00011100 00100111 11111110 1101}
  public static final byte[] GRPSPLIT12 = new byte[] {125, -73, 43, -5, -56, -65, 111, 61, 115, 15, 51, -96, -63, 56, -28, 127, 11};
  // {00011000 00011010 00000010 01110000}
  public static final byte[] GRPSPLIT13 = new byte[] {24, 88, 64, 14};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, 0, 0};
  // {10100011 00000001 11000100 00000110}
  public static final byte[] GRPSPLIT15 = new byte[] {-59, -128, 35, 96};
  // {01000000 00000000 00001001 00100000 11100100 00000010 00000000 00000010 00000001 00001010 00000000 01111000 00011000 11000001 11000000 00000000 0010}
  public static final byte[] GRPSPLIT16 = new byte[] {2, 0, -112, 4, 39, 64, 0, 64, -128, 80, 0, 30, 24, -125, 3, 0, 4};
  // {11111111 11110011 11101111 11011111 11111111 11111101 11110011 11011111 01110111 11110011 11111011 11111101 01111111 11011110 10111111 11111111 111111}
  public static final byte[] GRPSPLIT17 = new byte[] {-1, -49, -9, -5, -1, -65, -49, -5, -18, -49, -33, -65, -2, 123, -3, -1, 63};
  // {01111000 11111111 01100010 01111110}
  public static final byte[] GRPSPLIT18 = new byte[] {30, -1, 70, 126};
  // {00010000 00010001 01000001 00100000 00000000 00000010 00100000 00100000 01011010 10100101 00000000 01000010 00010000 00000000 10000011 00010000 001001}
  public static final byte[] GRPSPLIT19 = new byte[] {8, -120, -126, 4, 0, 64, 4, 4, 90, -91, 0, 66, 8, 0, -63, 8, 36};
  // {00010000 00010000 00000001 00000000 00000000 00000000 00000000 00000000 01010010 00000001 00000000 01000000 00000000 00000000 00000010 00010000 001001}
  public static final byte[] GRPSPLIT20 = new byte[] {8, 8, -128, 0, 0, 0, 0, 0, 74, -128, 0, 2, 0, 0, 64, 8, 36};
  // {10111111 11111001 11011111 11111111 01111101 11111011 01111010 01111001 11011111 00111110 11111011 11011101 10011111 01101111 10111011 11111011 111111}
  public static final byte[] GRPSPLIT21 = new byte[] {-3, -97, -5, -1, -66, -33, 94, -98, -5, 124, -33, -69, -7, -10, -35, -33, 63};
  // {01111101 11111011 10111111 11111010 11101111 11111110 11101101 11111011 11111011 11101111 01110011 11111111 01111111 11101111 11011101 01001101 1011}
  public static final byte[] GRPSPLIT22 = new byte[] {-66, -33, -3, 95, -9, 127, -73, -33, -33, -9, -50, -1, -2, -9, -69, -78, 13};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_7_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_7_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* TaxiOut */] < 14.5f ? 
         (data[7 /* AirTime */] < 336.5f ? 
             (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
                 (Double.isNaN(data[11]) || data[11 /* TaxiIn */] < 19.5f ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT1, 130, 0, data[8])) ? 
                        -0.09466708f : 
                        -0.04630113f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT2, 130, 0, data[8])) ? 
                        -0.029241152f : 
                        0.19760214f)) : 
                 (data[4 /* CRSDepTime */] < 1143.5f ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT3, 129, 1, data[8])) ? 
                        -0.12891798f : 
                        -0.030397419f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(129, 1, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT4, 129, 1, data[8])) ? 
                        -0.0067208353f : 
                        0.06753707f))) : 
             (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT5, 133, 0, data[9])) ? 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT6, 130, 0, data[8])) ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(130, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT7, 130, 0, data[8])) ? 
                        0.13138014f : 
                        0.1349196f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(130, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT8, 130, 0, data[8])) ? 
                        0.13925976f : 
                        0.1431211f)) : 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(130, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT9, 130, 0, data[8])) ? 
                     (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                        0.14526506f : 
                        0.16068015f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                        0.1562045f : 
                        0.16897489f)))) : 
         (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[0])) ? 
             (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 26.5f ? 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[8])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT14, 134, 0, data[9])) ? 
                        -0.021848613f : 
                        0.064213544f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT15, 134, 0, data[9])) ? 
                        -0.017277744f : 
                        0.03735702f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT16, 132, 0, data[8])) ? 
                     (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 41.5f ? 
                        0.015154879f : 
                        0.116580084f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT17, 134, 0, data[9])) ? 
                        0.02268268f : 
                        0.11726963f))) : 
             (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT18, 132, 0, data[8])) ? 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT20, 132, 0, data[8])) ? 
                        -0.0898208f : 
                        0.01566982f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT21, 134, 0, data[9])) ? 
                        -0.23349f : 
                        0.06669841f)) : 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[2])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT23, 134, 0, data[9])) ? 
                        0.058168363f : 
                        0.113422856f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT24, 132, 0, data[8])) ? 
                        0.10162611f : 
                        0.14002751f)))));
    return pred;
  } // constant pool size = 498B, number of visited nodes = 31, static init size = 2232B
  // {00000000 11101100 00001100 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 55, 48, 0};
  // {00111101 10110100 11111111 11111010 11001101 00101101 11101101 11011111 10111101 11111001 10011101 11111111 01111101 00000111 01011101 01111111 11}
  public static final byte[] GRPSPLIT1 = new byte[] {-68, 45, -1, 95, -77, -76, -73, -5, -67, -97, -71, -1, -66, -32, -70, -2, 3};
  // {11111110 11111111 11101110 10111111 11010111 11101111 11111111 11111111 11111100 11110111 11111111 11111110 01111111 11111111 01111111 11111111 11}
  public static final byte[] GRPSPLIT2 = new byte[] {127, -1, 119, -3, -21, -9, -1, -1, 63, -17, -1, 127, -2, -1, -2, -1, 3};
  // {...1 0-bits... 11001111 01011011 01111111 11011111 11111011 10011110 11111001 11111101 11011111 11101111 11111000 11111011 11111111 11011111 00100011 11111110 0}
  public static final byte[] GRPSPLIT3 = new byte[] {-13, -38, -2, -5, -33, 121, -97, -65, -5, -9, 31, -33, -1, -5, -60, 127, 0};
  // {...1 0-bits... 10010000 00101100 00000001 00000000 00000100 01000000 00000001 00001110 00001110 10010000 00010111 00010010 00000100 01100011 01001110 01000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {9, 52, -128, 0, 32, 2, -128, 112, 112, 9, -24, 72, 32, -58, 114, 2, 0};
  // {10010010 00100111 01000000 01000000 01000000 00000000 00000000 00000000 00010000 00000000 00000000 10000000 00011000 00000000 10000110 00000100 00000}
  public static final byte[] GRPSPLIT5 = new byte[] {73, -28, 2, 2, 2, 0, 0, 0, 8, 0, 0, 1, 24, 0, 97, 32, 0};
  // {11111111 01111110 11111110 01111111 10011111 01111101 11101111 11111111 10111101 11111111 11011111 11011111 11110011 11111111 01111111 01111111 11}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, 126, 127, -2, -7, -66, -9, -1, -67, -1, -5, -5, -49, -1, -2, -2, 3};
  // {00000000 00000001 00000000 00000000 01100000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00001100 00000000 00000000 00000000 00}
  public static final byte[] GRPSPLIT7 = new byte[] {0, -128, 0, 0, 6, 0, 0, 0, 0, 0, 4, 0, 48, 0, 0, 0, 0};
  // {00000000 00000000 00010000 01000000 10000000 00000000 00000000 00000010 00000000 00001000 01000001 00001010 00000000 00100000 00000000 00000000 00}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 8, 2, 1, 0, 0, 64, 0, 16, -126, 80, 0, 4, 0, 0, 0};
  // {01010001 00000100 01100001 10000000 00000000 00100001 00000000 00000000 00000000 00000000 00000000 00000010 10000000 01000000 00011000 10000000 00}
  public static final byte[] GRPSPLIT9 = new byte[] {-118, 32, -122, 1, 0, -124, 0, 0, 0, 0, 0, 64, 1, 2, 24, 1, 0};
  // {00000000 01100000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 6, 0, 0};
  // {00101111 00000010 01011001 10000010}
  public static final byte[] GRPSPLIT11 = new byte[] {-12, 64, -102, 65};
  // {10000000 11100100 00001100 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {1, 39, 48, 0};
  // {11011110 01101001 11000110 01111011 00011011 01100101 11100111 10110001 10011100 10111100 11000101 00111011 11100001 10111001 10000011 01111000 1101}
  public static final byte[] GRPSPLIT13 = new byte[] {123, -106, 99, -34, -40, -90, -25, -115, 57, 61, -93, -36, -121, -99, -63, 30, 11};
  // {10000000 10010010 00001000 00000010 00001000 00000000 10100000 00001000 01000010 00100000 00011000 00000000 00000000 10000100 00001100 00100100 001100}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 73, 16, 64, 16, 0, 5, 16, 66, 4, 24, 0, 0, 33, 48, 36, 12};
  // {00011100 11001011 11011111 10111111 01111001 11111110 10110111 00111011 00011111 11110101 10010111 01111101 10010110 00000101 01111011 11111111 101101}
  public static final byte[] GRPSPLIT15 = new byte[] {56, -45, -5, -3, -98, 127, -19, -36, -8, -81, -23, -66, 105, -96, -34, -1, 45};
  // {11111111 10111111 11111110 11111010 11010111 01111111 11111111 11011101 10111111 01111111 11111111 11101101 11111111 11111111 10010101 11111111 1111}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, -3, 127, 95, -21, -2, -1, -69, -3, -2, -1, -73, -1, -1, -87, -1, 15};
  // {10111111 11111111 01111111 11111111 11111111 11111101 11111111 11111111 11101111 11111111 11011011 11111111 00111101 11111101 11111111 10111111 110101}
  public static final byte[] GRPSPLIT17 = new byte[] {-3, -1, -2, -1, -1, -65, -1, -1, -9, -1, -37, -1, -68, -65, -1, -3, 43};
  // {11111101 10101011 10111110 11011111 11010111 11001111 01111101 01111101 11111111 11101111 01111111 11101101 11011101 11011111 11110101 11111111 1111}
  public static final byte[] GRPSPLIT18 = new byte[] {-65, -43, 125, -5, -21, -13, -66, -66, -1, -9, -2, -73, -69, -5, -81, -1, 15};
  // {10101101 10100111 11000110 01110110}
  public static final byte[] GRPSPLIT19 = new byte[] {-75, -27, 99, 110};
  // {11111111 10101011 10111110 11111111 11110111 11111111 01111111 01111111 11111111 11111111 01111111 11111111 11111111 11011111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT20 = new byte[] {-1, -43, 125, -1, -17, -1, -2, -2, -1, -1, -2, -1, -1, -5, -1, -1, 15};
  // {11111111 11111011 11111111 11101111 11111111 11111111 11111011 11111111 01111111 11111111 11111111 11111111 00111111 11011110 11111111 11111111 110111}
  public static final byte[] GRPSPLIT21 = new byte[] {-1, -33, -1, -9, -1, -1, -33, -1, -2, -1, -1, -1, -4, 123, -1, -1, 59};
  // {01111011 01001111 11000000 01110010}
  public static final byte[] GRPSPLIT22 = new byte[] {-34, -14, 3, 78};
  // {10111111 11110101 11011111 10111111 11011110 11111111 01111111 11111111 11111111 11111011 01111011 01010111 11100111 01111111 10111010 11001111 111011}
  public static final byte[] GRPSPLIT23 = new byte[] {-3, -81, -5, -3, 123, -1, -2, -1, -1, -33, -34, -22, -25, -2, 93, -13, 55};
  // {00000000 00000000 00010000 11000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100001 10010000 11000000 00010001 10000000 0100}
  public static final byte[] GRPSPLIT24 = new byte[] {0, 0, 8, 3, 0, 0, 0, 0, 0, 0, 0, -124, 9, 3, -120, 1, 2};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_8_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_8_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (data[12 /* TaxiOut */] < 18.0f ? 
             (data[7 /* AirTime */] < 335.5f ? 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(130, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT1, 130, 0, data[8])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT2, 133, 0, data[9])) ? 
                        -0.09998345f : 
                        -0.04547264f) : 
                     (data[5 /* CRSArrTime */] < 1510.5f ? 
                        -0.05306768f : 
                        0.0070632095f)) : 
                 (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 6.5f ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(118, 3, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(118, 3, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT3, 118, 3, data[8])) ? 
                        0.13006261f : 
                        0.13934901f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(118, 3, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT4, 118, 3, data[8])) ? 
                        0.14951359f : 
                        0.17161104f))) : 
             (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(133, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT5, 133, 0, data[9])) ? 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(130, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT6, 130, 0, data[8])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                        -0.06051554f : 
                        -0.005940139f) : 
                     (Double.isNaN(data[4]) || data[4 /* CRSDepTime */] < 1383.0f ? 
                        0.07676742f : 
                        0.004387766f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT8, 130, 0, data[8])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[2])) ? 
                        -0.08982447f : 
                        0.02356117f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(130, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT10, 130, 0, data[8])) ? 
                        0.059717238f : 
                        0.118013605f)))) : 
         (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
             (data[12 /* TaxiOut */] < 12.5f ? 
                 (data[7 /* AirTime */] < 299.5f ? 
                     (Double.isNaN(data[11]) || data[11 /* TaxiIn */] < 12.5f ? 
                        -0.038396094f : 
                        0.10743383f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(129, 1, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT12, 129, 1, data[8])) ? 
                        0.13175766f : 
                        0.15098268f)) : 
                 (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT14, 134, 0, data[9])) ? 
                        -0.035666067f : 
                        0.016055876f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT15, 132, 0, data[8])) ? 
                        0.043045726f : 
                        0.09909133f))) : 
             (data[4 /* CRSDepTime */] < 1106.5f ? 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT16, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT17, 134, 0, data[9])) ? 
                        -0.09164425f : 
                        0.0017670298f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT18, 134, 0, data[9])) ? 
                        -0.099334896f : 
                        0.081473425f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT20, 134, 0, data[9])) ? 
                        -0.053648617f : 
                        0.03233795f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT21, 134, 0, data[9])) ? 
                        0.060695656f : 
                        0.10999383f)))));
    return pred;
  } // constant pool size = 453B, number of visited nodes = 31, static init size = 1962B
  // {11110011 11101100 01100100 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-49, 55, 38, 0};
  // {01001010 00010100 11100011 01101011 10001000 00100000 01100000 01000110 00000001 01100000 00110000 00011011 00011000 10000000 01000110 00000010 01}
  public static final byte[] GRPSPLIT1 = new byte[] {82, 40, -57, -42, 17, 4, 6, 98, -128, 6, 12, -40, 24, 1, 98, 64, 2};
  // {00111101 10110110 01110111 11010011 11001110 11011001 11111010 10111111 01100111 10110001 10011101 01001111 01111111 11010101 01011100 11000111 01101}
  public static final byte[] GRPSPLIT2 = new byte[] {-68, 109, -18, -53, 115, -101, 95, -3, -26, -115, -71, -14, -2, -85, 58, -29, 22};
  // {...3 0-bits... 00000010 00000111 00000011 01000100 01000000 00000010 00000000 00100000 00000001 01000000 00000000 00011100 00000100 00000000 000100}
  public static final byte[] GRPSPLIT3 = new byte[] {64, -32, -64, 34, 2, 64, 0, 4, -128, 2, 0, 56, 32, 0, 8};
  // {...3 0-bits... 00010000 00101000 00001100 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT4 = new byte[] {8, 20, 48, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {10001001 11001010 00101000 10110001 00100100 00010010 10100100 11001010 10010101 01000001 10101110 00101101 01000000 00001101 00100000 11100101 00110}
  public static final byte[] GRPSPLIT5 = new byte[] {-111, 83, 20, -115, 36, 72, 37, 83, -87, -126, 117, -76, 2, -80, 4, -89, 12};
  // {00010000 01000001 11100010 00100000 00010010 00100000 01000101 01000110 10000000 00001010 01000000 00000001 00100000 11100000 00000000 00001000 01}
  public static final byte[] GRPSPLIT6 = new byte[] {8, -126, 71, 4, 72, 4, -94, 98, 1, 80, 2, -128, 4, 7, 0, 16, 2};
  // {01110101 11001101 00000001 11110010}
  public static final byte[] GRPSPLIT7 = new byte[] {-82, -77, -128, 79};
  // {11111111 11101110 11101101 11111011 11111111 01000111 11111111 10111111 10111111 10111111 11011111 11111111 11111011 00111111 10001111 01110111 11}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, 119, -73, -33, -1, -30, -1, -3, -3, -3, -5, -1, -33, -4, -15, -18, 3};
  // {11010001 10110001 11000010 10001110}
  public static final byte[] GRPSPLIT9 = new byte[] {-117, -115, 67, 113};
  // {11101111 11111111 11111111 01111111 00111111 11111111 11101101 11111111 11111101 11110011 11101111 11101101 01110111 11111111 11111111 11111101 11}
  public static final byte[] GRPSPLIT10 = new byte[] {-9, -1, -1, -2, -4, -1, -73, -1, -65, -49, -9, -73, -18, -1, -1, -65, 3};
  // {01011000 00010000 00000010 01110000}
  public static final byte[] GRPSPLIT11 = new byte[] {26, 8, 64, 14};
  // {...1 0-bits... 10000010 00001000 01100000 00000000 11000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 10000000 00110001 00000100 0}
  public static final byte[] GRPSPLIT12 = new byte[] {65, 16, 6, 0, 3, 0, 0, 0, 0, 0, 0, 0, -128, 1, -116, 32, 0};
  // {10000000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 3, 0, 0};
  // {00111101 11011010 01011111 10011111 10111001 11111011 10100111 01111101 01001110 11111111 01111011 01111101 11111110 11101100 01111110 10101011 001111}
  public static final byte[] GRPSPLIT14 = new byte[] {-68, 91, -6, -7, -99, -33, -27, -66, 114, -1, -34, -66, 127, 55, 126, -43, 60};
  // {11111110 11111011 11011110 11011111 11011111 11111111 11111111 11111101 11111111 11101111 01111111 10101110 11011111 10011111 11101001 11111111 1111}
  public static final byte[] GRPSPLIT15 = new byte[] {127, -33, 123, -5, -5, -1, -1, -65, -1, -9, -2, 117, -5, -7, -105, -1, 15};
  // {10010010 01100101 10010000 11000100 00010000 10100000 01010010 00000010 00000011 11000110 00000000 00100000 10010100 10000001 00000000 00001000 0100}
  public static final byte[] GRPSPLIT16 = new byte[] {73, -90, 9, 35, 8, 5, 74, 64, -64, 99, 0, 4, 41, -127, 0, 16, 2};
  // {10111110 11111100 10111111 11011110 10111110 11011101 11111010 10011111 01101110 10110110 01111011 11110101 01111111 01011110 11111011 10101111 111011}
  public static final byte[] GRPSPLIT17 = new byte[] {125, 63, -3, 123, 125, -69, 95, -7, 118, 109, -34, -81, -2, 122, -33, -11, 55};
  // {11111110 11011111 11111011 10011110 11111111 11111111 11110111 10111111 11111111 11111111 11111011 11011111 11111111 11111110 10111111 11111111 111101}
  public static final byte[] GRPSPLIT18 = new byte[] {127, -5, -33, 121, -1, -1, -17, -3, -1, -1, -33, -5, -1, 127, -3, -1, 47};
  // {01111101 10111111 11011100 01111111 01110011 11111100 11110111 10111111 11011111 01111111 01001010 11111101 11001011 01011100 11101110 11111101 1011}
  public static final byte[] GRPSPLIT19 = new byte[] {-66, -3, 59, -2, -50, 63, -17, -3, -5, -2, 82, -65, -45, 58, 119, -65, 13};
  // {11111111 11110010 11101111 11111111 10011111 11111001 11110111 10111111 01011110 11111011 01111011 11111101 11111110 11011100 11111111 11111011 111111}
  public static final byte[] GRPSPLIT20 = new byte[] {-1, 79, -9, -1, -7, -97, -17, -3, 122, -33, -34, -65, 127, 59, -1, -33, 63};
  // {00001001 00101010 01010001 01100011 10001011 00000010 00101001 00000011 11000000 01010000 00000000 10001110 00000000 10100101 10001001 01110000 000111}
  public static final byte[] GRPSPLIT21 = new byte[] {-112, 84, -118, -58, -47, 64, -108, -64, 3, 10, 0, 113, 0, -91, -111, 14, 56};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_9_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_9_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 24.0f ? 
             (data[7 /* AirTime */] < 130.5f ? 
                 (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 15.5f ? 
                     (Double.isNaN(data[11]) || data[11 /* TaxiIn */] < 18.5f ? 
                        -0.04566815f : 
                        0.13005646f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT1, 133, 0, data[9])) ? 
                        -0.040424593f : 
                        0.04687649f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT2, 132, 0, data[8])) ? 
                     (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                        -0.064431705f : 
                        -0.0134256f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT4, 134, 0, data[9])) ? 
                        -0.034438603f : 
                        0.019584151f))) : 
             (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT5, 134, 0, data[9])) ? 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                     (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 31.5f ? 
                        -0.1327068f : 
                        0.049461566f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                        0.03737525f : 
                        0.15637502f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT8, 132, 0, data[8])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[2])) ? 
                        -0.029075548f : 
                        0.091881655f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[2])) ? 
                        0.06550946f : 
                        0.11119227f)))) : 
         (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT11, 132, 0, data[8])) ? 
             (data[7 /* AirTime */] < 58.5f ? 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(131, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(131, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT12, 131, 0, data[8])) ? 
                     (data[5 /* CRSArrTime */] < 1214.5f ? 
                        -0.12966102f : 
                        -0.039641496f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                        -0.09666868f : 
                        0.056517903f)) : 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(132, 1, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT14, 132, 1, data[9])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[2])) ? 
                        -0.0404433f : 
                        0.021644272f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                        0.011524629f : 
                        0.05147623f))) : 
             (Double.isNaN(data[5]) || data[5 /* CRSArrTime */] < 1723.5f ? 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(132, 1, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT17, 132, 1, data[9])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                        -0.10623121f : 
                        0.00806003f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                        0.018934704f : 
                        0.07947947f)) : 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                     (Double.isNaN(data[5]) || data[5 /* CRSArrTime */] < 2242.5f ? 
                        0.05429045f : 
                        -0.19112273f) : 
                     (!Double.isNaN(data[3 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 7) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[3])) ? 
                        -0.0015563873f : 
                        0.109676056f)))));
    return pred;
  } // constant pool size = 353B, number of visited nodes = 31, static init size = 1362B
  // {10010001 01101000 00000100 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-119, 22, 32, 0};
  // {01001000 10001111 00011000 10110011 00001000 00110100 00100110 00001000 00010101 01000101 10101000 00011010 00011000 01100001 00101110 00000000 10110}
  public static final byte[] GRPSPLIT1 = new byte[] {18, -15, 24, -51, 16, 44, 100, 16, -88, -94, 21, 88, 24, -122, 116, 0, 13};
  // {11011101 11101011 11111110 11111011 11011111 01111111 01100110 10111111 11001101 00111101 11000111 11111011 11110001 11111101 01011111 11111001 0111}
  public static final byte[] GRPSPLIT2 = new byte[] {-69, -41, 127, -33, -5, -2, 102, -3, -77, -68, -29, -33, -113, -65, -6, -97, 14};
  // {00101000 00000111 00100000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {20, -32, 4, 0};
  // {10011101 11011010 11011011 00111111 11101101 11111011 10100111 10111111 01001111 10111101 10011011 11111101 11111111 11001111 00111011 11111011 111101}
  public static final byte[] GRPSPLIT4 = new byte[] {-71, 91, -37, -4, -73, -33, -27, -3, -14, -67, -39, -65, -1, -13, -36, -33, 47};
  // {10101111 11011111 01111111 11111111 10101111 11111111 11110111 11111111 11101111 11111110 10111111 01111111 11111111 10111100 11111111 01111111 111111}
  public static final byte[] GRPSPLIT5 = new byte[] {-11, -5, -2, -1, -11, -1, -17, -1, -9, 127, -3, -2, -1, 61, -1, -2, 63};
  // {11010000 01111000 00100001 01011000}
  public static final byte[] GRPSPLIT6 = new byte[] {11, 30, -124, 26};
  // {01101111 10101111 11111111 11110110}
  public static final byte[] GRPSPLIT7 = new byte[] {-10, -11, -1, 111};
  // {11111111 10111111 11111110 11111111 11010011 01111111 11101111 11011111 10111111 01111111 11111111 11111111 11111111 11111111 11111101 01110111 1111}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -3, 127, -1, -53, -2, -9, -5, -3, -2, -1, -1, -1, -1, -65, -18, 15};
  // {01010100 10001100 00101000 00110110}
  public static final byte[] GRPSPLIT9 = new byte[] {42, 49, 20, 108};
  // {01000010 01111111 10110110 10110000}
  public static final byte[] GRPSPLIT10 = new byte[] {66, -2, 109, 13};
  // {00000000 01000001 10000000 01100001 00000001 10100000 01010000 10000110 00000100 11010000 00101000 01101000 00001110 10010010 10100110 00110000 0100}
  public static final byte[] GRPSPLIT11 = new byte[] {0, -126, 1, -122, -128, 5, 10, 97, 32, 11, 20, 22, 112, 73, 101, 12, 2};
  // {10111111 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111100 01111111 01011111 10111111 10111111 11111111 111}
  public static final byte[] GRPSPLIT12 = new byte[] {-3, -1, -5, -1, -1, -1, -1, -1, -1, -1, 63, -2, -6, -3, -3, -1, 7};
  // {11011110 01110111 10001111 01111110}
  public static final byte[] GRPSPLIT13 = new byte[] {123, -18, -15, 126};
  // {...1 0-bits... 01111111 11110101 01111111 10111100 00111111 10110111 11110110 11111010 11111111 11111111 11110111 10111110 10010101 11011001 11111111 11111111 0100}
  public static final byte[] GRPSPLIT14 = new byte[] {-2, -81, -2, 61, -4, -19, 111, 95, -1, -1, -17, 125, -87, -101, -1, -1, 2};
  // {10000110 11010010 00001010 01101110}
  public static final byte[] GRPSPLIT15 = new byte[] {97, 75, 80, 118};
  // {01100001 10011110 11110110 01110000}
  public static final byte[] GRPSPLIT16 = new byte[] {-122, 121, 111, 14};
  // {...1 0-bits... 11111101 11100001 10111111 11011111 10111101 11111110 11110101 01110111 11011111 01101100 11110110 11101111 01111111 11101111 01110111 01111111 1110}
  public static final byte[] GRPSPLIT17 = new byte[] {-65, -121, -3, -5, -67, 127, -81, -18, -5, 54, 111, -9, -2, -9, -18, -2, 7};
  // {11111111 11011101 01110110 01111100}
  public static final byte[] GRPSPLIT18 = new byte[] {-1, -69, 110, 62};
  // {00111111 10111011 10100110 01111110}
  public static final byte[] GRPSPLIT19 = new byte[] {-4, -35, 101, 126};
  // {11010111 01010111 01001011 01010010}
  public static final byte[] GRPSPLIT20 = new byte[] {-21, -22, -46, 74};
  // {11111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {95, 0, 0, 0};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_10 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_10_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_10_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* TaxiOut */] < 13.5f ? 
         (data[7 /* AirTime */] < 326.5f ? 
             (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT1, 133, 0, data[9])) ? 
                     (Double.isNaN(data[11]) || data[11 /* TaxiIn */] < 12.5f ? 
                        -0.09110193f : 
                        0.059811004f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT2, 130, 0, data[8])) ? 
                        -0.070501864f : 
                        -0.020093923f)) : 
                 (data[4 /* CRSDepTime */] < 1106.5f ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT3, 129, 1, data[8])) ? 
                        -0.09141026f : 
                        -0.011399838f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT4, 129, 1, data[8])) ? 
                        -0.0074363393f : 
                        0.057960253f))) : 
             (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT5, 133, 0, data[9])) ? 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT6, 133, 0, data[9])) ? 
                    0.059850276f : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT7, 130, 0, data[8])) ? 
                        0.12514186f : 
                        0.13067877f)) : 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(130, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT8, 130, 0, data[8])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[2])) ? 
                        0.08772027f : 
                        0.13656723f) : 
                     (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 6.0f ? 
                        0.14361148f : 
                        0.16269262f)))) : 
         (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
             (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[9])) ? 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[8])) ? 
                        -0.053114824f : 
                        -0.012071439f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT14, 132, 0, data[8])) ? 
                        -0.028370237f : 
                        0.028510358f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT15, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                        -0.10055751f : 
                        -0.032628167f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                        0.0069763646f : 
                        0.03695996f))) : 
             (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT18, 132, 0, data[8])) ? 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[8])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                        -0.10514691f : 
                        0.045470726f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[2])) ? 
                        0.014756737f : 
                        0.06163018f)) : 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT22, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT23, 134, 0, data[9])) ? 
                        -0.06355287f : 
                        0.08175378f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT24, 134, 0, data[9])) ? 
                        0.064145304f : 
                        0.13967879f)))));
    return pred;
  } // constant pool size = 468B, number of visited nodes = 30, static init size = 2076B
  // {01000000 00011000 00000010 01110000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 24, 64, 14};
  // {00000000 10100011 01010000 00100011 01000100 00000010 10000010 00000000 10000000 00000100 00000000 00100110 11011100 11000011 10001100 01110000 10101}
  public static final byte[] GRPSPLIT1 = new byte[] {0, -59, 10, -60, 34, 64, 65, 0, 1, 32, 0, 100, 59, -61, 49, 14, 21};
  // {01000011 01000100 11110000 11100100 01001000 10100000 01000000 01000000 00000001 10000000 00110001 01011011 10001100 11100000 00010111 10101010 00}
  public static final byte[] GRPSPLIT2 = new byte[] {-62, 34, 15, 39, 18, 5, 2, 2, -128, 1, -116, -38, 49, 7, -24, 85, 0};
  // {...1 0-bits... 10000110 00001000 01000101 10001100 11010000 00000100 01000000 10000100 00000111 10000000 00000000 01110000 01110001 01000010 00011001 00010100 1}
  public static final byte[] GRPSPLIT3 = new byte[] {97, 16, -94, 49, 11, 32, 2, 33, -32, 1, 0, 14, -114, 66, -104, 40, 1};
  // {...1 0-bits... 11011101 11011011 00011110 11011010 11001110 11111110 10011001 01111111 11011011 11101011 10111111 10111010 10110110 11101111 01111000 11111111 1}
  public static final byte[] GRPSPLIT4 = new byte[] {-69, -37, 120, 91, 115, 127, -103, -2, -37, -41, -3, 93, 109, -9, 30, -1, 1};
  // {10010010 00100111 01000000 01000000 01010000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00011000 00000000 11000100 00000100 00000}
  public static final byte[] GRPSPLIT5 = new byte[] {73, -28, 2, 2, 10, 0, 0, 0, 0, 0, 0, 1, 24, 0, 35, 32, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111011 11111101 11111111 11111}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -9, -1, -1, -1, -1, -33, -65, -1, 31};
  // {11111111 01111110 11111110 01111111 10111111 01111101 11101111 11111111 10111101 11111111 11111111 11011111 11111011 11111111 01111111 01111111 11}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, 126, 127, -2, -3, -66, -9, -1, -67, -1, -1, -5, -33, -1, -2, -2, 3};
  // {01000001 00000100 00100001 10000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000010 10000000 01000000 00011000 10000000 00}
  public static final byte[] GRPSPLIT8 = new byte[] {-126, 32, -124, 1, 0, -128, 0, 0, 0, 0, 0, 64, 1, 2, 24, 1, 0};
  // {11111111 11010111 11111111 11111110}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -21, -1, 127};
  // {10000000 11101100 00001100 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 55, 48, 0};
  // {10011100 11011010 00011011 10110111 10101001 11111011 10100111 10101011 01000111 11111101 10011011 01001101 11010110 10000100 10111111 10101101 101101}
  public static final byte[] GRPSPLIT11 = new byte[] {57, 91, -40, -19, -107, -33, -27, -43, -30, -65, -39, -78, 107, 33, -3, -75, 45};
  // {01011110 10010000 00000010 01110010}
  public static final byte[] GRPSPLIT12 = new byte[] {122, 9, 64, 78};
  // {01000001 01000100 00010010 01100000 01000000 00100001 00000000 00100100 01000000 00000000 10100000 01010001 10100000 10100000 00000000 00001010 0100}
  public static final byte[] GRPSPLIT13 = new byte[] {-126, 34, 72, 6, 2, -124, 0, 36, 2, 0, 5, -118, 5, 5, 0, 80, 2};
  // {00010001 00000001 10100000 01100000 01100000 10000011 00010010 00100010 01000000 00000000 10001000 01010001 10000000 10000000 00000100 00001000 0100}
  public static final byte[] GRPSPLIT14 = new byte[] {-120, -128, 5, 6, 6, -63, 72, 68, 2, 0, 17, -118, 1, 1, 32, 16, 2};
  // {11011110 11101011 11110111 11111111 11111111 11111111 11110111 10111111 11111111 11111100 11110111 11111011 11110001 01110111 11001111 01111000 1001}
  public static final byte[] GRPSPLIT15 = new byte[] {123, -41, -17, -1, -1, -1, -17, -3, -1, 63, -17, -33, -113, -18, -13, 30, 9};
  // {01101100 11010111 10101111 11111110}
  public static final byte[] GRPSPLIT16 = new byte[] {54, -21, -11, 127};
  // {00110101 11011000 00000110 01110100}
  public static final byte[] GRPSPLIT17 = new byte[] {-84, 27, 96, 46};
  // {01000000 00000000 00110000 11000010 01000010 00000000 00000000 01000100 00000010 01000000 00001000 11101001 10011100 10000011 00100001 00101010 0100}
  public static final byte[] GRPSPLIT18 = new byte[] {2, 0, 12, 67, 66, 0, 0, 34, 64, 2, 16, -105, 57, -63, -124, 84, 2};
  // {11111111 10101111 10111110 11111111 11110111 11111111 11111111 01111111 11111011 11110111 11111111 11111101 11111111 11111111 11110111 11111111 1111}
  public static final byte[] GRPSPLIT19 = new byte[] {-1, -11, 125, -1, -17, -1, -1, -2, -33, -17, -1, -65, -1, -1, -17, -1, 15};
  // {00001101 11001110 00000000 11100000}
  public static final byte[] GRPSPLIT20 = new byte[] {-80, 115, 0, 7};
  // {01000101 10010011 01000010 01110110}
  public static final byte[] GRPSPLIT21 = new byte[] {-94, -55, 66, 110};
  // {01000000 00000000 00000000 00000010 00000000 00000000 00000000 01000000 00000000 00000000 00000000 10101000 00001100 10000001 00000001 00101010 0100}
  public static final byte[] GRPSPLIT22 = new byte[] {2, 0, 0, 64, 0, 0, 0, 2, 0, 0, 0, 21, 48, -127, -128, 84, 2};
  // {11111111 11110111 11101111 11111111 11111110 11111101 11111111 11111111 11111111 11111111 11111011 11011111 11111111 01111111 10111111 11111111 111011}
  public static final byte[] GRPSPLIT23 = new byte[] {-1, -17, -9, -1, 127, -65, -1, -1, -1, -1, -33, -5, -1, -2, -3, -1, 55};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111011 111111}
  public static final byte[] GRPSPLIT24 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -33, 63};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_11 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_11_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_11_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 23.5f ? 
         (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
             (data[12 /* TaxiOut */] < 2.5f ? 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT1, 130, 0, data[8])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(133, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT2, 133, 0, data[9])) ? 
                        0.12386711f : 
                        0.1413818f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(133, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT3, 133, 0, data[9])) ? 
                        0.12830777f : 
                        0.14104068f)) : 
                 (Double.isNaN(data[5]) || data[5 /* CRSArrTime */] < 1548.5f ? 
                     (data[12 /* TaxiOut */] < 12.5f ? 
                        -0.061492886f : 
                        -0.018507153f) : 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.052349087f : 
                        0.005088759f))) : 
             (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT5, 132, 0, data[8])) ? 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                     (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 9.5f ? 
                        -0.03566396f : 
                        0.008948735f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT7, 134, 0, data[9])) ? 
                        -0.019612385f : 
                        0.028456785f)) : 
                 (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[9])) ? 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                        -0.0066765198f : 
                        0.0339002f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT10, 132, 0, data[8])) ? 
                        0.024057686f : 
                        0.082300834f)))) : 
         (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 30.5f ? 
             (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT11, 133, 0, data[9])) ? 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT13, 133, 0, data[9])) ? 
                        -0.23586972f : 
                        -0.06885136f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT14, 129, 1, data[8])) ? 
                        -0.16749226f : 
                        0.027914453f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT15, 129, 1, data[8])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                        -0.010293107f : 
                        0.10869505f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                        0.0578938f : 
                        0.12470992f))) : 
             (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT18, 129, 1, data[8])) ? 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT19, 133, 0, data[9])) ? 
                    -0.09817753f : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                        -0.014498035f : 
                        0.101900324f)) : 
                 (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[2])) ? 
                        0.08618114f : 
                        0.12508816f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[2])) ? 
                        0.051683106f : 
                        0.13394815f)))));
    return pred;
  } // constant pool size = 411B, number of visited nodes = 30, static init size = 1734B
  // {11110001 11101000 00000100 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-113, 23, 32, 0};
  // {00000011 00000000 01100000 00100100 11010000 00000000 10000000 00000110 00000000 00001000 01000001 01001011 10000000 10100000 00000010 00000000 00}
  public static final byte[] GRPSPLIT1 = new byte[] {-64, 0, 6, 36, 11, 0, 1, 96, 0, 16, -126, -46, 1, 5, 64, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 01000000 00010000 00000000 01000000 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 2, 8, 0, 2, 0};
  // {00000010 00100101 00000000 01000000 00000000 00000000 00000000 00000000 00010001 00001000 00000000 00000000 00010000 00000000 00000000 00000100 00000}
  public static final byte[] GRPSPLIT3 = new byte[] {64, -92, 0, 2, 0, 0, 0, 0, -120, 16, 0, 0, 8, 0, 0, 32, 0};
  // {00001111 11111101 01111000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-16, -65, 30, 0};
  // {11111100 11111011 11010100 11111111 00010111 11111101 11110110 10111100 11001110 11110000 11101101 00011111 10000011 01011100 11100111 01111110 1101}
  public static final byte[] GRPSPLIT5 = new byte[] {63, -33, 43, -1, -24, -65, 111, 61, 115, 15, -73, -8, -63, 58, -25, 126, 11};
  // {10101001 11011000 10000010 01111010}
  public static final byte[] GRPSPLIT6 = new byte[] {-107, 27, 65, 94};
  // {01111110 11111010 00111111 11011111 11111110 11111101 11110111 10111111 11111110 11110011 11111011 11111101 01101110 11111100 10111111 11111111 010101}
  public static final byte[] GRPSPLIT7 = new byte[] {126, 95, -4, -5, 127, -65, -17, -3, 127, -49, -33, -65, 118, 63, -3, -1, 42};
  // {00010001 00010001 11011001 01100001 00000101 10000010 10100000 00000001 01000011 00111100 00000000 01010100 00000100 10001100 00011011 00110100 001001}
  public static final byte[] GRPSPLIT8 = new byte[] {-120, -120, -101, -122, -96, 65, 5, -128, -62, 60, 0, 42, 32, 49, -40, 44, 36};
  // {10001111 11011111 11111100 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-15, -5, 63, 0};
  // {01111111 10111111 10101111 11111110 11111111 01111111 11111101 11111011 11111001 11101111 11111111 11111100 11111101 10111111 11011111 11100101 1111}
  public static final byte[] GRPSPLIT10 = new byte[] {-2, -3, -11, 127, -1, -2, -65, -33, -97, -9, -1, 63, -65, -3, -5, -89, 15};
  // {10101101 11011011 01111111 11111111 10101111 11111111 11110111 11111111 11101111 11110001 10111111 01111111 01111111 10111100 10111111 00111111 11011}
  public static final byte[] GRPSPLIT11 = new byte[] {-75, -37, -2, -1, -11, -1, -17, -1, -9, -113, -3, -2, -2, 61, -3, -4, 27};
  // {01110011 01111111 10101010 11011000}
  public static final byte[] GRPSPLIT12 = new byte[] {-50, -2, 85, 27};
  // {00000010 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00001100 01000000 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT13 = new byte[] {64, 0, 1, 0, 0, 0, 0, 0, 0, 48, 2, 0, 0, 0, 0, 0, 0};
  // {...1 0-bits... 11111111 11111111 11111111 11111111 01111111 10011111 11111111 11111111 11111111 11111111 11111111 11111100 11111111 11111111 10111111 11111111 1}
  public static final byte[] GRPSPLIT14 = new byte[] {-1, -1, -1, -1, -2, -7, -1, -1, -1, -1, -1, 63, -1, -1, -3, -1, 1};
  // {...1 0-bits... 11111011 01110101 11111101 11110111 10100110 10111111 11011111 11111111 01111110 11101111 11111111 01011111 11111110 10111111 10101010 11111111 1}
  public static final byte[] GRPSPLIT15 = new byte[] {-33, -82, -65, -17, 101, -3, -5, -1, 126, -9, -1, -6, 127, -3, 85, -1, 1};
  // {01000000 10000100 10100010 00110110}
  public static final byte[] GRPSPLIT16 = new byte[] {2, 33, 69, 108};
  // {01001101 01010011 11011110 11111000}
  public static final byte[] GRPSPLIT17 = new byte[] {-78, -54, 123, 31};
  // {...1 0-bits... 11111111 11111111 11111111 11111101 11111110 11111111 11111111 10111111 01111111 11101111 11111111 11111011 11111111 11111111 01101111 11101111 1}
  public static final byte[] GRPSPLIT18 = new byte[] {-1, -1, -1, -65, 127, -1, -1, -3, -2, -9, -1, -33, -1, -1, -10, -9, 1};
  // {11111111 11111111 11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 10111111 11111111 11110111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT19 = new byte[] {-1, -1, -1, -1, -9, -1, -1, -1, -1, -1, -3, -1, -17, -1, -1, -1, 31};
  // {10110111 11101111 10001100 00110110}
  public static final byte[] GRPSPLIT20 = new byte[] {-19, -9, 49, 108};
  // {00000000 11101001 10001100 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {0, -105, 49, 0};
  // {11111111 00100110 01011000 10110000}
  public static final byte[] GRPSPLIT22 = new byte[] {-1, 100, 26, 13};
  // {11110011 11011111 11111011 11111110}
  public static final byte[] GRPSPLIT23 = new byte[] {-49, -5, -33, 127};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_12 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_12_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_12_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* TaxiOut */] < 12.5f ? 
         (data[7 /* AirTime */] < 326.5f ? 
             (data[4 /* CRSDepTime */] < 1106.5f ? 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT0, 129, 1, data[8])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(133, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT1, 133, 0, data[9])) ? 
                        -0.087645546f : 
                        -0.0023213152f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                        -0.051409613f : 
                        0.00993847f)) : 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT4, 129, 1, data[8])) ? 
                        -0.07477864f : 
                        -0.0137869455f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT5, 129, 1, data[8])) ? 
                        -0.0072439983f : 
                        0.052291498f))) : 
             (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT7, 133, 0, data[9])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT8, 133, 0, data[9])) ? 
                        0.068212375f : 
                        0.12231888f) : 
                     (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 9.5f ? 
                        0.12521933f : 
                        0.1481625f)) : 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(129, 1, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT9, 129, 1, data[8])) ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(129, 1, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT10, 129, 1, data[8])) ? 
                        0.13079047f : 
                        0.13545202f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                        0.14007774f : 
                        0.147715f)))) : 
         (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[0])) ? 
             (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 24.5f ? 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT14, 132, 0, data[8])) ? 
                        -0.04049644f : 
                        0.022909408f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT15, 132, 0, data[8])) ? 
                        -0.010860986f : 
                        0.022004137f)) : 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT16, 134, 0, data[9])) ? 
                     (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 32.5f ? 
                        -0.02235102f : 
                        0.06872143f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT17, 132, 0, data[8])) ? 
                        -0.0028792804f : 
                        0.09238267f))) : 
             (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT18, 132, 0, data[8])) ? 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[0])) ? 
                        -0.16289358f : 
                        -0.08002437f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT21, 134, 0, data[9])) ? 
                        -0.1939303f : 
                        0.0270027f)) : 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[0])) ? 
                        -0.010299208f : 
                        0.055644453f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT24, 134, 0, data[9])) ? 
                        -0.0050017624f : 
                        0.07226031f)))));
    return pred;
  } // constant pool size = 446B, number of visited nodes = 31, static init size = 1920B
  // {...1 0-bits... 10000110 00001000 11100010 10000110 00000000 00000000 11000000 00000100 00000101 10000000 00000000 01100000 01111101 11000010 00010001 00010100 1}
  public static final byte[] GRPSPLIT0 = new byte[] {97, 16, 71, 97, 0, 0, 3, 32, -96, 1, 0, 6, -66, 67, -120, 40, 1};
  // {00000011 10101100 01000000 00010000 00010100 00000000 00000000 00000010 00000000 00000100 00000100 00001000 00000000 00000000 00000000 01000000 00010}
  public static final byte[] GRPSPLIT1 = new byte[] {-64, 53, 2, 8, 40, 0, 0, 64, 0, 32, 32, 16, 0, 0, 0, 2, 8};
  // {01001100 11001011 01100010 11011100}
  public static final byte[] GRPSPLIT2 = new byte[] {50, -45, 70, 59};
  // {01000000 00011000 00000010 01100000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 24, 64, 6};
  // {...1 0-bits... 11111110 11111001 01111100 11101101 10111011 01110011 11011011 11110011 01111011 11100011 01101010 10111110 10011011 10101110 10101111 11111111 1}
  public static final byte[] GRPSPLIT4 = new byte[] {127, -97, 62, -73, -35, -50, -37, -49, -34, -57, 86, 125, -39, 117, -11, -1, 1};
  // {...1 0-bits... 11011101 11111011 00011110 10011010 11001110 11111110 10011001 01111111 11011011 11101011 10111111 11111010 10010111 11111111 01011001 11111011 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-69, -33, 120, 89, 115, 127, -103, -2, -37, -41, -3, 95, -23, -1, -102, -33, 1};
  // {00000000 01101000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 22, 0, 0};
  // {10010010 00100111 01000000 01000000 01010000 00000000 00000000 00000000 00010000 00000000 00000000 10000000 00001000 10000000 11000100 00000100 00000}
  public static final byte[] GRPSPLIT7 = new byte[] {73, -28, 2, 2, 10, 0, 0, 0, 8, 0, 0, 1, 16, 1, 35, 32, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 11111111 11101011 11111101 11111111 11111}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -41, -65, -1, 31};
  // {...1 0-bits... 00000010 00000000 01000000 00000000 11000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00110001 00000000 0}
  public static final byte[] GRPSPLIT9 = new byte[] {64, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, -116, 0, 0};
  // {...1 0-bits... 10000100 00000000 00000001 00001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 0}
  public static final byte[] GRPSPLIT10 = new byte[] {33, 0, -128, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0};
  // {01111110 01101000 01111101 11100110}
  public static final byte[] GRPSPLIT11 = new byte[] {126, 22, -66, 103};
  // {10000000 11100100 00001100 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {1, 39, 48, 0};
  // {01111111 11011100 00100111 01111110}
  public static final byte[] GRPSPLIT13 = new byte[] {-2, 59, -28, 126};
  // {11010001 01100000 11000100 01001000 00011001 00111001 10000000 00100100 10101010 10000100 01110101 00010110 00011001 11110001 00010110 00110000 0000}
  public static final byte[] GRPSPLIT14 = new byte[] {-117, 6, 35, 18, -104, -100, 1, 36, 85, 33, -82, 104, -104, -113, 104, 12, 0};
  // {01011101 11101001 11111110 01110011 00010001 11100001 11100111 10111011 11011100 11111000 11000110 00101011 11100001 00110101 00000001 01111110 1101}
  public static final byte[] GRPSPLIT15 = new byte[] {-70, -105, 127, -50, -120, -121, -25, -35, 59, 31, 99, -44, -121, -84, -128, 126, 11};
  // {10101101 11011011 01111111 11111111 10101111 11111101 11110111 11111111 11101111 11110111 10111011 11111111 10110011 10111100 10111011 01111111 111111}
  public static final byte[] GRPSPLIT16 = new byte[] {-75, -37, -2, -1, -11, -65, -17, -1, -9, -17, -35, -1, -51, 61, -35, -2, 63};
  // {11111111 11111111 11111111 11111111 11010011 01111111 11111111 11111101 11111111 01110111 11111111 11111111 11111111 11111111 11110101 11111111 1111}
  public static final byte[] GRPSPLIT17 = new byte[] {-1, -1, -1, -1, -53, -2, -1, -65, -1, -18, -1, -1, -1, -1, -81, -1, 15};
  // {11111111 10101011 10111110 11111111 11110111 11001111 11111100 01111111 11111011 11110111 01111111 11111101 11111101 11011111 11110111 11111111 1111}
  public static final byte[] GRPSPLIT18 = new byte[] {-1, -43, 125, -1, -17, -13, 63, -2, -33, -17, -2, -65, -65, -5, -17, -1, 15};
  // {10001101 11111111 11100010 01100010}
  public static final byte[] GRPSPLIT19 = new byte[] {-79, -1, 71, 70};
  // {11111111 11111011 11111100 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {-1, -33, 63, 0};
  // {10111111 11111111 11111111 11101111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 10101111 11011110 01111111 11111011 111111}
  public static final byte[] GRPSPLIT21 = new byte[] {-3, -1, -1, -9, -1, -1, -1, -65, -1, -1, -1, -1, -11, 123, -2, -33, 63};
  // {01111101 00010111 11010010 01110000}
  public static final byte[] GRPSPLIT22 = new byte[] {-66, -24, 75, 14};
  // {11111111 11011011 11111100 00000000}
  public static final byte[] GRPSPLIT23 = new byte[] {-1, -37, 63, 0};
  // {10111111 11110101 11101111 11111111 11111011 11111101 11111111 11111101 11111111 11111111 11111011 11011111 10111111 11111111 10111111 11111111 111011}
  public static final byte[] GRPSPLIT24 = new byte[] {-3, -81, -9, -1, -33, -65, -1, -65, -1, -1, -33, -5, -3, -1, -3, -1, 55};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_13 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_13_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_13_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[9])) ? 
             (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT2, 132, 0, data[8])) ? 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (Double.isNaN(data[7]) || data[7 /* AirTime */] < 127.5f ? 
                        -0.06270355f : 
                        -0.10982785f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT4, 132, 0, data[8])) ? 
                        -0.111020535f : 
                        -0.024939016f)) : 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                     (data[7 /* AirTime */] < 62.5f ? 
                        -0.0822766f : 
                        -0.024143524f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT6, 134, 0, data[9])) ? 
                        -0.05554877f : 
                        0.03772407f))) : 
             (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT7, 132, 0, data[8])) ? 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT9, 132, 0, data[8])) ? 
                        -0.07128613f : 
                        -0.018572353f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT10, 132, 0, data[8])) ? 
                        -0.029940622f : 
                        0.011699237f)) : 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT11, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[0])) ? 
                        -0.046042286f : 
                        0.027669726f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT13, 134, 0, data[9])) ? 
                        0.050644636f : 
                        0.15417144f)))) : 
         (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
             (data[12 /* TaxiOut */] < 16.5f ? 
                 (data[7 /* AirTime */] < 226.5f ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT15, 129, 1, data[8])) ? 
                        -0.06687951f : 
                        -0.013940624f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT16, 129, 1, data[8])) ? 
                        -0.0026824279f : 
                        0.091709524f)) : 
                 (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT18, 132, 0, data[8])) ? 
                        -0.006621123f : 
                        0.06294852f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[8])) ? 
                        0.024562951f : 
                        0.084295f))) : 
             (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT20, 132, 0, data[8])) ? 
                 (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT21, 134, 0, data[9])) ? 
                     (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[0])) ? 
                        -0.029479096f : 
                        0.03320026f) : 
                     (data[5 /* CRSArrTime */] < 1032.5f ? 
                        -0.0070712306f : 
                        0.073288955f)) : 
                 (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT23, 134, 0, data[9])) ? 
                     (data[5 /* CRSArrTime */] < 1032.5f ? 
                        -8.724111E-4f : 
                        0.056359358f) : 
                     (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[0])) ? 
                        0.084386505f : 
                        0.13400826f)))));
    return pred;
  } // constant pool size = 459B, number of visited nodes = 31, static init size = 1998B
  // {11110001 11101100 01100100 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-113, 55, 38, 0};
  // {00000101 11111110 00100011 10110011 01001111 11111011 10100110 10101111 00100111 10110101 10010111 01000001 11110111 11000111 00011110 11100111 011011}
  public static final byte[] GRPSPLIT1 = new byte[] {-96, 127, -60, -51, -14, -33, 101, -11, -28, -83, -23, -126, -17, -29, 120, -25, 54};
  // {00010010 01000000 00100000 01100001 01001000 00100101 00000111 00001110 01000000 00001100 00001000 10011001 10000000 10100100 01000110 00000010 0100}
  public static final byte[] GRPSPLIT2 = new byte[] {72, 2, 4, -122, 18, -92, -32, 112, 2, 48, 16, -103, 1, 37, 98, 64, 2};
  // {01101001 10100111 00001011 10110010}
  public static final byte[] GRPSPLIT3 = new byte[] {-106, -27, -48, 77};
  // {11111111 11110101 11111111 11111111 01111101 11101111 11110111 11011111 11111110 11111101 10111110 11111111 11011101 11111111 11111111 01111111 1111}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -81, -1, -1, -66, -9, -17, -5, 127, -65, 125, -1, -69, -1, -1, -2, 15};
  // {01011011 11010100 00000010 01000010}
  public static final byte[] GRPSPLIT5 = new byte[] {-38, 43, 64, 66};
  // {01011101 11111111 01111111 11110111 11101111 11111111 11111111 10111111 11111111 11111101 11011111 01000111 11111111 11110111 11011110 11101111 111011}
  public static final byte[] GRPSPLIT6 = new byte[] {-70, -1, -2, -17, -9, -1, -1, -3, -1, -65, -5, -30, -1, -17, 123, -9, 55};
  // {01011010 01000010 11000000 01001010 10010010 00000000 01100010 00000110 10000011 01000000 01010000 00010011 00000000 00100000 00000110 00001000 0000}
  public static final byte[] GRPSPLIT7 = new byte[] {90, 66, 3, 82, 73, 0, 70, 96, -63, 2, 10, -56, 0, 4, 96, 16, 0};
  // {01100110 11111100 10000011 10110010}
  public static final byte[] GRPSPLIT8 = new byte[] {102, 63, -63, 77};
  // {00000000 00000100 00100011 10000001 01101000 10101000 00000001 00000000 00000000 00000110 00000000 01000100 10111000 01000000 00000000 10000100 1000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 32, -60, -127, 22, 21, -128, 0, 0, 96, 0, 34, 29, 2, 0, 33, 1};
  // {00100000 10010001 00110011 10000100 00101000 10010000 00001000 00000000 00000000 00101000 00000000 01100000 10100010 00000000 01000000 00000000 0000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, -119, -52, 33, 20, 9, 16, 0, 0, 20, 0, 6, 69, 0, 2, 0, 0};
  // {01000000 00000000 00000000 00000000 00010000 00000000 01000000 00000110 10000000 00000000 01010000 00000000 00000000 00000000 00000100 00001000 0000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0, 8, 0, 2, 96, 1, 0, 10, 0, 0, 0, 32, 16, 0};
  // {11110111 11111111 01111100 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-17, -1, 62, 0};
  // {11111111 11111001 11011111 11001110 10111011 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11101011 11111111 11111101 11011111 111101}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, -97, -5, 115, -35, -5, -1, -1, -1, -1, -1, -1, -41, -1, -65, -5, 47};
  // {00000000 00010000 00100010 01110000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 8, 68, 14};
  // {...1 0-bits... 11111011 01011001 11111100 01110110 11111110 11110111 11011011 11111011 11111101 11101111 00101111 11111101 11001111 10011100 10001011 10111111 0}
  public static final byte[] GRPSPLIT15 = new byte[] {-33, -102, 63, 110, 127, -17, -37, -33, -65, -9, -12, -65, -13, 57, -47, -3, 0};
  // {...1 0-bits... 11111111 11111101 11011100 11111111 11111110 11111111 11111111 11111111 11111111 11111111 10111111 11111101 11111111 10111110 01111111 11111111 1}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, -65, 59, -1, 127, -1, -1, -1, -1, -1, -3, -65, -1, 125, -2, -1, 1};
  // {10000000 11100100 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 39, 0, 0};
  // {11010010 00100001 01000100 01000100 00010001 00100001 10000000 00100000 00001010 10000000 11100101 00100001 00100001 10010001 00010110 00100000 0001}
  public static final byte[] GRPSPLIT18 = new byte[] {75, -124, 34, 34, -120, -124, 1, 4, 80, 1, -89, -124, -124, -119, 104, 4, 8};
  // {11111101 11111110 11111110 11111011 11111111 11111111 11111111 11111101 11111111 11101111 01111111 11101111 11101111 11011111 11011101 11111111 1111}
  public static final byte[] GRPSPLIT19 = new byte[] {-65, 127, 127, -33, -1, -1, -1, -65, -1, -9, -2, -9, -9, -5, -69, -1, 15};
  // {01111111 11101111 10010100 11111110 01101011 11111100 11110110 10111000 11001111 01111010 01001000 01010100 10000001 00011111 10000000 01111110 1111}
  public static final byte[] GRPSPLIT20 = new byte[] {-2, -9, 41, 127, -42, 63, 111, 29, -13, 94, 18, 42, -127, -8, 1, 126, 15};
  // {01011001 00100000 00100000 11010001 00010100 00100000 00100000 00000110 00001001 00010000 00000000 11011110 00000100 10001000 10011011 01100000 101000}
  public static final byte[] GRPSPLIT21 = new byte[] {-102, 4, 4, -117, 40, 4, 4, 96, -112, 8, 0, 123, 32, 17, -39, 6, 5};
  // {10010000 00101100 01000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {9, 52, 2, 0};
  // {10101110 11100000 11011111 11001110 10111111 11011011 11111010 00011011 11100110 11111010 01110011 11000111 11000011 11001111 01111001 10101011 010111}
  public static final byte[] GRPSPLIT23 = new byte[] {117, 7, -5, 115, -3, -37, 95, -40, 103, 95, -50, -29, -61, -13, -98, -43, 58};
  // {11011111 11111111 11011000 00000000}
  public static final byte[] GRPSPLIT24 = new byte[] {-5, -1, 27, 0};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_14 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_14_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_14_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 20.5f ? 
         (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
             (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[9])) ? 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT3, 132, 0, data[8])) ? 
                        -0.14128183f : 
                        -0.07526845f) : 
                     (Double.isNaN(data[6]) || data[6 /* FlightNum */] < 618.5f ? 
                        -0.04611017f : 
                        -0.0929077f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT4, 132, 0, data[8])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                        -0.06506232f : 
                        -0.009778034f) : 
                     (data[7 /* AirTime */] < 143.5f ? 
                        -0.022363637f : 
                        0.011886909f))) : 
             (Double.isNaN(data[5]) || data[5 /* CRSArrTime */] < 1650.5f ? 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT6, 134, 0, data[9])) ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT7, 132, 0, data[8])) ? 
                        -0.066238664f : 
                        0.016313352f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT8, 132, 0, data[8])) ? 
                        -0.029645411f : 
                        0.011704311f)) : 
                 (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT9, 134, 0, data[9])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT10, 132, 0, data[8])) ? 
                        -0.016346173f : 
                        0.028151477f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT11, 132, 0, data[8])) ? 
                        0.039621856f : 
                        0.08993323f)))) : 
         (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 33.5f ? 
             (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(129, 1, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT12, 129, 1, data[8])) ? 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT14, 133, 0, data[9])) ? 
                        -0.061429746f : 
                        0.030157484f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT15, 133, 0, data[9])) ? 
                        -0.06459062f : 
                        0.053619564f)) : 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT16, 133, 0, data[9])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                        -0.1675559f : 
                        0.04221498f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                        0.04163188f : 
                        0.10817787f))) : 
             (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT19, 133, 0, data[9])) ? 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(129, 1, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT21, 129, 1, data[8])) ? 
                        -0.13332908f : 
                        0.036387254f) : 
                     (!Double.isNaN(data[3 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 7) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[3])) ? 
                        0.043982748f : 
                        0.13407393f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT23, 129, 1, data[8])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[2])) ? 
                        -0.046327155f : 
                        0.13232882f) : 
                     (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT25, 32, 0, data[0])) ? 
                        0.113382876f : 
                        0.13032119f)))));
    return pred;
  } // constant pool size = 464B, number of visited nodes = 31, static init size = 2028B
  // {11110011 11101100 00101100 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-49, 55, 52, 0};
  // {10101101 11111111 10011111 11110111 11101110 11111011 11111111 10001111 01101111 11111101 11011111 11000111 11111111 11010111 10011111 11110111 111001}
  public static final byte[] GRPSPLIT1 = new byte[] {-75, -1, -7, -17, 119, -33, -1, -15, -10, -65, -5, -29, -1, -21, -7, -17, 39};
  // {10111100 11010101 10011111 11110110}
  public static final byte[] GRPSPLIT2 = new byte[] {61, -85, -7, 111};
  // {00000000 01000000 00010000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 01000001 00000000 00000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 2, 8, 0, 0, 0, 0, 64, 0, 0, 0, -126, 0, 0, 0, 0, 0};
  // {00011110 11000000 11101111 11110010 11011101 00101101 11101111 10011011 10111101 01111001 11011101 11011011 11111001 11110111 01001101 11111111 1111}
  public static final byte[] GRPSPLIT4 = new byte[] {120, 3, -9, 79, -69, -76, -9, -39, -67, -98, -69, -37, -97, -17, -78, -1, 15};
  // {01000001 11000001 00000011 11110010}
  public static final byte[] GRPSPLIT5 = new byte[] {-126, -125, -64, 79};
  // {11110110 11011000 11111111 11011011 10111001 11111001 11100111 10111100 01111010 10111110 11110111 11011111 11111111 01111101 10111111 10111111 101011}
  public static final byte[] GRPSPLIT6 = new byte[] {111, 27, -1, -37, -99, -97, -25, 61, 94, 125, -17, -5, -1, -66, -3, -3, 53};
  // {00000001 00000011 00000011 01000000 01000010 10010000 00000000 00000100 00000100 00001100 00001001 10111000 00001001 00010001 00000000 10000000 0000}
  public static final byte[] GRPSPLIT7 = new byte[] {-128, -64, -64, 2, 66, 9, 0, 32, 32, 48, -112, 29, -112, -120, 0, 1, 0};
  // {11110111 11101101 10111100 11001111 10011101 11111111 01110110 10111111 11101011 11111001 11011100 01100111 11100111 11001110 01010011 01111111 0101}
  public static final byte[] GRPSPLIT8 = new byte[] {-17, -73, 61, -13, -71, -1, 110, -3, -41, -97, 59, -26, -25, 115, -54, -2, 10};
  // {00010001 00110111 11001001 00000001 10001100 00000010 00100000 01000001 01010110 01110101 00001000 01101000 00000100 00100000 00001001 01110000 001100}
  public static final byte[] GRPSPLIT9 = new byte[] {-120, -20, -109, -128, 49, 64, 4, -126, 106, -82, 16, 22, 32, 4, -112, 14, 12};
  // {11101101 11101101 11011111 11101001 11110101 11011111 11010100 00111110 11001111 11110111 01101111 10011101 11001011 00111101 11100111 01110111 0111}
  public static final byte[] GRPSPLIT10 = new byte[] {-73, -73, -5, -105, -81, -5, 43, 124, -13, -17, -10, -71, -45, -68, -25, -18, 14};
  // {10100110 10111111 10111111 11111111 11111111 01101111 01111110 11111100 11111100 01110111 11011111 01011100 01010111 10011111 10111111 01101101 0011}
  public static final byte[] GRPSPLIT11 = new byte[] {101, -3, -3, -1, -1, -10, 126, 63, 63, -18, -5, 58, -22, -7, -3, -74, 12};
  // {...1 0-bits... 11111011 01111101 11111100 11110101 10100110 10011111 11001111 11111011 01111000 11100111 11111111 01001010 11111111 11111110 00100010 11111111 1}
  public static final byte[] GRPSPLIT12 = new byte[] {-33, -66, 63, -81, 101, -7, -13, -33, 30, -25, -1, 82, -1, 127, 68, -1, 1};
  // {01000001 11110111 11110010 01111100}
  public static final byte[] GRPSPLIT13 = new byte[] {-126, -17, 79, 62};
  // {01101111 01011111 01111111 11111111 01101111 11111101 11111111 11011111 11100111 11111011 11111011 01111011 11110101 11101100 01111001 11111011 11011}
  public static final byte[] GRPSPLIT14 = new byte[] {-10, -6, -2, -1, -10, -65, -1, -5, -25, -33, -33, -34, -81, 55, -98, -33, 27};
  // {10101111 11011111 11111111 11111111 10111111 11111111 01111111 11111111 11111111 11111011 10111111 01111111 10111011 10111111 10111111 11101111 11110}
  public static final byte[] GRPSPLIT15 = new byte[] {-11, -5, -1, -1, -3, -1, -2, -1, -1, -33, -3, -2, -35, -3, -3, -9, 15};
  // {10111101 11111110 11111111 11101111 11101111 11111111 11110111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111011 11101011 11101}
  public static final byte[] GRPSPLIT16 = new byte[] {-67, 127, -1, -9, -9, -1, -17, -1, -1, -1, -17, -1, -1, -1, -33, -41, 23};
  // {10110110 01111110 01011111 11111100}
  public static final byte[] GRPSPLIT17 = new byte[] {109, 126, -6, 63};
  // {11111110 11011011 10101111 01110010}
  public static final byte[] GRPSPLIT18 = new byte[] {127, -37, -11, 78};
  // {11111111 11111111 10111111 11111111 11101111 11011111 11111111 11011111 11111111 11111111 10111111 11111111 10111011 11111111 11111011 11111011 11011}
  public static final byte[] GRPSPLIT19 = new byte[] {-1, -1, -3, -1, -9, -5, -1, -5, -1, -1, -3, -1, -35, -1, -33, -33, 27};
  // {10100001 11100111 11101111 10110010}
  public static final byte[] GRPSPLIT20 = new byte[] {-123, -25, -9, 77};
  // {...1 0-bits... 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111010 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT21 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, 95, -1, -1, -1, -1, 1};
  // {10101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {117, 0, 0, 0};
  // {...1 0-bits... 11111111 11111111 11111111 11111100 11111110 11110111 11111111 10111111 11111111 11111111 11111111 11111111 11111111 11111111 01111111 11101111 1}
  public static final byte[] GRPSPLIT23 = new byte[] {-1, -1, -1, 63, 127, -17, -1, -3, -1, -1, -1, -1, -1, -1, -2, -9, 1};
  // {11011110 11111111 11001101 11111110}
  public static final byte[] GRPSPLIT24 = new byte[] {123, -1, -77, 127};
  // {00000000 00101101 10000100 00000000}
  public static final byte[] GRPSPLIT25 = new byte[] {0, -76, 33, 0};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_15 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_15_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_15_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* TaxiOut */] < 11.5f ? 
         (data[7 /* AirTime */] < 294.5f ? 
             (data[5 /* CRSArrTime */] < 1309.5f ? 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(129, 1, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT0, 129, 1, data[8])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(133, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT1, 133, 0, data[9])) ? 
                        -0.07831795f : 
                        0.011784337f) : 
                     (data[7 /* AirTime */] < 60.5f ? 
                        -0.06505988f : 
                        0.003433618f)) : 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                     (Double.isNaN(data[11]) || data[11 /* TaxiIn */] < 13.5f ? 
                        -0.029535677f : 
                        0.093767695f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(133, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT3, 133, 0, data[9])) ? 
                        0.004225029f : 
                        0.062358424f))) : 
             (Double.isNaN(data[10]) || data[10 /* Distance */] < 2168.0f ? 
                 (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 2.5f ? 
                     (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        0.12076992f : 
                        0.13040534f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                        0.08501599f : 
                        0.15479428f)) : 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(126, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT7, 126, 1, data[8])) ? 
                        -0.20410301f : 
                        -0.029406888f) : 
                     (data[11 /* TaxiIn */] < 3.5f ? 
                        0.062718995f : 
                        0.1601071f)))) : 
         (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
             (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT9, 134, 0, data[9])) ? 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[2])) ? 
                     (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 28.5f ? 
                        -0.039529298f : 
                        0.06401418f) : 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                        -0.02769072f : 
                        0.024298241f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[8])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                        -0.03322193f : 
                        0.0037503405f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT14, 134, 0, data[9])) ? 
                        0.013379218f : 
                        0.062269393f))) : 
             (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT15, 132, 0, data[8])) ? 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT17, 132, 0, data[8])) ? 
                        -0.12831499f : 
                        -0.003864468f) : 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                        -0.026233597f : 
                        0.03645043f)) : 
                 (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT19, 134, 0, data[9])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                        0.030446583f : 
                        0.08999761f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[2])) ? 
                        0.030862318f : 
                        0.11059411f)))));
    return pred;
  } // constant pool size = 365B, number of visited nodes = 31, static init size = 1434B
  // {...1 0-bits... 00000011 00011000 11000010 10000000 01000000 00000000 11000000 00000100 00001001 10000000 00000000 01100000 01001100 11000010 00010000 00010100 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-64, 24, 67, 1, 2, 0, 3, 32, -112, 1, 0, 6, 50, 67, 8, 40, 1};
  // {00010001 00101100 01000000 00000000 00010101 00000000 00000000 00000100 00000000 00000100 01000100 00000000 00000000 10000100 10000100 01000000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {-120, 52, 2, 0, -88, 0, 0, 32, 0, 32, 34, 0, 0, 33, 33, 2, 0};
  // {01000000 00011000 00000010 01100000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 24, 64, 6};
  // {00010000 00100100 10110000 01011001 00100100 01000010 00000000 00000011 10000101 00010000 00001100 10001100 11000000 00011101 00001001 01110000 00000}
  public static final byte[] GRPSPLIT3 = new byte[] {8, 36, 13, -102, 36, 66, 0, -64, -95, 8, 48, 49, 3, -72, -112, 14, 0};
  // {00000000 01101000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 22, 0, 0};
  // {11111111 11110111 11110101 10111000}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -17, -81, 29};
  // {01111100 11001001 11101100 01101110}
  public static final byte[] GRPSPLIT6 = new byte[] {62, -109, 55, 118};
  // {...1 0-bits... 00000000 00000010 00000000 00000000 00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 01000000 00000001 00000000 000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 64, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 2, -128, 0, 0};
  // {10010000 11101100 00001100 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {9, 55, 48, 0};
  // {10001100 11011010 00011011 10110111 11101000 10111011 10100101 00001011 01001111 11110101 10011011 01001101 11010111 11000110 00111011 10101101 001101}
  public static final byte[] GRPSPLIT9 = new byte[] {49, 91, -40, -19, 23, -35, -91, -48, -14, -81, -39, -78, -21, 99, -36, -75, 44};
  // {01001110 01100100 00100010 01110110}
  public static final byte[] GRPSPLIT10 = new byte[] {114, 38, 68, 110};
  // {01000011 00010010 00100000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-62, 72, 4, 0};
  // {01011111 11101001 11110111 11111111 11111111 01110001 11100101 10110011 11111110 11011000 11000111 11101011 11100001 00110001 00001111 01110000 1111}
  public static final byte[] GRPSPLIT12 = new byte[] {-6, -105, -17, -1, -1, -114, -89, -51, 127, 27, -29, -41, -121, -116, -16, 14, 15};
  // {01100010 10000001 00000110 01101110}
  public static final byte[] GRPSPLIT13 = new byte[] {70, -127, 96, 118};
  // {00000100 01010010 00000001 00000010 00001000 10010000 10100000 00001010 00001011 00100001 00010010 01000000 00000000 00000000 00001000 00100001 000101}
  public static final byte[] GRPSPLIT14 = new byte[] {32, 74, -128, 64, 16, 9, 5, 80, -48, -124, 72, 2, 0, 0, 16, -124, 40};
  // {01000000 00000000 00100000 10000011 10000010 00000000 00010000 01000101 00000000 11000100 00101001 10101000 00111100 11000011 00000001 00101010 0000}
  public static final byte[] GRPSPLIT15 = new byte[] {2, 0, 4, -63, 65, 0, 8, -94, 0, 35, -108, 21, 60, -61, -128, 84, 0};
  // {11111101 11011111 11100110 01110110}
  public static final byte[] GRPSPLIT16 = new byte[] {-65, -5, 103, 110};
  // {11111111 11101111 11111110 11111111 11111111 11111111 11111111 11111111 10111100 11111111 11111111 11111111 11111111 11111111 11110111 11111111 1101}
  public static final byte[] GRPSPLIT17 = new byte[] {-1, -9, 127, -1, -1, -1, -1, -1, 61, -1, -1, -1, -1, -1, -17, -1, 11};
  // {11111111 11110111 11111100 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {-1, -17, 63, 0};
  // {10111111 11110001 11001111 10111111 11111110 11111111 11111111 11111101 11100111 10111111 01111111 01110111 10111011 11010111 00110000 11001011 111101}
  public static final byte[] GRPSPLIT19 = new byte[] {-3, -113, -13, -3, 127, -1, -1, -65, -25, -3, -2, -18, -35, -21, 12, -45, 47};
  // {01110001 11100110 00110100 01000010}
  public static final byte[] GRPSPLIT20 = new byte[] {-114, 103, 44, 66};
  // {11110011 11110111 00000010 10111110}
  public static final byte[] GRPSPLIT21 = new byte[] {-49, -17, 64, 125};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_16 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_16_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_16_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 23.5f ? 
         (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
             (Double.isNaN(data[11]) || data[11 /* TaxiIn */] < 16.5f ? 
                 (data[11 /* TaxiIn */] < 0.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 7.0f ? 
                        0.1184452f : 
                        0.14385499f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(130, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT1, 130, 0, data[8])) ? 
                        -0.025211288f : 
                        2.0700108E-4f)) : 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(130, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT2, 130, 0, data[8])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                        -0.038378786f : 
                        0.11261883f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                        0.07623088f : 
                        0.18979964f))) : 
             (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT5, 132, 0, data[8])) ? 
                 (!Double.isNaN(data[3 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[3])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                        -0.035986543f : 
                        0.018769355f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT8, 132, 0, data[8])) ? 
                        0.0045576026f : 
                        0.04032614f)) : 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT9, 134, 0, data[9])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[2])) ? 
                        -0.025456974f : 
                        0.04627827f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                        0.028477415f : 
                        0.10801311f)))) : 
         (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[8])) ? 
             (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT13, 134, 0, data[9])) ? 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
                     (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[0])) ? 
                        -0.18890932f : 
                        -0.09246581f) : 
                    0.08693254f) : 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT17, 134, 0, data[9])) ? 
                        -0.09505182f : 
                        0.02571261f) : 
                     (!Double.isNaN(data[3 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 7) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[3])) ? 
                        0.028678749f : 
                        0.12001905f))) : 
             (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 34.5f ? 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(129, 1, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT19, 129, 1, data[8])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                        0.0104609085f : 
                        0.07589033f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT21, 133, 0, data[9])) ? 
                        -0.05168934f : 
                        0.1137145f)) : 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[2])) ? 
                     (data[12 /* TaxiOut */] < 42.5f ? 
                        0.041278638f : 
                        0.1231586f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT23, 133, 0, data[9])) ? 
                        0.11889702f : 
                        0.12706088f)))));
    return pred;
  } // constant pool size = 385B, number of visited nodes = 30, static init size = 1578B
  // {11110001 11101000 00000100 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-113, 23, 32, 0};
  // {01010010 01000000 11110010 01001000 00011100 00101101 01100101 00001110 10000000 00101000 01011000 00011011 00111000 00110100 00001110 00001000 01}
  public static final byte[] GRPSPLIT1 = new byte[] {74, 2, 79, 18, 56, -76, -90, 112, 1, 20, 26, -40, 28, 44, 112, 16, 2};
  // {11111100 10101110 11101110 00111111 11110111 01001111 11101101 11011111 11101100 11110111 11111111 10111100 11111111 11111111 11111111 11111111 11}
  public static final byte[] GRPSPLIT2 = new byte[] {63, 117, 119, -4, -17, -14, -73, -5, 55, -17, -1, 61, -1, -1, -1, -1, 3};
  // {01000100 11001110 11000111 00110000}
  public static final byte[] GRPSPLIT3 = new byte[] {34, 115, -29, 12};
  // {01010011 10111111 01110110 11101110}
  public static final byte[] GRPSPLIT4 = new byte[] {-54, -3, 110, 119};
  // {00000000 01100001 10000100 00100001 00000001 00100001 11010000 10100000 00001110 11000000 00000100 00001000 00000011 00000000 00000101 00110000 0101}
  public static final byte[] GRPSPLIT5 = new byte[] {0, -122, 33, -124, -128, -124, 11, 5, 112, 3, 32, 16, -64, 0, -96, 12, 10};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {30, 0, 0, 0};
  // {10110000 11011000 00100110 01111010}
  public static final byte[] GRPSPLIT7 = new byte[] {13, 27, 100, 94};
  // {10000001 00000000 01010001 11000000 10100000 10000000 00000010 00000000 01000001 00010100 00000000 00110010 10001000 10010011 00000010 00001000 0000}
  public static final byte[] GRPSPLIT8 = new byte[] {-127, 0, -118, 3, 5, 1, 64, 0, -126, 40, 0, 76, 17, -55, 64, 16, 0};
  // {10111110 11111001 11011111 11101110 11011111 11111111 11111011 10111011 11000111 01111110 11111111 01011111 10110111 11110111 11111110 10111011 011111}
  public static final byte[] GRPSPLIT9 = new byte[] {125, -97, -5, 119, -5, -1, -33, -35, -29, 126, -1, -6, -19, -17, 127, -35, 62};
  // {11111111 00010011 11111011 01111010}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -56, -33, 94};
  // {01010011 11111000 01101110 00111100}
  public static final byte[] GRPSPLIT11 = new byte[] {-54, 31, 118, 60};
  // {11111111 10111011 11111111 11111111 11110011 01001111 11111111 11011111 10111111 01111111 11111111 11101101 11111111 11111111 11010101 11110111 1111}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -35, -1, -1, -49, -14, -1, -5, -3, -2, -1, -73, -1, -1, -85, -17, 15};
  // {11101111 11011111 11111111 11111111 10101111 11111111 11111111 11111111 11111111 11111011 10111111 01111111 11110111 11111111 01111111 01111111 111111}
  public static final byte[] GRPSPLIT13 = new byte[] {-9, -5, -1, -1, -11, -1, -1, -1, -1, -33, -3, -2, -17, -1, -2, -2, 63};
  // {11000000 10101000 00000001 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {3, 21, -128, 0};
  // {00000000 00000000 00010000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 0, 8, 0};
  // {01000101 11101111 10111100 00110100}
  public static final byte[] GRPSPLIT16 = new byte[] {-94, -9, 61, 44};
  // {11111111 11111111 11111111 11111111 11111011 11111111 11111111 10111111 11111111 11110111 11111111 11111111 11111011 11111111 11111011 11111011 111111}
  public static final byte[] GRPSPLIT17 = new byte[] {-1, -1, -1, -1, -33, -1, -1, -3, -1, -17, -1, -1, -33, -1, -33, -33, 63};
  // {00101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {116, 0, 0, 0};
  // {...1 0-bits... 11111011 11111101 11011100 11110111 10111111 11111111 11011111 11111011 11111111 11101111 11111111 01111110 11111110 10111111 01111110 11111111 1}
  public static final byte[] GRPSPLIT19 = new byte[] {-33, -65, 59, -17, -3, -1, -5, -33, -1, -9, -1, 126, 127, -3, 126, -1, 1};
  // {01000000 01000110 10100010 01110110}
  public static final byte[] GRPSPLIT20 = new byte[] {2, 98, 69, 110};
  // {10111100 11111111 11111111 11111111 11101111 11111111 11110111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT21 = new byte[] {61, -1, -1, -1, -9, -1, -17, -1, -1, -17, -1, -1, -1, -1, -1, -1, 31};
  // {11011110 11100110 01011111 10111010}
  public static final byte[] GRPSPLIT22 = new byte[] {123, 103, -6, 93};
  // {01000010 00100000 10000000 00000000 01010000 00100000 00000000 00100000 00010000 00000100 01100000 10000000 01011100 00010000 11000100 01000000 00001}
  public static final byte[] GRPSPLIT23 = new byte[] {66, 4, 1, 0, 10, 4, 0, 4, 8, 32, 6, 1, 58, 8, 35, 2, 16};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_17 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_17_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_17_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* TaxiOut */] < 11.5f ? 
         (data[7 /* AirTime */] < 234.5f ? 
             (Double.isNaN(data[11]) || data[11 /* TaxiIn */] < 12.5f ? 
                 (data[4 /* CRSDepTime */] < 1154.5f ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT0, 129, 1, data[8])) ? 
                        -0.07241637f : 
                        -0.025519077f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(129, 1, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT1, 129, 1, data[8])) ? 
                        -0.03326684f : 
                        0.012911197f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT2, 129, 1, data[8])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                        -0.16821584f : 
                        -0.0031713985f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                        0.08794314f : 
                        0.18894435f))) : 
             (Double.isNaN(data[10]) || data[10 /* Distance */] < 1728.5f ? 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(126, 1, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(126, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT5, 126, 1, data[8])) ? 
                     (Double.isNaN(data[7]) || data[7 /* AirTime */] < 251.5f ? 
                        0.10230286f : 
                        0.14927794f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                        0.14390655f : 
                        0.18847965f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(126, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT7, 126, 1, data[8])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                        -0.18505663f : 
                        0.11325047f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[2])) ? 
                        -0.060999647f : 
                        0.04695629f)))) : 
         (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
             (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[9])) ? 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[8])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                        -0.1129371f : 
                        -0.008756156f) : 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                        -0.06657424f : 
                        -0.005870872f)) : 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[2])) ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT16, 132, 0, data[8])) ? 
                        -0.024412883f : 
                        0.014799894f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT17, 132, 0, data[8])) ? 
                        0.007196383f : 
                        0.048672907f))) : 
             (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT18, 132, 0, data[8])) ? 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT20, 132, 0, data[8])) ? 
                        -0.06230458f : 
                        0.01106163f) : 
                     (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[0])) ? 
                        0.039956167f : 
                        0.11387359f)) : 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT22, 134, 0, data[9])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[2])) ? 
                        0.014050095f : 
                        0.09127786f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[2])) ? 
                        0.034823343f : 
                        0.07790749f)))));
    return pred;
  } // constant pool size = 405B, number of visited nodes = 31, static init size = 1674B
  // {...1 0-bits... 00000010 00011000 11000000 10000100 00000000 00000001 11000001 00000100 00001101 10010000 00000001 01110000 01111101 10000010 11010001 00010100 1}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 24, 3, 33, 0, -128, -125, 32, -80, 9, -128, 14, -66, 65, -117, 40, 1};
  // {...1 0-bits... 11111010 11111001 00111000 00000100 00111111 01011010 11001011 11111111 01011111 11101011 11111001 10111010 10010111 10101100 11011111 10101010 1}
  public static final byte[] GRPSPLIT1 = new byte[] {95, -97, 28, 32, -4, 90, -45, -1, -6, -41, -97, 93, -23, 53, -5, 85, 1};
  // {...1 0-bits... 11011011 11001111 11111110 01111011 11101111 11011111 11111011 01110111 01011111 01101111 11111111 11111001 10111111 11111110 11111111 11111111 1}
  public static final byte[] GRPSPLIT2 = new byte[] {-37, -13, 127, -34, -9, -5, -33, -18, -6, -10, -1, -97, -3, 127, -1, -1, 1};
  // {00101100 11101011 01111110 10101010}
  public static final byte[] GRPSPLIT3 = new byte[] {52, -41, 126, 85};
  // {00000001 01101011 00010101 00100000}
  public static final byte[] GRPSPLIT4 = new byte[] {-128, -42, -88, 4};
  // {...1 0-bits... 00000000 00101000 00100000 00001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00100000 010000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 20, 4, 16, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 2};
  // {00000000 00000010 10011010 01001000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 64, 89, 18};
  // {...1 0-bits... 11111111 01110111 11111111 01111111 11101110 10111111 11011101 11111111 11111101 11111111 11111111 11111111 11101111 11111111 01111111 111110}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -18, -1, -2, 119, -3, -69, -1, -65, -1, -1, -1, -9, -1, -2, 31};
  // {00001101 01000000 01000100 01000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-80, 2, 34, 2};
  // {01101100 11111111 01101011 01010000}
  public static final byte[] GRPSPLIT9 = new byte[] {54, -1, -42, 10};
  // {10000000 11100100 00001100 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 39, 48, 0};
  // {10111101 11111011 11011011 10110111 11111100 10111011 10100101 11101111 01001111 11111101 10011011 11001111 11111111 11100111 11111111 10111111 101111}
  public static final byte[] GRPSPLIT11 = new byte[] {-67, -33, -37, -19, 63, -35, -91, -9, -14, -65, -39, -13, -1, -25, -1, -3, 61};
  // {11111111 11111110 11101111 11111111 11011111 01011110 11111111 11011101 11111101 11111011 10111111 01111101 11111111 11111111 11011101 11110101 1111}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, 127, -9, -1, -5, 122, -1, -69, -65, -33, -3, -66, -1, -1, -69, -81, 15};
  // {01001110 00001010 10000010 01010110}
  public static final byte[] GRPSPLIT13 = new byte[] {114, 80, 65, 106};
  // {11110110 11111110 01111100 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {111, 127, 62, 0};
  // {01110111 11010000 00000110 01111110}
  public static final byte[] GRPSPLIT15 = new byte[] {-18, 11, 96, 126};
  // {11110011 01110000 01000000 11101001 10011001 00011001 11000000 00100000 10001010 10000000 01100111 00010111 10001001 10010000 00010110 00100000 0000}
  public static final byte[] GRPSPLIT16 = new byte[] {-49, 14, 2, -105, -103, -104, 3, 4, 81, 1, -26, -24, -111, 9, 104, 4, 0};
  // {01010001 10100000 10100110 00100000 00010001 00100000 11000101 00101010 10001000 01001000 11000110 10100001 01100001 01010101 01000000 00110100 0101}
  public static final byte[] GRPSPLIT17 = new byte[] {-118, 5, 101, 4, -120, 4, -93, 84, 17, 18, 99, -123, -122, -86, 2, 44, 10};
  // {01000000 00000000 00110000 11000010 00000010 00000000 00000000 01000101 00000000 01000000 00001001 10101001 10011100 11000010 11110001 10001000 0100}
  public static final byte[] GRPSPLIT18 = new byte[] {2, 0, 12, 67, 64, 0, 0, -94, 0, 2, -112, -107, 57, 67, -113, 17, 2};
  // {00001001 00000110 11000000 01110000}
  public static final byte[] GRPSPLIT19 = new byte[] {-112, 96, 3, 14};
  // {11111111 10101011 10111110 11111111 11111111 11111111 11111110 01111111 11101111 11110111 11111111 11111101 11111111 11111111 11110111 11111111 1111}
  public static final byte[] GRPSPLIT20 = new byte[] {-1, -43, 125, -1, -1, -1, 127, -2, -9, -17, -1, -65, -1, -1, -17, -1, 15};
  // {00000000 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {0, 4, 0, 0};
  // {11111110 11110001 11001111 10111111 11111111 11111101 11111111 11111111 11101111 10110111 11111011 01110111 10111111 01111111 10111010 10001111 111001}
  public static final byte[] GRPSPLIT22 = new byte[] {127, -113, -13, -3, -1, -65, -1, -1, -9, -19, -33, -18, -3, -2, 93, -15, 39};
  // {11000001 01000011 00011101 01110010}
  public static final byte[] GRPSPLIT23 = new byte[] {-125, -62, -72, 78};
  // {01111111 01111101 01010011 11110010}
  public static final byte[] GRPSPLIT24 = new byte[] {-2, -66, -54, 79};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_18 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_18_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_18_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 17.5f ? 
         (data[7 /* AirTime */] < 222.5f ? 
             (Double.isNaN(data[11]) || data[11 /* TaxiIn */] < 12.5f ? 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT1, 130, 0, data[8])) ? 
                        -0.06428011f : 
                        -0.018810865f) : 
                     (data[4 /* CRSDepTime */] < 1106.5f ? 
                        -0.029239792f : 
                        0.019761723f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT2, 130, 0, data[8])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                        -0.07122379f : 
                        0.1296405f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(130, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT4, 130, 0, data[8])) ? 
                        0.074127294f : 
                        0.15793855f))) : 
             (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT6, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                        -0.047843862f : 
                        -0.0023177795f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[9])) ? 
                        -0.022415997f : 
                        0.016732423f)) : 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT9, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT10, 132, 0, data[8])) ? 
                        -0.0022553632f : 
                        0.04879406f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT11, 132, 0, data[8])) ? 
                        0.11025256f : 
                        0.17473516f)))) : 
         (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[8])) ? 
             (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 28.5f ? 
                 (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(133, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT13, 133, 0, data[9])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
                        -0.034484804f : 
                        0.018672734f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(112, 9, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT15, 112, 9, data[8])) ? 
                        0.007362005f : 
                        0.09883762f)) : 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT16, 133, 0, data[9])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                        -0.040270843f : 
                        0.08752876f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(112, 9, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT18, 112, 9, data[8])) ? 
                        0.024458209f : 
                        0.09065339f))) : 
             (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT19, 134, 0, data[9])) ? 
                 (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT21, 134, 0, data[9])) ? 
                        -0.10605964f : 
                        0.05783873f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT22, 132, 0, data[8])) ? 
                        0.03952396f : 
                        0.09468522f)) : 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT24, 132, 0, data[8])) ? 
                        -0.030039897f : 
                        0.103466764f) : 
                     (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 26.0f ? 
                        0.13631476f : 
                        0.11049999f)))));
    return pred;
  } // constant pool size = 466B, number of visited nodes = 31, static init size = 2040B
  // {00000000 00110100 00000010 11110000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 44, 64, 15};
  // {01101101 10101000 11101101 10111011 11011101 10101011 11101101 11111001 10111101 11111001 10010110 01111110 01111101 11010110 11000111 11011111 11}
  public static final byte[] GRPSPLIT1 = new byte[] {-74, 21, -73, -35, -69, -43, -73, -97, -67, -97, 105, 126, -66, 107, -29, -5, 3};
  // {11101101 11100111 11111111 00111101 11110101 01001111 11111111 10111111 10101011 10110111 11111111 11111101 11011111 11111111 10110111 01111111 11}
  public static final byte[] GRPSPLIT2 = new byte[] {-73, -25, -1, -68, -81, -14, -1, -3, -43, -19, -1, -65, -5, -1, -19, -2, 3};
  // {00000000 10001011 00000000 11000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, -47, 0, 3};
  // {00000000 10000011 11010011 00000100 10000000 00000100 00001000 00000010 00000001 10000000 00000010 10110000 00001000 01010001 00100100 00001000 01}
  public static final byte[] GRPSPLIT4 = new byte[] {0, -63, -53, 32, 1, 32, 16, 64, -128, 1, 64, 13, 16, -118, 36, 16, 2};
  // {10000000 11100111 11100100 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, -25, 39, 0};
  // {11011110 01111011 11000110 00111111 11110111 11110101 11110111 10111111 11011110 11111100 11000111 11101011 11110001 11111001 11011011 11111000 1101}
  public static final byte[] GRPSPLIT6 = new byte[] {123, -34, 99, -4, -17, -81, -17, -3, 123, 63, -29, -41, -113, -97, -37, 31, 11};
  // {01101010 10001001 10001110 01101110}
  public static final byte[] GRPSPLIT7 = new byte[] {86, -111, 113, 118};
  // {10011101 11111011 10011111 10111111 01111101 11111111 10100111 01101111 00001111 11111101 11111111 11111101 11010110 11101111 11111110 11111111 101101}
  public static final byte[] GRPSPLIT8 = new byte[] {-71, -33, -7, -3, -66, -1, -27, -10, -16, -65, -1, -65, 107, -9, 127, -1, 45};
  // {00000001 00010100 00000000 00000100 01100000 00000000 00000010 00000000 00000001 01000000 00000000 00101000 10100000 10010001 00010000 00000000 0100}
  public static final byte[] GRPSPLIT9 = new byte[] {-128, 40, 0, 32, 6, 0, 64, 0, -128, 2, 0, 20, 5, -119, 8, 0, 2};
  // {10111111 11111111 11111110 11111111 11111111 01111111 11111110 11111101 11111111 11100111 01011111 11111101 11110111 11011111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT10 = new byte[] {-3, -1, 127, -1, -1, -2, 127, -65, -1, -25, -6, -65, -17, -5, -1, -1, 15};
  // {00000000 00010100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00010000 00000000 0000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 0};
  // {11111111 10101100 11111110 01111010 11010011 01001101 11101111 11011111 10111100 11111011 11011111 10110101 11101101 10011111 10010111 01111111 1111}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, 53, 127, 94, -53, -78, -9, -5, 61, -33, -5, -83, -73, -7, -23, -2, 15};
  // {00000000 10000010 00001000 10100010 10101000 00110100 10100100 01001000 00000000 00000000 10001010 00000000 00000000 00001010 00000001 11000000 00000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 65, 16, 69, 21, 44, 37, 18, 0, 0, 81, 0, 0, 80, -128, 3, 0};
  // {01000100 11010110 10000010 11110000}
  public static final byte[] GRPSPLIT14 = new byte[] {34, 107, 65, 15};
  // {...9 0-bits... 01011101 11111111 11111111 10110111 11011111 11011111 11111111 11111101 11111111 10111111 11111111 11111111 11111111 00111111}
  public static final byte[] GRPSPLIT15 = new byte[] {-70, -1, -1, -19, -5, -5, -1, -65, -1, -3, -1, -1, -1, -4};
  // {11111111 11111111 11111111 11011111 11101111 11111111 11111111 11011111 01101111 11111011 10111111 11111111 10111111 11111101 00111011 00111011 11011}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, -1, -1, -5, -9, -1, -1, -5, -10, -33, -3, -1, -3, -65, -36, -36, 27};
  // {00100001 00000110 11101001 10110000}
  public static final byte[] GRPSPLIT17 = new byte[] {-124, 96, -105, 13};
  // {...9 0-bits... 01111111 11111111 11111101 11101110 11111111 11111111 10111111 01111111 11111111 11111111 11111111 11111111 11111111 00101111}
  public static final byte[] GRPSPLIT18 = new byte[] {-2, -1, -65, 119, -1, -1, -3, -2, -1, -1, -1, -1, -1, -12};
  // {01101101 11111000 10111111 11000111 01001111 11011111 11110001 10111111 11110111 11110011 01010011 01101011 11110111 01110111 11111010 11001011 111011}
  public static final byte[] GRPSPLIT19 = new byte[] {-74, 31, -3, -29, -14, -5, -113, -3, -17, -49, -54, -42, -17, -18, 95, -45, 55};
  // {11111111 11111111 01100100 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {-1, -1, 38, 0};
  // {11111101 11111111 10111111 11100111 11101111 11111111 11110111 11111111 11110111 11110111 01110111 11101111 11110111 11111111 11111110 11101111 111111}
  public static final byte[] GRPSPLIT21 = new byte[] {-65, -1, -3, -25, -9, -1, -17, -1, -17, -17, -18, -9, -17, -1, 127, -9, 63};
  // {11111101 11111011 11111111 11111111 00111111 11111011 11110111 11111001 11111111 11110111 11111111 11111110 01111111 01111111 01101011 11111111 1111}
  public static final byte[] GRPSPLIT22 = new byte[] {-65, -33, -1, -1, -4, -33, -17, -97, -1, -17, -1, 127, -2, -2, -42, -1, 15};
  // {01111110 01110110 01001101 10011100}
  public static final byte[] GRPSPLIT23 = new byte[] {126, 110, -78, 57};
  // {11111111 11111111 11111101 10111111 11111111 11111111 11110111 11111111 11111111 11110111 11111111 11111110 11111111 11111111 11101111 11111111 1111}
  public static final byte[] GRPSPLIT24 = new byte[] {-1, -1, -65, -3, -1, -1, -17, -1, -1, -17, -1, 127, -1, -1, -9, -1, 15};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_19 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_19_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_19_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* CRSArrTime */] < 1636.5f ? 
         (data[7 /* AirTime */] < 58.5f ? 
             (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT0, 134, 0, data[9])) ? 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT1, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                        -0.12765646f : 
                        -0.07929477f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                        -0.13044326f : 
                        0.0011962239f)) : 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT4, 132, 0, data[8])) ? 
                     (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 17.5f ? 
                        -0.048998546f : 
                        0.03892674f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                        0.009287566f : 
                        0.10435566f))) : 
             (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT6, 132, 0, data[8])) ? 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT7, 134, 0, data[9])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT8, 132, 0, data[8])) ? 
                        -0.07074133f : 
                        -0.021261754f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[2])) ? 
                        -0.016455632f : 
                        0.01157248f)) : 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT10, 134, 0, data[9])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                        -0.06768444f : 
                        0.028813966f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
                        0.020056726f : 
                        0.05829312f)))) : 
         (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT13, 134, 0, data[9])) ? 
             (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[2])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT16, 134, 0, data[9])) ? 
                        -0.085717015f : 
                        -0.010266584f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT17, 132, 0, data[8])) ? 
                        -0.026577333f : 
                        0.06341915f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT18, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                        -0.022180842f : 
                        0.012311474f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                        0.012163809f : 
                        0.050561443f))) : 
             (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT21, 132, 0, data[8])) ? 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[2])) ? 
                     (Double.isNaN(data[4]) || data[4 /* CRSDepTime */] < 1733.5f ? 
                        -0.1977716f : 
                        -0.027115636f) : 
                     (data[6 /* FlightNum */] < 834.0f ? 
                        -0.14022577f : 
                        0.07285501f)) : 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[2])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT24, 134, 0, data[9])) ? 
                        0.012865051f : 
                        0.11996657f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT25, 132, 0, data[8])) ? 
                        0.07177856f : 
                        0.14305517f)))));
    return pred;
  } // constant pool size = 438B, number of visited nodes = 31, static init size = 1872B
  // {11100111 11011010 11111111 11000011 11111011 11011101 11111111 10111100 11110010 10110011 11111111 11001111 10110111 01010011 10111101 11011111 110011}
  public static final byte[] GRPSPLIT0 = new byte[] {-25, 91, -1, -61, -33, -69, -1, 61, 79, -51, -1, -13, -19, -54, -67, -5, 51};
  // {01000000 00000000 00000000 00000000 10000010 00000010 00000000 00000010 00000001 01000000 00011000 00010000 00001000 00000000 01100010 00000000 0000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0, 65, 64, 0, 64, -128, 2, 24, 8, 16, 0, 70, 0, 0};
  // {11011000 11010010 01000011 11101110}
  public static final byte[] GRPSPLIT2 = new byte[] {27, 75, -62, 119};
  // {10011011 10111110 11111110 01111100}
  public static final byte[] GRPSPLIT3 = new byte[] {-39, 125, 127, 62};
  // {00000001 00000110 00010010 01000010 00010110 00110000 10100011 01000000 01000001 01001000 00001000 01011000 00010000 00110000 00001110 00001010 0000}
  public static final byte[] GRPSPLIT4 = new byte[] {-128, 96, 72, 66, 104, 12, -59, 2, -126, 18, 16, 26, 8, 12, 112, 80, 0};
  // {10010000 00101001 10001111 00110000}
  public static final byte[] GRPSPLIT5 = new byte[] {9, -108, -15, 12};
  // {11010010 01100001 11100000 01001000 00010000 00000001 01000000 00100110 10000000 11000000 11011000 10100000 00101000 11000000 00000001 00000010 0001}
  public static final byte[] GRPSPLIT6 = new byte[] {75, -122, 7, 18, 8, -128, 2, 100, 1, 3, 27, 5, 20, 3, -128, 64, 8};
  // {10111110 11011110 10111111 11111111 10111101 11111011 11001011 10001110 01111111 10111100 01111011 01001111 11111111 10011101 11110011 00100111 101111}
  public static final byte[] GRPSPLIT7 = new byte[] {125, 123, -3, -1, -67, -33, -45, 113, -2, 61, -34, -14, -1, -71, -49, -28, 61};
  // {00000000 00000110 00000010 00000010 01100010 10110000 00000001 00000000 01000001 00001000 00000001 00000010 10000010 00110000 00000000 10000000 0000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 96, 64, 64, 70, 13, -128, 0, -126, 16, -128, 64, 65, 12, 0, 1, 0};
  // {01000100 10001000 00100110 01110000}
  public static final byte[] GRPSPLIT9 = new byte[] {34, 17, 100, 14};
  // {11111111 11111000 11011111 10111110 11111011 11011101 01110111 10111101 10101110 10111110 01110011 11111111 11111111 01111111 10111010 11111111 111101}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, 31, -5, 125, -33, -69, -18, -67, 117, 125, -50, -1, -1, -2, 93, -1, 47};
  // {00101111 10000001 00100000 01100110}
  public static final byte[] GRPSPLIT11 = new byte[] {-12, -127, 4, 102};
  // {01001011 11101010 00000010 00011110}
  public static final byte[] GRPSPLIT12 = new byte[] {-46, 87, 64, 120};
  // {00010001 00110111 10001001 00000011 00001000 00010010 10100000 00100001 01000110 01110001 00000000 01000000 00000000 00100001 00001000 11100000 001000}
  public static final byte[] GRPSPLIT13 = new byte[] {-120, -20, -111, -64, 16, 72, 5, -124, 98, -114, 0, 2, 0, -124, 16, 7, 4};
  // {10110111 11111101 01111100 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-19, -65, 62, 0};
  // {01010011 01011000 00010011 01100100}
  public static final byte[] GRPSPLIT15 = new byte[] {-54, 26, -56, 38};
  // {00100000 00000000 01110000 11100000 00000000 00100100 00000010 01001000 00000001 00000100 00100001 00000100 01000000 00010100 10100000 00000000 000010}
  public static final byte[] GRPSPLIT16 = new byte[] {4, 0, 14, 7, 0, 36, 64, 18, -128, 32, -124, 32, 2, 40, 5, 0, 16};
  // {00000010 10000001 00100101 01000101 00000000 00000110 00001101 00100010 00000000 00100000 00000000 01000010 00010001 00100000 01100000 00000000 0000}
  public static final byte[] GRPSPLIT17 = new byte[] {64, -127, -92, -94, 0, 96, -80, 68, 0, 4, 0, 66, -120, 4, 6, 0, 0};
  // {01000000 11010000 10000010 00100001 01110001 10010101 00010000 00000100 00000111 11001000 00111111 01011001 10001010 10110011 01100110 00110000 0100}
  public static final byte[] GRPSPLIT18 = new byte[] {2, 11, 65, -124, -114, -87, 8, 32, -32, 19, -4, -102, 81, -51, 102, 12, 2};
  // {01101101 01000111 11010011 01111010}
  public static final byte[] GRPSPLIT19 = new byte[] {-74, -30, -53, 94};
  // {11110001 01011000 10000110 11000000}
  public static final byte[] GRPSPLIT20 = new byte[] {-113, 26, 97, 3};
  // {11101111 10111101 10111111 11111111 11111111 10101111 11101101 11111110 11111101 11110111 11111111 11111111 11011101 10111111 11111111 01111111 1111}
  public static final byte[] GRPSPLIT21 = new byte[] {-9, -67, -3, -1, -1, -11, -73, 127, -65, -17, -1, -1, -69, -3, -1, -2, 15};
  // {10000000 00010000 00100000 10100000}
  public static final byte[] GRPSPLIT22 = new byte[] {1, 8, 4, 5};
  // {00101110 00111100 01111010 01111110}
  public static final byte[] GRPSPLIT23 = new byte[] {116, 60, 94, 126};
  // {00000000 00010000 10000001 00000010 00001000 00000000 00000000 00000000 01000010 00100000 00000000 00000000 00000000 00000000 00000000 00100000 000000}
  public static final byte[] GRPSPLIT24 = new byte[] {0, 8, -127, 64, 16, 0, 0, 0, 66, 4, 0, 0, 0, 0, 0, 4, 0};
  // {01000000 00010100 00000001 01000010 00001010 00100001 00000000 11000010 00010100 00000000 00000011 00010000 00000000 00000001 00001000 00001000 0000}
  public static final byte[] GRPSPLIT25 = new byte[] {2, 40, -128, 66, 80, -124, 0, 67, 40, 0, -64, 8, 0, -128, 16, 16, 0};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_20 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_20_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_20_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 20.5f ? 
         (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
             (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[9])) ? 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT2, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT3, 132, 0, data[8])) ? 
                        -0.12014016f : 
                        -0.052533153f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                        -0.06096462f : 
                        0.09423474f)) : 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT6, 132, 0, data[8])) ? 
                        -0.045923866f : 
                        -0.009576787f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT7, 132, 0, data[8])) ? 
                        -0.0069003375f : 
                        0.031179143f))) : 
             (!Double.isNaN(data[3 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 7) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[3])) ? 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT9, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[2])) ? 
                        -0.07693193f : 
                        -0.015842305f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                        -0.023536947f : 
                        0.038602926f)) : 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT13, 134, 0, data[9])) ? 
                        -0.055200685f : 
                        0.005538063f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT14, 134, 0, data[9])) ? 
                        -0.010489886f : 
                        0.03661955f)))) : 
         (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 33.5f ? 
             (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT15, 133, 0, data[9])) ? 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(129, 1, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT17, 129, 1, data[8])) ? 
                        -0.12549612f : 
                        0.025195077f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT18, 129, 1, data[8])) ? 
                        -0.054344874f : 
                        0.04931196f)) : 
                 (data[10 /* Distance */] < 614.5f ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                        0.046838894f : 
                        0.10790461f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                        -0.011498923f : 
                        0.04961478f))) : 
             (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 43.5f ? 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(124, 6, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT22, 124, 6, data[8])) ? 
                        -0.17032395f : 
                        0.048626956f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT23, 133, 0, data[9])) ? 
                        -0.004572903f : 
                        0.11269177f)) : 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(124, 6, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(124, 6, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT24, 124, 6, data[8])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(124, 6, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT25, 124, 6, data[8])) ? 
                        0.016557703f : 
                        0.117203645f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(133, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT26, 133, 0, data[9])) ? 
                        0.12387344f : 
                        0.1409202f)))));
    return pred;
  } // constant pool size = 479B, number of visited nodes = 31, static init size = 2118B
  // {11110011 11101000 00000100 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-49, 23, 32, 0};
  // {10100101 11111111 10111111 11110011 11101111 11111011 11111110 10001111 11100111 10111101 00011101 11000111 11111111 11010111 11011111 11110111 111101}
  public static final byte[] GRPSPLIT1 = new byte[] {-91, -1, -3, -49, -9, -33, 127, -15, -25, -67, -72, -29, -1, -21, -5, -17, 47};
  // {00000000 00000010 00100001 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 00001000 00000000 00100000 10000110 00000010 0000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 64, -124, 0, 0, 0, 0, 64, 0, 0, 0, 16, 0, 4, 97, 64, 0};
  // {00000001 00000101 00010000 10000000 11100000 00000000 00010000 00000100 00000011 01000000 00100000 01000011 10000000 00000000 01000000 00000000 0100}
  public static final byte[] GRPSPLIT3 = new byte[] {-128, -96, 8, 1, 7, 0, 8, 32, -64, 2, 4, -62, 1, 0, 2, 0, 2};
  // {01000011 11011111 01111110 01101000}
  public static final byte[] GRPSPLIT4 = new byte[] {-62, -5, 126, 22};
  // {01000101 00110101 00000011 10110010}
  public static final byte[] GRPSPLIT5 = new byte[] {-94, -84, -64, 77};
  // {00011111 01001101 11111110 01110011 11011101 10101001 11100111 11010111 10111101 01010001 11010111 11011011 11111101 10000111 01001111 11111011 1111}
  public static final byte[] GRPSPLIT6 = new byte[] {-8, -78, 127, -50, -69, -107, -25, -21, -67, -118, -21, -37, -65, -31, -14, -33, 15};
  // {01011000 10000000 01100000 10000000 00010010 00000110 01001100 00001110 10000000 10101010 01011000 01111101 00000010 01110000 00101100 00001000 0000}
  public static final byte[] GRPSPLIT7 = new byte[] {26, 1, 6, 1, 72, 96, 50, 112, 1, 85, 26, -66, 64, 14, 52, 16, 0};
  // {11111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {31, 0, 0, 0};
  // {01111110 11111111 00001100 11111110 01010111 01111111 11110100 10111011 11011110 11100100 11101111 11001101 01100010 01011100 11110011 11100110 1100}
  public static final byte[] GRPSPLIT9 = new byte[] {126, -1, 48, 127, -22, -2, 47, -35, 123, 39, -9, -77, 70, 58, -49, 103, 3};
  // {01110010 11011000 10110111 01110110}
  public static final byte[] GRPSPLIT10 = new byte[] {78, 27, -19, 110};
  // {11110010 10011000 01111011 11101000}
  public static final byte[] GRPSPLIT11 = new byte[] {79, 25, -34, 23};
  // {11111101 11111011 11010100 00111011 10010111 11111101 11110110 10111000 11001111 11110000 01000100 00111111 10001011 11011111 00000111 01111100 1101}
  public static final byte[] GRPSPLIT12 = new byte[] {-65, -33, 43, -36, -23, -65, 111, 29, -13, 15, 34, -4, -47, -5, -32, 62, 11};
  // {11111111 11110000 11111111 11111111 10111110 11011001 11110111 10111111 11111110 10111011 01111011 11111111 01111111 11111110 10111011 11111111 010111}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, 15, -1, -1, 125, -101, -17, -3, 127, -35, -34, -1, -2, 127, -35, -1, 58};
  // {00111111 11111011 11011111 10011111 11111111 11111111 10101010 11111101 01011111 11111110 11111011 01010111 10111111 11111101 11111111 11111011 101111}
  public static final byte[] GRPSPLIT14 = new byte[] {-4, -33, -5, -7, -1, -1, 85, -65, -6, 127, -33, -22, -3, -65, -1, -33, 61};
  // {00101111 01011111 01111111 11111111 10101111 11111111 01110111 11011111 11111111 11111001 10111111 01111011 11111001 10111110 11111011 01101111 11100}
  public static final byte[] GRPSPLIT15 = new byte[] {-12, -6, -2, -1, -11, -1, -18, -5, -1, -97, -3, -34, -97, 125, -33, -10, 7};
  // {11111101 01111101 10110000 01110100}
  public static final byte[] GRPSPLIT16 = new byte[] {-65, -66, 13, 46};
  // {...1 0-bits... 00000100 00000000 10000010 10000000 11110000 00000000 00000000 00000000 00000100 10000000 00010010 10100000 00000101 00100000 01000000 00000000 0}
  public static final byte[] GRPSPLIT17 = new byte[] {32, 0, 65, 1, 15, 0, 0, 0, 32, 1, 72, 5, -96, 4, 2, 0, 0};
  // {...1 0-bits... 11111111 11111111 11111111 11111101 00101110 11011111 11111111 11110111 11111111 11111111 11111111 01001111 11111111 11111110 10111110 11101111 1}
  public static final byte[] GRPSPLIT18 = new byte[] {-1, -1, -1, -65, 116, -5, -1, -17, -1, -1, -1, -14, -1, 127, 125, -9, 1};
  // {10000010 01111001 10000111 00111010}
  public static final byte[] GRPSPLIT19 = new byte[] {65, -98, -31, 92};
  // {01000101 10000110 01010010 11110110}
  public static final byte[] GRPSPLIT20 = new byte[] {-94, 97, 74, 111};
  // {11010110 11101110 01001101 10110010}
  public static final byte[] GRPSPLIT21 = new byte[] {107, 119, -78, 77};
  // {...6 0-bits... 11111111 11111111 10111111 10111111 11011111 11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11101111 11111101 1111}
  public static final byte[] GRPSPLIT22 = new byte[] {-1, -1, -3, -3, -5, -1, -1, -9, -1, -1, -1, -1, -1, -9, -65, 15};
  // {11111111 11111111 11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111 11111111 11111011 11111011 11111}
  public static final byte[] GRPSPLIT23 = new byte[] {-1, -1, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -3, -1, -33, -33, 31};
  // {...6 0-bits... 00000000 00000000 01000001 00001000 00100000 00000000 00000000 10000000 10000000 00000010 00000000 10000000 00000000 00010010 00100000 0000}
  public static final byte[] GRPSPLIT24 = new byte[] {0, 0, -126, 16, 4, 0, 0, 1, 1, 64, 0, 1, 0, 72, 4, 0};
  // {...6 0-bits... 11111111 11111111 11111111 11111011 11111110 11111111 11110111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT25 = new byte[] {-1, -1, -1, -33, 127, -1, -17, -9, -1, -1, -1, -1, -1, -1, -1, 15};
  // {00000000 00000000 00000000 00000000 00110000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 00000100 00000000 00000100 00000000 00000}
  public static final byte[] GRPSPLIT26 = new byte[] {0, 0, 0, 0, 12, 0, 0, 0, 8, 0, 0, 0, 32, 0, 32, 0, 0};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_21 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_21_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_21_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* TaxiIn */] < 10.5f ? 
         (data[12 /* TaxiOut */] < 16.0f ? 
             (data[7 /* AirTime */] < 222.5f ? 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT0, 130, 0, data[8])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(133, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT1, 133, 0, data[9])) ? 
                        -0.05948464f : 
                        -0.014386655f) : 
                     (data[7 /* AirTime */] < 57.5f ? 
                        -0.039124887f : 
                        0.0016439211f)) : 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(130, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT2, 130, 0, data[8])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT3, 130, 0, data[8])) ? 
                        -0.08347107f : 
                        0.0120506305f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(130, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT4, 130, 0, data[8])) ? 
                        0.0814463f : 
                        0.14829987f))) : 
             (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                 (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT6, 134, 0, data[9])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                        -0.020681633f : 
                        0.00773358f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                        0.04335018f : 
                        0.12420708f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT9, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[2])) ? 
                        -0.073011294f : 
                        0.008061644f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                        0.006160523f : 
                        0.03941849f)))) : 
         (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[8])) ? 
             (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                 (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT14, 134, 0, data[9])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT15, 132, 0, data[8])) ? 
                        -0.116075836f : 
                        -0.022146204f) : 
                    0.1827706f) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT16, 132, 0, data[8])) ? 
                    -0.17073146f : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT17, 134, 0, data[9])) ? 
                        -0.06736895f : 
                        0.064126365f))) : 
             (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[8])) ? 
                     (Double.isNaN(data[11]) || data[11 /* TaxiIn */] < 16.5f ? 
                        -0.0485046f : 
                        0.08034561f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                        0.085430734f : 
                        0.19842425f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT21, 132, 0, data[8])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT22, 134, 0, data[9])) ? 
                        0.061635002f : 
                        0.18057837f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT23, 132, 0, data[8])) ? 
                        0.14044087f : 
                        0.1934541f)))));
    return pred;
  } // constant pool size = 446B, number of visited nodes = 29, static init size = 1968B
  // {01001001 00001100 01100000 00101010 01011110 00100000 01101000 01000110 00000101 11101000 00011000 10111010 00101010 11010001 11000111 10001010 00}
  public static final byte[] GRPSPLIT0 = new byte[] {-110, 48, 6, 84, 122, 4, 22, 98, -96, 23, 24, 93, 84, -117, -29, 81, 0};
  // {00010000 10100111 01110000 10000011 00000101 00000000 10000000 00000011 00001001 00010011 00000110 10101010 01010110 10010111 11001101 01100100 00111}
  public static final byte[] GRPSPLIT1 = new byte[] {8, -27, 14, -63, -96, 0, 1, -64, -112, -56, 96, 85, 106, -23, -77, 38, 28};
  // {11111111 11111110 10101110 00111111 11110111 01011111 11101110 11011011 11111110 11110111 11011111 11111100 11110111 11011111 00011111 11011111 11}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 127, 117, -4, -17, -6, 119, -37, 127, -17, -5, 63, -17, -5, -8, -5, 3};
  // {11111111 11111111 11111111 11111111 11110111 01011111 11101110 11011111 11111111 11111111 11011111 11111111 11110111 11111111 00111111 11111111 11}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -1, -17, -6, 119, -5, -1, -1, -5, -1, -17, -1, -4, -1, 3};
  // {00000000 00010100 00000000 00000000 00000000 00000000 00000010 00000010 00000000 00000000 00001000 00000000 00100000 00000000 00011110 00000000 00}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 40, 0, 0, 0, 0, 64, 64, 0, 0, 16, 0, 4, 0, 120, 0, 0};
  // {10010001 11100110 01111100 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-119, 103, 62, 0};
  // {00000000 01000010 00000001 00010000 00000000 00000000 10100000 00000010 00000010 00100001 10011010 01000000 00000000 00000100 00001000 00000001 000001}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 66, -128, 8, 0, 0, 5, 64, 64, -124, 89, 2, 0, 32, 16, -128, 32};
  // {01111110 10000000 00000011 01111110}
  public static final byte[] GRPSPLIT7 = new byte[] {126, 1, -64, 126};
  // {01100100 00001001 11111010 00100110}
  public static final byte[] GRPSPLIT8 = new byte[] {38, -112, 95, 100};
  // {11111111 11101101 11110111 11111111 11110011 11111101 11110111 10011111 11111110 11111110 10111101 11101111 11111101 01011111 11111111 11110100 1101}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -73, -17, -1, -49, -65, -17, -7, 127, 127, -67, -9, -65, -6, -1, 47, 11};
  // {11001010 10110011 01101110 01001010}
  public static final byte[] GRPSPLIT10 = new byte[] {83, -51, 118, 82};
  // {10111001 01111110 00110110 01110100}
  public static final byte[] GRPSPLIT11 = new byte[] {-99, 126, 108, 46};
  // {11101100 10100000 11111110 00111101 10100101 01001111 11101111 10011011 10111011 10110111 11111111 11111101 01001111 11110110 10110111 01111111 1111}
  public static final byte[] GRPSPLIT12 = new byte[] {55, 5, 127, -68, -91, -14, -9, -39, -35, -19, -1, -65, -14, 111, -19, -2, 15};
  // {00000110 10101011 01010010 11110100}
  public static final byte[] GRPSPLIT13 = new byte[] {96, -43, 74, 47};
  // {00000000 00000100 00000000 01010000 01000000 00000000 00000000 00000000 00000000 00000001 00000000 00001000 00000010 00000000 00000010 10010000 000000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 32, 0, 10, 2, 0, 0, 0, 0, -128, 0, 16, 64, 0, 64, 9, 0};
  // {11101111 10101011 11111110 11111101 11111101 01011111 11111111 11011011 11111011 10110111 11111111 11111101 11111111 11110111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT15 = new byte[] {-9, -43, 127, -65, -65, -6, -1, -37, -33, -19, -1, -65, -1, -17, -1, -1, 15};
  // {11111111 11110111 11111111 11111111 11101111 01111111 11111111 10111111 11111111 11111111 11111111 11111111 11001111 11111111 11110111 11111111 1111}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, -17, -1, -1, -9, -2, -1, -3, -1, -1, -1, -1, -13, -1, -17, -1, 15};
  // {11111111 11111010 11111111 11111111 11101111 11111111 11111111 11111011 11100110 11111111 11111111 11111111 11111111 11111111 11111111 11101111 111111}
  public static final byte[] GRPSPLIT17 = new byte[] {-1, 95, -1, -1, -9, -1, -1, -33, 103, -1, -1, -1, -1, -1, -1, -9, 63};
  // {10010000 01011011 11110110 11111000}
  public static final byte[] GRPSPLIT18 = new byte[] {9, -38, 111, 31};
  // {01000000 10000000 00000000 00000000 10100000 00000000 00000000 00000000 00000000 10000000 00000000 00011001 00000100 01110000 00100100 00101000 0100}
  public static final byte[] GRPSPLIT19 = new byte[] {2, 1, 0, 0, 5, 0, 0, 0, 0, 1, 0, -104, 32, 14, 36, 20, 2};
  // {00001001 10100000 00000001 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {-112, 5, -128, 0};
  // {11111111 11111111 10101111 11011111 01011111 11111111 01111111 11111100 11111111 11111111 11110110 11111111 11111011 10001111 01001101 11010111 1111}
  public static final byte[] GRPSPLIT21 = new byte[] {-1, -1, -11, -5, -6, -1, -2, 63, -1, -1, 111, -1, -33, -15, -78, -21, 15};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001001 00000000 00000000 00000000 00000000 00000000 00000010 00000000 001000}
  public static final byte[] GRPSPLIT22 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, -112, 0, 0, 0, 0, 0, 64, 0, 4};
  // {00000000 10000000 00100010 00000000 00000000 00000010 00001000 00000000 00000000 10000000 01100010 00100000 00001000 00000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT23 = new byte[] {0, 1, 68, 0, 0, 64, 16, 0, 0, 1, 70, 4, 16, 0, 0, 0, 0};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_22 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_22_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_22_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* CRSArrTime */] < 1636.5f ? 
         (data[12 /* TaxiOut */] < 14.0f ? 
             (data[7 /* AirTime */] < 130.5f ? 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(130, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT0, 130, 0, data[8])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
                        -0.07494528f : 
                        -0.03245805f) : 
                     (Double.isNaN(data[7]) || data[7 /* AirTime */] < 62.5f ? 
                        -0.03479976f : 
                        0.025016118f)) : 
                 (data[10 /* Distance */] < 961.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* AirTime */] < 140.5f ? 
                        0.087672964f : 
                        0.21149375f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT2, 129, 1, data[8])) ? 
                        -0.08683622f : 
                        -0.0026105118f))) : 
             (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[9])) ? 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT4, 132, 0, data[8])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                        -0.08195408f : 
                        -0.026894925f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                        -0.035959918f : 
                        0.031539835f)) : 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT7, 132, 0, data[8])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                        -0.01442825f : 
                        0.016772758f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT9, 134, 0, data[9])) ? 
                        -0.01172985f : 
                        0.033593092f)))) : 
         (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT10, 134, 0, data[9])) ? 
             (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT11, 132, 0, data[8])) ? 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
                     (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[0])) ? 
                        -0.07082755f : 
                        -0.025477417f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT14, 132, 0, data[8])) ? 
                        -0.0534134f : 
                        0.010865458f)) : 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                        -0.099221304f : 
                        -0.0040170774f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT17, 132, 0, data[8])) ? 
                        0.08336348f : 
                        0.17305611f))) : 
             (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT18, 132, 0, data[8])) ? 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                     (Double.isNaN(data[7]) || data[7 /* AirTime */] < 224.5f ? 
                        -0.030062728f : 
                        0.04890345f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT20, 134, 0, data[9])) ? 
                        -0.0021228476f : 
                        0.046152767f)) : 
                 (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[0])) ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT22, 132, 0, data[8])) ? 
                        0.0014805086f : 
                        0.044233818f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT23, 134, 0, data[9])) ? 
                        0.0413071f : 
                        0.11740485f)))));
    return pred;
  } // constant pool size = 428B, number of visited nodes = 31, static init size = 1812B
  // {01010000 00001111 01100000 00100011 10001110 00000000 01100011 11000011 00000011 11000000 00110000 00100000 00100110 00100000 01001001 10001000 11}
  public static final byte[] GRPSPLIT0 = new byte[] {10, -16, 6, -60, 113, 0, -58, -61, -64, 3, 12, 4, 100, 4, -110, 17, 3};
  // {01011110 01111110 00000011 01110000}
  public static final byte[] GRPSPLIT1 = new byte[] {122, 126, -64, 14};
  // {...1 0-bits... 10000100 00001010 00100011 10001000 10000000 00000010 00000000 00001100 00000010 10000000 00010001 01110011 00000000 10000010 00110000 00000100 1}
  public static final byte[] GRPSPLIT2 = new byte[] {33, 80, -60, 17, 1, 64, 0, 48, 64, 1, -120, -50, 0, 65, 12, 32, 1};
  // {11101111 11011010 00111111 11110111 11111001 11111011 11000111 11001111 00111111 11111100 11111011 11011111 11111111 01011111 10111011 10111111 101011}
  public static final byte[] GRPSPLIT3 = new byte[] {-9, 91, -4, -17, -97, -33, -29, -13, -4, 63, -33, -5, -1, -6, -35, -3, 53};
  // {00000000 00000000 00000000 01000010 01000010 10100000 00000000 01000100 01000000 01000000 00001000 00000011 10000000 00010000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 66, 66, 5, 0, 34, 2, 2, 16, -64, 1, 8, 0, 0, 0};
  // {00011001 01000111 00001100 11100010}
  public static final byte[] GRPSPLIT5 = new byte[] {-104, -30, 48, 71};
  // {00010000 01110110 10010001 00100000}
  public static final byte[] GRPSPLIT6 = new byte[] {8, 110, -119, 4};
  // {01010011 00100001 11110000 11101100 10010010 00000001 11010001 00100010 10010010 00000000 11011001 10101001 00111000 00010001 10000001 00001010 0001}
  public static final byte[] GRPSPLIT7 = new byte[] {-54, -124, 15, 55, 73, -128, -117, 68, 73, 0, -101, -107, 28, -120, -127, 80, 8};
  // {00010110 11000000 00100110 01110000}
  public static final byte[] GRPSPLIT8 = new byte[] {104, 3, 100, 14};
  // {11111110 01111111 11011011 11101111 01101111 11111101 11111111 11111111 11101110 11110011 11110111 11111101 01111111 11100010 11111110 11111101 111101}
  public static final byte[] GRPSPLIT9 = new byte[] {127, -2, -37, -9, -10, -65, -1, -1, 119, -49, -17, -65, -2, 71, 127, -65, 47};
  // {00010101 11110111 11101101 11111011 01001110 10111011 10110010 11110001 01011111 01110101 10011001 11110101 11011111 11100111 11011111 11111011 011001}
  public static final byte[] GRPSPLIT10 = new byte[] {-88, -17, -73, -33, 114, -35, 77, -113, -6, -82, -103, -81, -5, -25, -5, -33, 38};
  // {01000000 01000101 01000001 00000000 00000000 00010010 00100100 00000100 00000010 00000000 00001011 00111000 00001000 01110001 00001100 00000000 1000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, -94, -126, 0, 0, 72, 36, 32, 64, 0, -48, 28, 16, -114, 48, 0, 1};
  // {11100101 00011100 10001011 11000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-89, 56, -47, 3};
  // {00010101 00000011 01000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-88, -64, 2, 0};
  // {11101110 11111101 11101111 10101101 00100101 11111111 01111101 00111110 11101111 11111111 11101111 11111111 11111111 11111111 11111101 11111101 1111}
  public static final byte[] GRPSPLIT14 = new byte[] {119, -65, -9, -75, -92, -1, -66, 124, -9, -1, -9, -1, -1, -1, -65, -65, 15};
  // {11100001 01111010 01000010 01111100}
  public static final byte[] GRPSPLIT15 = new byte[] {-121, 94, 66, 62};
  // {11110001 11111110 11101011 11111100}
  public static final byte[] GRPSPLIT16 = new byte[] {-113, 127, -41, 63};
  // {01000000 01000000 01000001 00000000 00000000 00010010 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00001100 00000000 0000}
  public static final byte[] GRPSPLIT17 = new byte[] {2, 2, -126, 0, 0, 72, 0, 0, 0, 0, -128, 0, 0, 0, 48, 0, 0};
  // {11101100 00101100 10011111 00110011 01010101 10101101 11001110 11111110 11111101 11001001 00111111 11011011 11001011 10100101 11100111 01111101 0111}
  public static final byte[] GRPSPLIT18 = new byte[] {55, 52, -7, -52, -86, -75, 115, 127, -65, -109, -4, -37, -45, -91, -25, -66, 14};
  // {01100101 01110101 00010011 01110010}
  public static final byte[] GRPSPLIT19 = new byte[] {-90, -82, -56, 78};
  // {00000001 00100101 01001000 10000000 00000000 00100000 00000000 00000000 00000010 00110001 10000001 00100100 01010010 10000111 00001010 01000000 000000}
  public static final byte[] GRPSPLIT20 = new byte[] {-128, -92, 18, 1, 0, 4, 0, 0, 64, -116, -127, 36, 74, -31, 80, 2, 0};
  // {10100011 11010000 00011100 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {-59, 11, 56, 0};
  // {11111111 11111111 11101111 11011111 10111111 01111011 11111101 11111001 11111111 11111111 11110111 11111100 01110111 11011111 00011101 11010111 1111}
  public static final byte[] GRPSPLIT22 = new byte[] {-1, -1, -9, -5, -3, -34, -65, -97, -1, -1, -17, 63, -18, -5, -72, -21, 15};
  // {00000000 00100001 00000000 00000000 00000100 00110000 00000000 01000001 01000100 01010100 00000000 00000000 10000000 01000010 00001000 11100000 000000}
  public static final byte[] GRPSPLIT23 = new byte[] {0, -124, 0, 0, 32, 12, 0, -126, 34, 42, 0, 0, 1, 66, 16, 7, 0};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_23 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_23_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_23_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* TaxiIn */] < 16.5f ? 
         (data[12 /* TaxiOut */] < 12.0f ? 
             (data[7 /* AirTime */] < 298.5f ? 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT1, 129, 1, data[8])) ? 
                        -0.05011697f : 
                        -0.014302037f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(129, 1, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT2, 129, 1, data[8])) ? 
                        -0.019775894f : 
                        0.022866424f)) : 
                 (Double.isNaN(data[7]) || data[7 /* AirTime */] < 312.5f ? 
                     (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                        0.10637825f : 
                        0.12182069f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                        -0.1480671f : 
                        0.118418746f))) : 
             (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT6, 132, 0, data[8])) ? 
                     (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 28.5f ? 
                        -0.0057439287f : 
                        0.06344458f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT7, 134, 0, data[9])) ? 
                        -0.01119037f : 
                        0.04746925f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT8, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT9, 134, 0, data[9])) ? 
                        -0.18035613f : 
                        0.012476932f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[2])) ? 
                        -6.9955643E-4f : 
                        0.05570252f)))) : 
         (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT11, 132, 0, data[8])) ? 
             (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[0])) ? 
                 (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT13, 134, 0, data[9])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
                        -0.1295749f : 
                        0.087343805f) : 
                    0.09652784f) : 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT16, 132, 0, data[8])) ? 
                        -0.113195784f : 
                        0.05734243f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT17, 132, 0, data[8])) ? 
                        0.08979698f : 
                        0.17374504f))) : 
             (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                        -0.108591974f : 
                        0.09827959f) : 
                     (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[0])) ? 
                        0.10241044f : 
                        0.1789312f)) : 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT22, 132, 0, data[8])) ? 
                     (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[0])) ? 
                        0.118723005f : 
                        0.1638417f) : 
                     (Double.isNaN(data[10]) || data[10 /* Distance */] < 1111.5f ? 
                        0.1934829f : 
                        0.16292788f)))));
    return pred;
  } // constant pool size = 398B, number of visited nodes = 30, static init size = 1656B
  // {01001000 00111000 00000010 01110000}
  public static final byte[] GRPSPLIT0 = new byte[] {18, 28, 64, 14};
  // {...1 0-bits... 10000110 10011000 01000000 11011000 00001001 01000000 10000000 00000000 00000001 00000000 01100011 00110110 01011001 10000000 01101111 00010101 1}
  public static final byte[] GRPSPLIT1 = new byte[] {97, 25, 2, 27, -112, 2, 1, 0, -128, 0, -58, 108, -102, 1, -10, -88, 1};
  // {...1 0-bits... 10000001 00101010 10000000 10011000 11011000 01001000 01000000 00000100 00000010 11001100 00010000 11110000 00110101 00110011 00011000 01010000 1}
  public static final byte[] GRPSPLIT2 = new byte[] {-127, 84, 1, 25, 27, 18, 2, 32, 64, 51, 8, 15, -84, -52, 24, 10, 1};
  // {00000000 11111100 00000100 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 63, 32, 0};
  // {00111001 00000001 00000101 00001010}
  public static final byte[] GRPSPLIT4 = new byte[] {-100, -128, -96, 80};
  // {10000000 11000000 00001100 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 3, 48, 0};
  // {01010001 11100000 11100110 01101000 00010001 00000001 11000101 00100000 10001000 00001000 11000111 00000001 00100001 00010001 00000000 00110000 0001}
  public static final byte[] GRPSPLIT6 = new byte[] {-118, 7, 103, 22, -120, -128, -93, 4, 17, 16, -29, -128, -124, -120, 0, 12, 8};
  // {00000110 00100000 01010001 01110000 01010100 00000010 00000000 00000000 00001001 00000100 00000000 01000100 01011100 00100000 00000001 01100000 001001}
  public static final byte[] GRPSPLIT7 = new byte[] {96, 4, -118, 14, 42, 64, 0, 0, -112, 32, 0, 34, 58, 4, -128, 6, 36};
  // {10111111 10101011 10101111 11011111 11010111 11001111 01111100 01111101 11101000 11100111 01111111 11111101 11111101 11001111 11110001 11111101 1111}
  public static final byte[] GRPSPLIT8 = new byte[] {-3, -43, -11, -5, -21, -13, 62, -66, 23, -25, -2, -65, -65, -13, -113, -65, 15};
  // {11111110 11111111 11111111 11111111 11111111 11111111 11111110 11111101 11111111 10111111 11111011 11011111 10111111 11111111 00111111 10111111 111111}
  public static final byte[] GRPSPLIT9 = new byte[] {127, -1, -1, -1, -1, -1, 127, -65, -1, -3, -33, -5, -3, -1, -4, -3, 63};
  // {01110011 11111111 11111111 11110010}
  public static final byte[] GRPSPLIT10 = new byte[] {-50, -1, -1, 79};
  // {11111101 10101110 11101110 00111111 11110111 01001111 01101101 11011111 11101110 11110111 11111110 10111111 01011111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT11 = new byte[] {-65, 117, 119, -4, -17, -14, -74, -5, 119, -17, 127, -3, -6, -1, -1, -1, 15};
  // {00000000 10000111 01000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, -31, 2, 0};
  // {00000000 00000001 00010000 00000000 01100000 00000000 00000000 00000000 00001000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 001000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, -128, 8, 0, 6, 0, 0, 0, 16, -128, 0, 0, 0, 0, 0, 0, 4};
  // {00000000 10101000 00000001 00010000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 21, -128, 8};
  // {00110000 11011011 11100100 01101000}
  public static final byte[] GRPSPLIT15 = new byte[] {12, -37, 39, 22};
  // {11111101 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT16 = new byte[] {-65, -1, 127, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, 15};
  // {11111111 11101111 11111110 10111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT17 = new byte[] {-1, -9, 127, -3, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, 15};
  // {11000011 00111110 11100101 10001100}
  public static final byte[] GRPSPLIT18 = new byte[] {-61, 124, -89, 49};
  // {10111110 11111101 10111111 11111111 11011111 11111111 11111111 01111111 11111101 10111111 10111111 11111110 11111111 01111111 00111111 11111101 1111}
  public static final byte[] GRPSPLIT19 = new byte[] {125, -65, -3, -1, -5, -1, -1, -2, -65, -3, -3, 127, -1, -2, -4, -65, 15};
  // {11011011 01111110 11111111 11111110}
  public static final byte[] GRPSPLIT20 = new byte[] {-37, 126, -1, 127};
  // {00000000 01100001 10010000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {0, -122, 9, 0};
  // {00000001 10000110 00000010 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00100000 00010001 00000100 00101001 11000000 10000000 0000}
  public static final byte[] GRPSPLIT22 = new byte[] {-128, 97, 64, 0, 1, 0, 0, 0, 0, 0, 4, -120, 32, -108, 3, 1, 0};
  // {00000000 00110110 01000000 00000000}
  public static final byte[] GRPSPLIT23 = new byte[] {0, 108, 2, 0};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_24 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_24_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_24_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* TaxiIn */] < 10.5f ? 
         (data[12 /* TaxiOut */] < 18.0f ? 
             (data[7 /* AirTime */] < 234.5f ? 
                 (data[4 /* CRSDepTime */] < 1143.5f ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT0, 133, 0, data[9])) ? 
                        -0.07878847f : 
                        -0.023361696f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT1, 130, 0, data[8])) ? 
                        -0.035571642f : 
                        0.0073625557f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT2, 130, 0, data[8])) ? 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                        -0.05122896f : 
                        0.024340792f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT4, 133, 0, data[9])) ? 
                        -0.08934546f : 
                        0.097128265f))) : 
             (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT5, 134, 0, data[9])) ? 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT7, 134, 0, data[9])) ? 
                        -0.05297258f : 
                        0.0065440866f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT8, 132, 0, data[8])) ? 
                        -0.03192208f : 
                        0.015790654f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT9, 132, 0, data[8])) ? 
                     (data[6 /* FlightNum */] < 124.5f ? 
                        -0.08032437f : 
                        -0.01024801f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[2])) ? 
                        0.004434766f : 
                        0.025430776f)))) : 
         (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT11, 132, 0, data[8])) ? 
             (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
                 (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT13, 134, 0, data[9])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT14, 132, 0, data[8])) ? 
                        -0.12626807f : 
                        -0.02817122f) : 
                    0.16273926f) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT15, 132, 0, data[8])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                        -0.10735081f : 
                        0.05118922f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT17, 134, 0, data[9])) ? 
                        0.04558395f : 
                        0.20260963f))) : 
             (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[8])) ? 
                     (Double.isNaN(data[11]) || data[11 /* TaxiIn */] < 22.5f ? 
                        -0.035161477f : 
                        0.112511925f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                        0.06992484f : 
                        0.17937742f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT21, 132, 0, data[8])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[2])) ? 
                        0.038851015f : 
                        0.11166386f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT23, 134, 0, data[9])) ? 
                        0.1327699f : 
                        0.20378168f)))));
    return pred;
  } // constant pool size = 450B, number of visited nodes = 30, static init size = 1968B
  // {10110111 11111111 10111111 10111011 10101111 11001101 11111110 10011100 11100010 10110110 01111111 11001101 10111111 11100111 10111011 01100111 11100}
  public static final byte[] GRPSPLIT0 = new byte[] {-19, -1, -3, -35, -11, -77, 127, 57, 71, 109, -2, -77, -3, -25, -35, -26, 7};
  // {11111111 10111100 10111110 00101011 11011111 10111001 01101101 01111111 11101101 11111001 10111101 11011111 01001011 11010110 11100111 11011111 01}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, 61, 125, -44, -5, -99, -74, -2, -73, -97, -67, -5, -46, 107, -25, -5, 2};
  // {11111111 11111110 10101110 01111111 11110111 11011111 11101110 11011011 11111110 11110111 11011111 11111101 11110111 11011111 00111111 11111111 11}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 127, 117, -2, -17, -5, 119, -37, 127, -17, -5, -65, -17, -5, -4, -1, 3};
  // {00000000 11100111 01100000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, -25, 6, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 11111111 11111111 11111111 11111111 01111111 11111111 11011111 11111}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -9, -1, -1, -1, -1, -2, -1, -5, 31};
  // {10011101 11011010 10001001 10110111 11101101 11111011 10100101 01101011 01011111 11111101 11111011 01101101 11011101 10001100 10111111 01111111 001101}
  public static final byte[] GRPSPLIT5 = new byte[] {-71, 91, -111, -19, -73, -33, -91, -42, -6, -65, -33, -74, -69, 49, -3, -2, 44};
  // {01111111 01111110 00101010 01100110}
  public static final byte[] GRPSPLIT6 = new byte[] {-2, 126, 84, 102};
  // {01100010 00000000 00100100 00000000 00010000 00000000 00000000 10000100 00000000 00000000 00000000 00000000 00100010 00100000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT7 = new byte[] {70, 0, 36, 0, 8, 0, 0, 33, 0, 0, 0, 0, 68, 4, 0, 0, 0};
  // {11111111 11111111 10111100 00111110 10111111 11101110 11100111 11111111 11111100 11111111 11101111 11101101 11111111 11111111 10111011 11111101 1111}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -1, 61, 124, -3, 119, -25, -1, 63, -1, -9, -73, -1, -1, -35, -65, 15};
  // {11011111 11011001 11110111 11111111 11111111 11101101 11110111 10111111 11111111 11111100 11111111 11110011 11100001 01111101 11110111 11111000 1101}
  public static final byte[] GRPSPLIT9 = new byte[] {-5, -101, -17, -1, -1, -73, -17, -3, -1, 63, -1, -49, -121, -66, -17, 31, 11};
  // {01110111 11010000 11000110 01111100}
  public static final byte[] GRPSPLIT10 = new byte[] {-18, 11, 99, 62};
  // {11101100 10100000 11111110 00111101 10100101 01001111 11101111 10011011 10111011 10110111 11111111 11111101 01001111 11110111 10100111 01111111 1111}
  public static final byte[] GRPSPLIT11 = new byte[] {55, 5, 127, -68, -91, -14, -9, -39, -35, -19, -1, -65, -14, -17, -27, -2, 15};
  // {00000111 11101011 11010011 11110100}
  public static final byte[] GRPSPLIT12 = new byte[] {-32, -41, -53, 47};
  // {00000000 00000100 00000000 01010000 01000000 00000000 00000000 00000000 00000000 00001001 00000000 00001000 00000010 00000000 00000010 10010000 000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 32, 0, 10, 2, 0, 0, 0, 0, -112, 0, 16, 64, 0, 64, 9, 0};
  // {00000011 00000011 00000000 11000000 01011000 00010000 00000000 01000000 01000000 00000000 00000000 00000000 10100000 00000000 01001000 10000000 0000}
  public static final byte[] GRPSPLIT14 = new byte[] {-64, -64, 0, 3, 26, 8, 0, 2, 2, 0, 0, 0, 5, 0, 18, 1, 0};
  // {11111111 11110111 11111111 10111111 11101111 01101111 11111111 10111111 10111111 11111111 11111111 11111111 11001111 11111111 11110111 11111111 1111}
  public static final byte[] GRPSPLIT15 = new byte[] {-1, -17, -1, -3, -9, -10, -1, -3, -3, -1, -1, -1, -13, -1, -17, -1, 15};
  // {00000000 10100011 10000000 10110000}
  public static final byte[] GRPSPLIT16 = new byte[] {0, -59, 1, 13};
  // {00000010 10000000 00000000 10000000 00000000 00000000 00000010 00000000 00000000 00000100 00100000 00000000 01000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT17 = new byte[] {64, 1, 0, 1, 0, 0, 64, 0, 0, 32, 4, 0, 2, 0, 0, 0, 0};
  // {10010000 01011011 11100110 11111010}
  public static final byte[] GRPSPLIT18 = new byte[] {9, -38, 103, 95};
  // {01000000 10000000 00000000 00000000 10100000 00000000 00000000 00000000 00000000 10000000 00000000 00011001 00000100 01110000 00100100 00101000 0100}
  public static final byte[] GRPSPLIT19 = new byte[] {2, 1, 0, 0, 5, 0, 0, 0, 0, 1, 0, -104, 32, 14, 36, 20, 2};
  // {00001001 10100000 00000001 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {-112, 5, -128, 0};
  // {11111111 11111111 10101111 11011111 01011111 11111111 01111111 11111100 11111111 11111111 11110110 01111111 11111011 10001111 01011001 11010111 1111}
  public static final byte[] GRPSPLIT21 = new byte[] {-1, -1, -11, -5, -6, -1, -2, 63, -1, -1, 111, -2, -33, -15, -102, -21, 15};
  // {00000000 00001001 00000010 11100010}
  public static final byte[] GRPSPLIT22 = new byte[] {0, -112, 64, 71};
  // {00000000 00100000 00000000 00000001 01000001 00000000 00000000 01000000 00000000 00001000 01000000 00000000 00000100 00000000 00000010 00000000 000000}
  public static final byte[] GRPSPLIT23 = new byte[] {0, 4, 0, -128, -126, 0, 0, 2, 0, 16, 2, 0, 32, 0, 64, 0, 0};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_25 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_25_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_25_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 7) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[3])) ? 
         (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT2, 132, 0, data[8])) ? 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[9])) ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT4, 132, 0, data[8])) ? 
                        -0.088773526f : 
                        0.023857417f) : 
                     (data[7 /* AirTime */] < 62.5f ? 
                        -0.061778046f : 
                        -0.019343521f)) : 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT5, 134, 0, data[9])) ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT6, 132, 0, data[8])) ? 
                        -0.056474734f : 
                        0.03021549f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT7, 134, 0, data[9])) ? 
                        -3.9827608E-4f : 
                        0.05374346f))) : 
             (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT8, 132, 0, data[8])) ? 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT9, 134, 0, data[9])) ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT10, 132, 0, data[8])) ? 
                        -0.083114125f : 
                        -0.0045831134f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[9])) ? 
                        -0.014958735f : 
                        0.024893f)) : 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT12, 134, 0, data[9])) ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[8])) ? 
                        -0.02956208f : 
                        0.02856085f) : 
                     (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                        0.018879773f : 
                        0.05822019f)))) : 
         (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT15, 134, 0, data[9])) ? 
             (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT16, 132, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT18, 132, 0, data[8])) ? 
                        -0.13760336f : 
                        -0.036451418f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                        -0.0603382f : 
                        0.068920106f)) : 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[2])) ? 
                        -0.06645286f : 
                        0.05414338f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT22, 132, 0, data[8])) ? 
                        0.17954747f : 
                        0.21484707f))) : 
             (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT23, 132, 0, data[8])) ? 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[2])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT25, 134, 0, data[9])) ? 
                        -0.045652557f : 
                        0.0358841f) : 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT26, 32, 0, data[0])) ? 
                        -0.012912247f : 
                        0.04087868f)) : 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT27, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT28, 32, 0, data[0])) ? 
                        6.2614E-4f : 
                        0.029094752f) : 
                     (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT29, 32, 0, data[0])) ? 
                        0.02274427f : 
                        0.07738156f)))));
    return pred;
  } // constant pool size = 510B, number of visited nodes = 31, static init size = 2304B
  // {10011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {25, 0, 0, 0};
  // {01110000 00010000 00000011 11110010}
  public static final byte[] GRPSPLIT1 = new byte[] {14, 8, -64, 79};
  // {01010010 10101101 00000010 11101001 00011001 00101001 11000010 00100100 10001000 01001110 11001101 11000010 11000001 00000000 01110111 00011100 0101}
  public static final byte[] GRPSPLIT2 = new byte[] {74, -75, 64, -105, -104, -108, 67, 36, 17, 114, -77, 67, -125, 0, -18, 56, 10};
  // {10111111 11111111 10101111 11100111 01101111 11111001 11110111 11011111 11111111 11110111 10111111 11011111 00111111 11110111 11111110 11101011 010111}
  public static final byte[] GRPSPLIT3 = new byte[] {-3, -1, -11, -25, -10, -97, -17, -5, -1, -17, -3, -5, -4, -17, 127, -41, 58};
  // {00000000 00000000 00100000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 4, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {11011101 11111011 01110111 11111111 00101101 10011111 11111101 00111011 01011111 01111000 10111101 11101101 10111101 11001001 10111111 11111111 111101}
  public static final byte[] GRPSPLIT5 = new byte[] {-69, -33, -18, -1, -76, -7, -65, -36, -6, 30, -67, -73, -67, -109, -3, -1, 47};
  // {00000000 00000001 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00001100 0000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, -128, 0, 0, 0, 0, 64, 0, 0, 32, 0, 0, 0, 0, 0, 48, 0};
  // {01010000 10010010 00000101 00000010 00001000 00000011 10000000 00000000 00010011 00101000 00000001 01000000 00000001 10001001 00001000 00100001 100001}
  public static final byte[] GRPSPLIT7 = new byte[] {10, 73, -96, 64, 16, -64, 1, 0, -56, 20, -128, 2, -128, -111, 16, -124, 33};
  // {10000010 00000001 00101100 01100101 01110101 10010101 01111101 01001110 11101000 00100000 00010011 01011111 00110011 00010001 11010100 10101101 0110}
  public static final byte[] GRPSPLIT8 = new byte[] {65, -128, 52, -90, -82, -87, -66, 114, 23, 4, -56, -6, -52, -120, 43, -75, 6};
  // {00110101 01111111 01111101 11011011 11101011 11111001 10011101 10100101 11100111 10110111 11011111 11010111 11011110 11110111 01111111 01011101 111101}
  public static final byte[] GRPSPLIT9 = new byte[] {-84, -2, -66, -37, -41, -97, -71, -91, -25, -19, -5, -21, 123, -17, -2, -70, 47};
  // {00000000 00000010 01000010 00000000 10000000 00000000 00000010 00000000 00000001 00000000 00101000 00100000 01000000 01000000 00000010 00000000 0000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 64, 66, 0, 1, 0, 64, 0, -128, 0, 20, 4, 2, 2, 64, 0, 0};
  // {00110000 01001100 00001000 10000001 00000000 10110000 00000000 10000000 10000011 00110110 01001110 00000010 01010010 00000111 00001101 00010101 011001}
  public static final byte[] GRPSPLIT11 = new byte[] {12, 50, 16, -127, 0, 13, 0, 1, -63, 108, 114, 64, 74, -32, -80, -88, 38};
  // {10101111 11111101 11011111 11110101 10111111 11110111 11111111 10011011 01101111 11111101 01010111 01100101 11111111 11100111 01111100 11101111 110101}
  public static final byte[] GRPSPLIT12 = new byte[] {-11, -65, -5, -81, -3, -17, -1, -39, -10, -65, -22, -90, -1, -25, 62, -9, 43};
  // {00000000 00000000 00000000 00000000 01000000 00000000 00010000 00000010 00000000 00000000 00000000 00011000 00010010 00000000 11000100 00000000 0000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 0, 0, 0, 2, 0, 8, 64, 0, 0, 0, 24, 72, 0, 35, 0, 0};
  // {11001000 10110010 01101000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {19, 77, 22, 0};
  // {10101100 01100010 10111011 10110111 11001111 10101010 10100010 11101111 01011111 00111101 00011010 11001110 11111101 10111110 11011011 01110011 101011}
  public static final byte[] GRPSPLIT15 = new byte[] {53, 70, -35, -19, -13, 85, 69, -9, -6, -68, 88, 115, -65, 125, -37, -50, 53};
  // {00000011 00000000 00110000 01000000 00101100 00000000 00000000 00100000 00010001 01000000 00001000 10100000 00000000 10010000 00001100 00000000 1100}
  public static final byte[] GRPSPLIT16 = new byte[] {-64, 0, 12, 2, 52, 0, 0, 4, -120, 2, 16, 5, 0, 9, 48, 0, 3};
  // {11010000 00000000 00100000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {11, 0, 4, 0};
  // {11111111 11110111 10111111 11111110 11111111 11001111 11111110 11111111 11111111 11111111 11111110 11110111 11011111 11111110 11111111 11110101 1111}
  public static final byte[] GRPSPLIT18 = new byte[] {-1, -17, -3, 127, -1, -13, 127, -1, -1, -1, 127, -17, -5, 127, -1, -81, 15};
  // {10111111 01011111 10100111 01010110}
  public static final byte[] GRPSPLIT19 = new byte[] {-3, -6, -27, 106};
  // {00100000 00000001 00000001 00110000}
  public static final byte[] GRPSPLIT20 = new byte[] {4, -128, -128, 12};
  // {11101011 11101111 11001011 10111110}
  public static final byte[] GRPSPLIT21 = new byte[] {-41, -9, -45, 125};
  // {00000010 00000000 00000000 01000000 00001100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 0100}
  public static final byte[] GRPSPLIT22 = new byte[] {64, 0, 0, 2, 48, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 2};
  // {11111101 01111000 11110111 10010011 11010101 10011011 11110100 10110111 11101111 11110000 10101101 00111011 10101111 11100111 01000111 01111010 0001}
  public static final byte[] GRPSPLIT23 = new byte[] {-65, 30, -17, -55, -85, -39, 47, -19, -9, 15, -75, -36, -11, -25, -30, 94, 8};
  // {01001100 01101111 10100110 01111000}
  public static final byte[] GRPSPLIT24 = new byte[] {50, -10, 101, 30};
  // {11111111 11011111 01111111 11111111 01111011 11111101 11111111 11111111 11100110 11111011 11111111 11111011 11100011 11111111 01111101 10111111 010101}
  public static final byte[] GRPSPLIT25 = new byte[] {-1, -5, -2, -1, -34, -65, -1, -1, 103, -33, -1, -33, -57, -1, -66, -3, 42};
  // {10001010 11101011 01111000 00000000}
  public static final byte[] GRPSPLIT26 = new byte[] {81, -41, 30, 0};
  // {00001001 11101000 00000000 01001000}
  public static final byte[] GRPSPLIT27 = new byte[] {-112, 23, 0, 18};
  // {10110110 00101100 01101100 00000000}
  public static final byte[] GRPSPLIT28 = new byte[] {109, 52, 54, 0};
  // {01000000 10111010 00000000 00000000}
  public static final byte[] GRPSPLIT29 = new byte[] {2, 93, 0, 0};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_26 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_26_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_26_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 23.5f ? 
         (Double.isNaN(data[5]) || data[5 /* CRSArrTime */] < 1636.5f ? 
             (data[7 /* AirTime */] < 58.5f ? 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT0, 134, 0, data[9])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
                        -0.111505434f : 
                        -0.04848504f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT2, 132, 0, data[8])) ? 
                        -0.028105535f : 
                        0.05784894f)) : 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT3, 132, 0, data[8])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT4, 134, 0, data[9])) ? 
                        -0.018139914f : 
                        0.005377416f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT5, 134, 0, data[9])) ? 
                        -0.034275476f : 
                        0.036018167f))) : 
             (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT6, 134, 0, data[9])) ? 
                 (!Double.isNaN(data[3 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 7) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT8, 132, 0, data[8])) ? 
                        -0.06576087f : 
                        -0.00782727f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT9, 132, 0, data[8])) ? 
                        -3.9888226E-4f : 
                        0.031454135f)) : 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT11, 132, 0, data[8])) ? 
                        -0.111339875f : 
                        0.02732968f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[8])) ? 
                        0.028721053f : 
                        0.10033369f)))) : 
         (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[8])) ? 
             (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT14, 134, 0, data[9])) ? 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[2])) ? 
                     (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 31.5f ? 
                        -0.14244452f : 
                        -0.017843822f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                        0.0017693961f : 
                        0.13353376f)) : 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                     (data[5 /* CRSArrTime */] < 1069.5f ? 
                        0.07602688f : 
                        -0.025941145f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT18, 134, 0, data[9])) ? 
                        0.040260926f : 
                        0.13544276f))) : 
             (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT19, 134, 0, data[9])) ? 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT21, 132, 0, data[8])) ? 
                        -0.032002904f : 
                        0.048663467f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT22, 134, 0, data[9])) ? 
                        -0.012316537f : 
                        0.090492696f)) : 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT24, 134, 0, data[9])) ? 
                        -0.0779547f : 
                        0.10889051f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT25, 134, 0, data[9])) ? 
                        0.104733974f : 
                        0.125211f)))));
    return pred;
  } // constant pool size = 490B, number of visited nodes = 31, static init size = 2184B
  // {11100111 11011010 11111111 11100011 11111011 11011101 11011111 10111100 11110010 10110111 11111111 11001101 10110111 01010111 10111101 11011111 110111}
  public static final byte[] GRPSPLIT0 = new byte[] {-25, 91, -1, -57, -33, -69, -5, 61, 79, -19, -1, -77, -19, -22, -67, -5, 59};
  // {11011010 10010110 01000110 01111100}
  public static final byte[] GRPSPLIT1 = new byte[] {91, 105, 98, 62};
  // {00000001 00000010 00010000 01000010 00000110 00110000 10100011 01000000 01000001 01001000 00000000 00011000 00010000 00110000 00001110 00001010 0000}
  public static final byte[] GRPSPLIT2 = new byte[] {-128, 64, 8, 66, 96, 12, -59, 2, -126, 18, 0, 24, 8, 12, 112, 80, 0};
  // {01010000 01101001 10100000 00001010 00010000 00000001 01000000 00100010 10000000 11000000 11010000 10100000 00101000 11000000 00000001 00000010 0001}
  public static final byte[] GRPSPLIT3 = new byte[] {10, -106, 5, 80, 8, -128, 2, 68, 1, 3, 11, 5, 20, 3, -128, 64, 8};
  // {10111101 11011000 10111111 10111111 10111001 11111011 11001011 00001010 00100111 10111000 01110011 01001011 10100011 10001101 10111011 00110111 101011}
  public static final byte[] GRPSPLIT4 = new byte[] {-67, 27, -3, -3, -99, -33, -45, 80, -28, 29, -50, -46, -59, -79, -35, -20, 53};
  // {11101110 11011110 11111111 10101110 11111111 11011101 11110111 10111101 11101110 11111111 11111111 11111111 11111111 01010111 10111110 11111111 111101}
  public static final byte[] GRPSPLIT5 = new byte[] {119, 123, -1, 117, -1, -69, -17, -67, 119, -1, -1, -1, -1, -22, 125, -1, 47};
  // {00010001 00110111 10001001 00000011 00001100 00010010 10100000 00100001 01000110 01110101 00000000 01000000 00000000 01100111 00001000 11100000 001000}
  public static final byte[] GRPSPLIT6 = new byte[] {-120, -20, -111, -64, 48, 72, 5, -124, 98, -82, 0, 2, 0, -26, 16, 7, 4};
  // {10111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {93, 0, 0, 0};
  // {11101111 11101100 01011111 11101001 11010101 01111111 11101111 00011110 11101111 11111111 01100111 11011010 11001110 11010101 11111111 11111101 1111}
  public static final byte[] GRPSPLIT8 = new byte[] {-9, 55, -6, -105, -85, -2, -9, 120, -9, -1, -26, 91, 115, -85, -1, -65, 15};
  // {01000001 01010000 10100111 00000001 00100001 10010010 10000100 10100101 00010111 11001000 10101111 00011001 00011011 10110011 01100110 00000000 0100}
  public static final byte[] GRPSPLIT9 = new byte[] {-126, 10, -27, -128, -124, 73, 33, -91, -24, 19, -11, -104, -40, -51, 102, 0, 2};
  // {00101100 00110100 01101001 00111100}
  public static final byte[] GRPSPLIT10 = new byte[] {52, 44, -106, 60};
  // {11111111 11111111 11111111 11111111 11111111 10011111 11101101 11111111 11111101 11110111 11111111 11011111 11011101 10111111 11111111 01111111 1111}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, -1, -1, -1, -1, -7, -73, -1, -65, -17, -1, -5, -69, -3, -1, -2, 15};
  // {11100110 10111100 10011111 01111111 01111111 11101111 01101110 11111110 11110100 11111111 11111111 10111111 11111111 11111111 10111111 11111111 1111}
  public static final byte[] GRPSPLIT12 = new byte[] {103, 61, -7, -2, -2, -9, 118, 127, 47, -1, -1, -3, -1, -1, -3, -1, 15};
  // {11111111 10111010 11111110 11111111 11110011 01001111 11111111 11011111 10111111 01111111 11111111 11101101 11111111 11111111 10010101 11110111 1111}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, 93, 127, -1, -49, -14, -1, -5, -3, -2, -1, -73, -1, -1, -87, -17, 15};
  // {11101111 11011111 01111111 11111111 10101111 11111111 11111111 11111111 11101111 11110011 10111111 01111111 10111111 11111101 01111011 01111111 111111}
  public static final byte[] GRPSPLIT14 = new byte[] {-9, -5, -2, -1, -11, -1, -1, -1, -9, -49, -3, -2, -3, -65, -34, -2, 63};
  // {01010001 01101010 11101001 10110000}
  public static final byte[] GRPSPLIT15 = new byte[] {-118, 86, -105, 13};
  // {10111111 10111111 10110111 11111110}
  public static final byte[] GRPSPLIT16 = new byte[] {-3, -3, -19, 127};
  // {11001101 01000111 11001010 00110110}
  public static final byte[] GRPSPLIT17 = new byte[] {-77, -30, 83, 108};
  // {11111111 11111111 11111111 11011111 11011111 11111101 11111111 11111111 01111111 11111111 11111111 11111011 11100011 10111111 11111111 11111111 110111}
  public static final byte[] GRPSPLIT18 = new byte[] {-1, -1, -1, -5, -5, -65, -1, -1, -2, -1, -1, -33, -57, -3, -1, -1, 59};
  // {10110100 11011011 00111111 11111110 11110111 11011101 11110111 10011111 10110111 11110000 11010011 11111011 00100001 11111110 10111101 10111111 110011}
  public static final byte[] GRPSPLIT19 = new byte[] {45, -37, -4, 127, -17, -69, -17, -7, -19, 15, -53, -33, -124, 127, -67, -3, 51};
  // {01000000 10000111 00111110 10111000}
  public static final byte[] GRPSPLIT20 = new byte[] {2, -31, 124, 29};
  // {11111111 11111111 11111111 01111011 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111 11111111 11011111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT21 = new byte[] {-1, -1, -1, -34, -1, -1, -1, -1, -1, -1, -1, -3, -1, -5, -1, -1, 15};
  // {11111111 11111111 11111111 11111111 11111111 11011111 11111111 10111111 11111111 11110011 11110111 11111111 11111111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT22 = new byte[] {-1, -1, -1, -1, -1, -5, -1, -3, -1, -49, -17, -1, -1, -1, -1, -1, 63};
  // {11111111 01111110 00010111 11011110}
  public static final byte[] GRPSPLIT23 = new byte[] {-1, 126, -24, 123};
  // {11111111 11111110 11111111 10011111 11101111 11111111 11111111 11111111 11111111 11111111 10111111 11111111 11111111 11111111 01111111 11111111 111111}
  public static final byte[] GRPSPLIT24 = new byte[] {-1, 127, -1, -7, -9, -1, -1, -1, -1, -1, -3, -1, -1, -1, -2, -1, 63};
  // {00000000 00000001 00000000 01010000 10010100 00000100 00000010 00000100 10000000 00000000 01000000 10000010 00000000 10011000 10000100 00000000 000000}
  public static final byte[] GRPSPLIT25 = new byte[] {0, -128, 0, 10, 41, 32, 64, 32, 1, 0, 2, 65, 0, 25, 33, 0, 0};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_27 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_27_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_27_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* TaxiIn */] < 16.5f ? 
         (data[12 /* TaxiOut */] < 12.0f ? 
             (data[7 /* AirTime */] < 294.5f ? 
                 (data[4 /* CRSDepTime */] < 1106.5f ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(129, 1, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT0, 129, 1, data[8])) ? 
                        -0.056283288f : 
                        -0.010775463f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(133, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT1, 133, 0, data[9])) ? 
                        -0.01394138f : 
                        0.03497336f)) : 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT2, 133, 0, data[9])) ? 
                    -0.053921208f : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(129, 1, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT3, 129, 1, data[8])) ? 
                        0.0966988f : 
                        0.12362565f))) : 
             (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT5, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT6, 134, 0, data[9])) ? 
                        -0.026534f : 
                        0.004739693f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT7, 134, 0, data[9])) ? 
                        -0.0060058665f : 
                        0.024202574f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT8, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT9, 134, 0, data[9])) ? 
                        -0.18595335f : 
                        -0.04646313f) : 
                     (!Double.isNaN(data[3 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 7) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[3])) ? 
                        0.005756951f : 
                        0.04493095f)))) : 
         (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT11, 132, 0, data[8])) ? 
             (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[0])) ? 
                 (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT13, 134, 0, data[9])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
                        -0.12554125f : 
                        0.080858976f) : 
                    0.09076329f) : 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT16, 134, 0, data[9])) ? 
                        -0.16644213f : 
                        0.048771895f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT17, 132, 0, data[8])) ? 
                        0.05590309f : 
                        0.15705973f))) : 
             (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT19, 134, 0, data[9])) ? 
                    6.925432E-4f : 
                     (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[0])) ? 
                        0.10003678f : 
                        0.15870136f)) : 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT21, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[2])) ? 
                        0.1202133f : 
                        0.14752418f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT23, 132, 0, data[8])) ? 
                        0.15972123f : 
                        0.18434186f)))));
    return pred;
  } // constant pool size = 442B, number of visited nodes = 28, static init size = 1968B
  // {...1 0-bits... 00000010 00011000 11000011 10000100 01000100 00000001 11000000 00000100 00100101 10010000 00000000 01100000 01111001 00000010 00010000 00010001 1}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 24, -61, 33, 34, -128, 3, 32, -92, 9, 0, 6, -98, 64, 8, -120, 1};
  // {00010000 00100110 00110000 01010001 01000101 01000010 00000011 00000011 10000100 00010001 00001000 00000000 11000000 00001111 11001001 01110000 00001}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 100, 12, -118, -94, 66, -64, -64, 33, -120, 16, 0, 3, -16, -109, 14, 16};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 01111101 11111111 11111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -9, -1, -1, -1, -1, -1, -66, -1, 31};
  // {...1 0-bits... 00000000 00000000 00100000 00000000 00000000 01000010 00000000 00000100 00000000 00000000 00000000 00000000 01000000 10000001 00110000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 4, 0, 0, 66, 0, 32, 0, 0, 0, 0, 2, -127, 12, 0, 0};
  // {10000000 11000000 00001100 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 3, 48, 0};
  // {11010001 11100000 11110110 11101001 11011101 00100011 11000111 00100000 10001000 10001000 11000111 00101011 10100101 00110001 00000000 00111010 0001}
  public static final byte[] GRPSPLIT5 = new byte[] {-117, 7, 111, -105, -69, -60, -29, 4, 17, 17, -29, -44, -91, -116, 0, 92, 8};
  // {10111101 11011111 00001111 10111111 11111011 10111111 11100111 11001011 11100111 11111101 00111011 11100111 11100111 11111111 10111100 10111111 011101}
  public static final byte[] GRPSPLIT6 = new byte[] {-67, -5, -16, -3, -33, -3, -25, -45, -25, -65, -36, -25, -25, -1, 61, -3, 46};
  // {00000100 11010010 10001001 10100000 00000000 10010000 10101000 00101010 01001010 00100001 11000010 01000000 10011110 11000000 01100011 01100011 101101}
  public static final byte[] GRPSPLIT7 = new byte[] {32, 75, -111, 5, 0, 9, 21, 84, 82, -124, 67, 2, 121, 3, -58, -58, 45};
  // {11111111 10101011 10111111 11111111 11111111 11111111 11111110 01111111 11111111 11110111 11111111 11111101 11111111 11111111 11110111 11111111 1111}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -43, -3, -1, -1, -1, 127, -2, -1, -17, -1, -65, -1, -1, -17, -1, 15};
  // {00000000 00000000 00000000 00000000 00000000 00000010 00000100 00000000 00000000 00000101 10000000 00000000 10001100 10100000 00000000 00000000 001000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, 0, 0, 0, 64, 32, 0, 0, -96, 1, 0, 49, 5, 0, 0, 4};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {30, 0, 0, 0};
  // {10111101 10101110 11101110 00111111 11010111 01001111 01101101 01011111 11101100 10110111 11110110 10111110 01011111 11111111 10111111 11011101 1111}
  public static final byte[] GRPSPLIT11 = new byte[] {-67, 117, 119, -4, -21, -14, -74, -6, 55, -19, 111, 125, -6, -1, -3, -69, 15};
  // {11111111 11001111 01100100 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -13, 38, 0};
  // {00000000 00100000 00000000 00000000 01100000 00000000 00000000 00000000 00001000 00000001 00000000 00000000 00010000 00000000 00000000 00000000 001000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 4, 0, 0, 6, 0, 0, 0, 16, -128, 0, 0, 8, 0, 0, 0, 4};
  // {11000000 10100010 00100000 00010000}
  public static final byte[] GRPSPLIT14 = new byte[] {3, 69, 4, 8};
  // {01011010 11001010 11000101 11001100}
  public static final byte[] GRPSPLIT15 = new byte[] {90, 83, -93, 51};
  // {11111101 11111111 11111111 11111111 11101111 11111111 11111111 11111111 11110111 11111111 11110111 11111111 11111011 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT16 = new byte[] {-65, -1, -1, -1, -9, -1, -1, -1, -17, -1, -17, -1, -33, -1, -1, -1, 63};
  // {11111101 11101111 11111110 10111111 11111111 11111111 11111111 11111111 11111111 11110111 11110110 11111111 11111111 11111111 11111111 11011101 1111}
  public static final byte[] GRPSPLIT17 = new byte[] {-65, -9, 127, -3, -1, -1, -1, -1, -1, -17, 111, -1, -1, -1, -1, -69, 15};
  // {01000011 10111110 11100100 10001100}
  public static final byte[] GRPSPLIT18 = new byte[] {-62, 125, 39, 49};
  // {11111111 11111010 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11111111 10111111 11111111 11111111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT19 = new byte[] {-1, 95, -1, -1, -5, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, 63};
  // {00000000 00100011 10000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {0, -60, 1, 0};
  // {00000001 10000110 00000010 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00100000 00000010 00000100 00101001 00000000 10000000 0000}
  public static final byte[] GRPSPLIT21 = new byte[] {-128, 97, 64, 0, 1, 0, 0, 0, 0, 0, 4, 64, 32, -108, 0, 1, 0};
  // {01000011 10010000 10100000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {-62, 9, 5, 0};
  // {11111110 11111011 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 11111011 11011111 11111111 01111111 1111}
  public static final byte[] GRPSPLIT23 = new byte[] {127, -33, -1, -1, -1, -1, -1, -1, -1, -1, -5, -1, -33, -5, -1, -2, 15};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_28 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_28_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_28_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 28.5f ? 
         (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
             (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT2, 132, 0, data[8])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[9])) ? 
                        -0.030043693f : 
                        0.022545354f) : 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.028137056f : 
                        0.032554794f)) : 
                 (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT6, 134, 0, data[9])) ? 
                        -0.031523526f : 
                        0.0076322146f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT7, 132, 0, data[8])) ? 
                        -0.01932834f : 
                        0.032603625f))) : 
             (!Double.isNaN(data[3 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 7) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[3])) ? 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT9, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[2])) ? 
                        -0.060733132f : 
                        -0.009540301f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                        -0.0026689835f : 
                        0.056057572f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[8])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT13, 134, 0, data[9])) ? 
                        -0.011128653f : 
                        0.042925917f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT14, 134, 0, data[9])) ? 
                        0.0024321342f : 
                        0.048257377f)))) : 
         (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT15, 132, 0, data[8])) ? 
             (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT16, 134, 0, data[9])) ? 
                -0.10445345f : 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT18, 132, 0, data[8])) ? 
                        -0.21881308f : 
                        -4.5605306E-5f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT19, 134, 0, data[9])) ? 
                        -0.012647623f : 
                        0.091144964f))) : 
             (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT20, 134, 0, data[9])) ? 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[2])) ? 
                    -0.13267817f : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT22, 134, 0, data[9])) ? 
                        -0.037687663f : 
                        0.11900589f)) : 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[0])) ? 
                        -0.14084521f : 
                        0.06822537f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT25, 32, 0, data[2])) ? 
                        0.09837962f : 
                        0.12237366f)))));
    return pred;
  } // constant pool size = 422B, number of visited nodes = 27, static init size = 1872B
  // {10010001 11001000 00000100 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-119, 19, 32, 0};
  // {01111110 00010100 10000010 01111110}
  public static final byte[] GRPSPLIT1 = new byte[] {126, 40, 65, 126};
  // {00010001 10111000 00000000 00001001 00011000 00001001 11000001 00100100 00001001 00000100 11000111 10010100 00011001 00110000 00001110 00001000 0000}
  public static final byte[] GRPSPLIT2 = new byte[] {-120, 29, 0, -112, 24, -112, -125, 36, -112, 32, -29, 41, -104, 12, 112, 16, 0};
  // {00000000 01010010 10000100 10010011 00001000 00000010 11000010 10001010 01000010 00100100 01011101 00001010 10000010 10001100 10001000 00100001 001000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 74, 33, -55, 16, 64, 67, 81, 66, 36, -70, 80, 65, 49, 17, -124, 4};
  // {11110111 11011111 11011100 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-17, -5, 59, 0};
  // {01101010 00110000 00100000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {86, 12, 4, 0};
  // {10110101 10111100 01101111 01110011 11001011 11011001 01110100 00000000 11100111 10110011 10011111 01000111 11110111 11110011 00011100 11110111 111001}
  public static final byte[] GRPSPLIT6 = new byte[] {-83, 61, -10, -50, -45, -101, 46, 0, -25, -51, -7, -30, -17, -49, 56, -17, 39};
  // {11011111 11111001 11111101 01110010 11101111 11111111 11110110 10111011 11011110 11111011 11000010 11010011 11101101 01001101 10011101 01111001 1111}
  public static final byte[] GRPSPLIT7 = new byte[] {-5, -97, -65, 78, -9, -1, 111, -35, 123, -33, 67, -53, -73, -78, -71, -98, 15};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {30, 0, 0, 0};
  // {01111110 10111111 10001111 01111111 00010111 01111111 11110101 10111101 11111100 11100010 11111111 10001111 01110111 01011110 11010101 11101110 1101}
  public static final byte[] GRPSPLIT9 = new byte[] {126, -3, -15, -2, -24, -2, -81, -67, 63, 71, -1, -15, -18, 122, -85, 119, 11};
  // {10110001 11011110 01010111 01001000}
  public static final byte[] GRPSPLIT10 = new byte[] {-115, 123, -22, 18};
  // {00000000 01111000 00110101 11100000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 30, -84, 7};
  // {11111111 11111011 11000111 11011111 10110111 11111101 11110110 10111010 10101110 11110110 01111100 01111110 10001011 10001111 10100111 01110100 1001}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -33, -29, -5, -19, -65, 111, 93, 117, 111, 62, 126, -47, -15, -27, 46, 9};
  // {10111111 11111101 11001111 11011111 10011111 11111101 01111010 11111011 11111110 10111010 11111011 11011101 01100010 11010110 10111011 11111011 110011}
  public static final byte[] GRPSPLIT13 = new byte[] {-3, -65, -13, -5, -7, -65, 94, -33, 127, 93, -33, -69, 70, 107, -35, -33, 51};
  // {10111110 11110001 10111111 01101111 00111110 11111011 11111011 10111101 11101111 11111111 11111111 11010111 00111111 11011100 00111010 10101111 001101}
  public static final byte[] GRPSPLIT14 = new byte[] {125, -113, -3, -10, 124, -33, -33, -67, -9, -1, -1, -21, -4, 59, 92, -11, 44};
  // {11111111 10111111 11111111 11111110 11110111 01111111 11111111 11011111 10111111 11110111 11111111 11111101 11111111 11111111 10010111 11110111 1111}
  public static final byte[] GRPSPLIT15 = new byte[] {-1, -3, -1, 127, -17, -2, -1, -5, -3, -17, -1, -65, -1, -1, -23, -17, 15};
  // {11111111 11111111 11111111 11111111 11101111 11111111 11111111 11111111 01111111 11111111 10111111 11111111 11110111 11111111 11111111 01111111 111111}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, -1, -1, -1, -9, -1, -1, -1, -2, -1, -3, -1, -17, -1, -1, -2, 63};
  // {10100100 01101111 01011100 10100110}
  public static final byte[] GRPSPLIT17 = new byte[] {37, -10, 58, 101};
  // {11111111 10111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11110111 1111}
  public static final byte[] GRPSPLIT18 = new byte[] {-1, -3, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5, -17, 15};
  // {11111111 11111111 11111111 11111111 11011111 11111111 11111111 11011111 11101111 11111111 11111111 11111111 11111011 11111111 11111011 11111111 111111}
  public static final byte[] GRPSPLIT19 = new byte[] {-1, -1, -1, -1, -5, -1, -1, -5, -9, -1, -1, -1, -33, -1, -33, -1, 63};
  // {11111111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11101111 11111011 10011111 11111111 10111111 11111101 00111111 10111111 110111}
  public static final byte[] GRPSPLIT20 = new byte[] {-1, -1, -1, -1, -1, -5, -1, -1, -9, -33, -7, -1, -3, -65, -4, -3, 59};
  // {11111011 10010110 11111110 11110110}
  public static final byte[] GRPSPLIT21 = new byte[] {-33, 105, 127, 111};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 11111111 10011111 11111111 11111111 11111111 11111111 11111111 110111}
  public static final byte[] GRPSPLIT22 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -9, -1, -7, -1, -1, -1, -1, -1, 59};
  // {11110101 10101111 01111010 10111010}
  public static final byte[] GRPSPLIT23 = new byte[] {-81, -11, 94, 93};
  // {11111111 11101111 11111100 00000000}
  public static final byte[] GRPSPLIT24 = new byte[] {-1, -9, 63, 0};
  // {10000000 00000000 01011000 10000000}
  public static final byte[] GRPSPLIT25 = new byte[] {1, 0, 26, 1};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_29 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_29_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_29_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* TaxiIn */] < 10.5f ? 
         (data[7 /* AirTime */] < 60.5f ? 
             (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT1, 132, 0, data[8])) ? 
                     (Double.isNaN(data[3 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 7) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[3])) ? 
                        -0.083797425f : 
                        -0.033215117f) : 
                     (Double.isNaN(data[11]) || data[11 /* TaxiIn */] < 5.5f ? 
                        -0.037472963f : 
                        0.014239493f)) : 
                 (data[4 /* CRSDepTime */] < 1124.5f ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(133, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT3, 133, 0, data[9])) ? 
                        -0.06739516f : 
                        0.036154404f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(133, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT4, 133, 0, data[9])) ? 
                        0.010340747f : 
                        0.088334255f))) : 
             (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT5, 132, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT7, 132, 0, data[8])) ? 
                        -0.026690237f : 
                        -0.0026987616f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[9])) ? 
                        -3.0224727E-4f : 
                        0.02847723f)) : 
                 (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[2])) ? 
                        -0.024360133f : 
                        0.038976636f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                        0.05678332f : 
                        0.12369407f)))) : 
         (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[8])) ? 
             (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                 (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT14, 134, 0, data[9])) ? 
                     (Double.isNaN(data[11]) || data[11 /* TaxiIn */] < 16.5f ? 
                        -0.07197877f : 
                        0.016647995f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT15, 132, 0, data[8])) ? 
                        0.089664f : 
                        0.16659407f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT16, 132, 0, data[8])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                        -0.06021353f : 
                        0.059573688f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT18, 134, 0, data[9])) ? 
                        -0.07312855f : 
                        0.08594727f))) : 
             (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT20, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[3 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 7) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[3])) ? 
                        -0.06775663f : 
                        0.034291785f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[2])) ? 
                        0.027715683f : 
                        0.12380488f)) : 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT23, 132, 0, data[8])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT24, 134, 0, data[9])) ? 
                        0.058075346f : 
                        0.16087157f) : 
                     (Double.isNaN(data[11]) || data[11 /* TaxiIn */] < 16.5f ? 
                        0.15363687f : 
                        0.10996775f)))));
    return pred;
  } // constant pool size = 433B, number of visited nodes = 31, static init size = 1842B
  // {10001000 01111100 00000010 00100000}
  public static final byte[] GRPSPLIT0 = new byte[] {17, 62, 64, 4};
  // {11101111 10100010 10011110 11111110 10110101 10111101 11101111 10111001 11111101 11111111 10110111 01111110 11111101 11010111 10010101 11111111 1111}
  public static final byte[] GRPSPLIT1 = new byte[] {-9, 69, 121, 127, -83, -67, -9, -99, -65, -1, -19, 126, -65, -21, -87, -1, 15};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {80, 0, 0, 0};
  // {00000001 10001000 01000000 01100000 01000100 00000000 00000100 00000100 10000000 00000000 10000110 00000000 00010100 00000100 10001100 01000100 00000}
  public static final byte[] GRPSPLIT3 = new byte[] {-128, 17, 2, 6, 34, 0, 32, 32, 1, 0, 97, 0, 40, 32, 49, 34, 0};
  // {00000000 00100000 01110000 10010000 00001001 00000010 10000000 00000111 10010001 00010000 00000100 00001100 11000000 00010101 00001000 01000000 00100}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 4, 14, 9, -112, 64, 1, -32, -119, 8, 32, 48, 3, -88, 16, 2, 4};
  // {01010000 00101000 00100100 00000010 00010001 00000000 01000100 00100000 10001000 00000000 01000100 10100000 00100001 10000000 00000001 00000000 0001}
  public static final byte[] GRPSPLIT5 = new byte[] {10, 20, 36, 64, -120, 0, 34, 4, 17, 0, 34, 5, -124, 1, -128, 0, 8};
  // {10010001 11100010 00010100 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-119, 71, 40, 0};
  // {11010111 01101101 11111111 11011011 01011111 11101111 01100111 00111110 11101111 00111101 11010101 11110011 11110101 10111100 00000101 11111011 0111}
  public static final byte[] GRPSPLIT7 = new byte[] {-21, -74, -1, -37, -6, -9, -26, 124, -9, -68, -85, -49, -81, 61, -96, -33, 14};
  // {00111111 11111101 10011111 10001110 00011110 11111001 01110001 01111001 11101111 10110110 11010011 01011011 00010010 11100100 10111011 01110101 001011}
  public static final byte[] GRPSPLIT8 = new byte[] {-4, -65, -7, 113, 120, -97, -114, -98, -9, 109, -53, -38, 72, 39, -35, -82, 52};
  // {00000000 10111110 01000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 125, 2, 0};
  // {10011111 11010100 00001110 01001110}
  public static final byte[] GRPSPLIT10 = new byte[] {-7, 43, 112, 114};
  // {00011001 10010110 00001011 00001110}
  public static final byte[] GRPSPLIT11 = new byte[] {-104, 105, -48, 112};
  // {11101100 10100000 11111110 00111101 10100101 01001111 11101101 10011011 10111011 10110111 11111111 11111101 01001111 11110111 10100111 01111111 1111}
  public static final byte[] GRPSPLIT12 = new byte[] {55, 5, 127, -68, -91, -14, -73, -39, -35, -19, -1, -65, -14, -17, -27, -2, 15};
  // {00000110 00101011 11110011 10100100}
  public static final byte[] GRPSPLIT13 = new byte[] {96, -44, -49, 37};
  // {00000010 00000100 00000000 11010000 01000000 00000000 00000000 00000000 00000001 00001001 00000000 00001000 00000010 00000000 00000010 10010000 000000}
  public static final byte[] GRPSPLIT14 = new byte[] {64, 32, 0, 11, 2, 0, 0, 0, -128, -112, 0, 16, 64, 0, 64, 9, 0};
  // {00000000 01000101 00000000 10000000 00000000 00000000 00000010 00000100 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT15 = new byte[] {0, -94, 0, 1, 0, 0, 64, 32, 0, 2, 0, 0, 0, 0, 0, 0, 0};
  // {11111111 11110111 11111111 00111111 11101111 01101111 11111111 10111111 10111111 11110111 11111111 11111111 01011111 11111111 10110111 11111111 1111}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, -17, -1, -4, -9, -10, -1, -3, -3, -17, -1, -1, -6, -1, -19, -1, 15};
  // {00000100 00101000 00100000 10100100}
  public static final byte[] GRPSPLIT17 = new byte[] {32, 20, 4, 37};
  // {11111111 11111010 11111111 11111111 11101111 11111111 11111111 11111011 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 111111}
  public static final byte[] GRPSPLIT18 = new byte[] {-1, 95, -1, -1, -9, -1, -1, -33, -9, -1, -1, -1, -1, -1, -1, -9, 63};
  // {10010000 01011011 11100110 11111000}
  public static final byte[] GRPSPLIT19 = new byte[] {9, -38, 103, 31};
  // {00000000 10000000 00000000 00000000 10100000 00000000 00000000 00000000 00000000 10000000 00000000 00011001 00000100 01110000 00100100 00101000 0100}
  public static final byte[] GRPSPLIT20 = new byte[] {0, 1, 0, 0, 5, 0, 0, 0, 0, 1, 0, -104, 32, 14, 36, 20, 2};
  // {00011110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {120, 0, 0, 0};
  // {11111001 11111111 11100111 11111010}
  public static final byte[] GRPSPLIT22 = new byte[] {-97, -1, -25, 95};
  // {10111111 11111111 10101111 11011111 01011111 11111111 01111111 11111100 11111111 11111111 11110110 01111111 11111011 10001111 01011001 11010111 1111}
  public static final byte[] GRPSPLIT23 = new byte[] {-3, -1, -11, -5, -6, -1, -2, 63, -1, -1, 111, -2, -33, -15, -102, -21, 15};
  // {00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00001001 00000000 00000000 00000000 00000000 00000000 00000010 00000000 001000}
  public static final byte[] GRPSPLIT24 = new byte[] {0, 0, 0, 0, -128, 0, 0, 0, -112, 0, 0, 0, 0, 0, 64, 0, 4};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_30 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_30_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_30_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* CRSArrTime */] < 1636.5f ? 
         (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT0, 134, 0, data[9])) ? 
             (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT1, 132, 0, data[8])) ? 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                     (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 26.5f ? 
                        -0.07879557f : 
                        0.033265337f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[9])) ? 
                        -0.08400416f : 
                        0.012814288f)) : 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT5, 134, 0, data[9])) ? 
                        -0.19076766f : 
                        -0.03190502f) : 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                        -0.013509587f : 
                        0.0416666f))) : 
             (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT7, 132, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT9, 134, 0, data[9])) ? 
                        -0.019651938f : 
                        0.0114782825f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[2])) ? 
                        -0.026236624f : 
                        0.021931361f)) : 
                 (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
                        -0.027463512f : 
                        0.02731429f) : 
                     (data[7 /* AirTime */] < 62.5f ? 
                        -0.0059781875f : 
                        0.03367553f)))) : 
         (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[0])) ? 
             (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT14, 134, 0, data[9])) ? 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT15, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                        -0.10369699f : 
                        -0.04248356f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                        -0.03903737f : 
                        0.01493882f)) : 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[8])) ? 
                        -0.038919587f : 
                        0.007560647f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT20, 132, 0, data[8])) ? 
                        0.017557042f : 
                        0.071285695f))) : 
             (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT21, 134, 0, data[9])) ? 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT22, 132, 0, data[8])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[2])) ? 
                        -0.026115065f : 
                        0.017495854f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT24, 134, 0, data[9])) ? 
                        -0.010879054f : 
                        0.039322566f)) : 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT25, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT26, 132, 0, data[8])) ? 
                        -0.18194951f : 
                        0.05311754f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT27, 134, 0, data[9])) ? 
                        0.113276474f : 
                        0.20239362f)))));
    return pred;
  } // constant pool size = 474B, number of visited nodes = 31, static init size = 2088B
  // {11110111 11011100 10111111 11110011 11111001 11101001 11010111 10001110 10111011 10111100 11111111 11001111 11111111 10011111 10111011 00110111 101011}
  public static final byte[] GRPSPLIT0 = new byte[] {-17, 59, -3, -49, -97, -105, -21, 113, -35, 61, -1, -13, -1, -7, -35, -20, 53};
  // {00000000 01000011 00000000 01000000 01000010 10010000 00000011 00000100 00000000 01001000 00000001 00001011 10001000 00000001 00100100 10001000 0000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, -62, 0, 2, 66, 9, -64, 32, 0, 18, -128, -48, 17, -128, 36, 17, 0};
  // {00011000 00000111 00001100 10100010}
  public static final byte[] GRPSPLIT2 = new byte[] {24, -32, 48, 69};
  // {00000000 00100001 01000000 00000000 00000000 00000000 00101000 00100000 01000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, -124, 2, 0, 0, 0, 20, 4, 2, 0, 0, 0, 0, 4, 0, 0, 0};
  // {00011000 01110111 10001111 00110010}
  public static final byte[] GRPSPLIT4 = new byte[] {24, -18, -15, 76};
  // {11111111 11111111 11111111 11111111 11111101 11111111 11011111 11111111 11111111 11111101 11111111 11011111 11111111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -1, -1, -65, -1, -5, -1, -1, -65, -1, -5, -1, -1, -1, -1, 63};
  // {11111010 11111111 00101000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {95, -1, 20, 0};
  // {11010010 01100001 11010010 11001110 10011100 00000001 01100000 10100010 10000000 11000000 11011000 00100000 00100000 01000000 00010001 00001010 0101}
  public static final byte[] GRPSPLIT7 = new byte[] {75, -122, 75, 115, 57, -128, 6, 69, 1, 3, 27, 4, 4, 2, -120, 80, 10};
  // {10110001 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-115, 4, 0, 0};
  // {00000101 01011000 00110000 00100001 00010000 00000000 10000001 00000010 00000000 00010000 00001000 00001010 11000000 10000101 00001011 00100001 000010}
  public static final byte[] GRPSPLIT9 = new byte[] {-96, 26, 12, -124, 8, 0, -127, 64, 0, 8, 16, 80, 3, -95, -48, -124, 16};
  // {10111111 10011000 11111110 01111010}
  public static final byte[] GRPSPLIT10 = new byte[] {-3, 25, 127, 94};
  // {00111110 11001110 11100100 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {124, 115, 39, 0};
  // {00001110 11101000 00000010 01111110}
  public static final byte[] GRPSPLIT12 = new byte[] {112, 23, 64, 126};
  // {10100001 11010000 01111100 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-123, 11, 62, 0};
  // {11111101 11111111 11001111 11111111 01001111 11011111 10111111 10111111 01110110 11110001 10010011 01011001 10111111 11100101 00011100 11101111 111001}
  public static final byte[] GRPSPLIT14 = new byte[] {-65, -1, -13, -1, -14, -5, -3, -3, 110, -113, -55, -102, -3, -89, 56, -9, 39};
  // {11111111 11111101 11111111 11111111 00111111 01111111 11110101 11111101 11111100 11111111 11101111 11111101 11011111 11111101 01011111 11110101 1111}
  public static final byte[] GRPSPLIT15 = new byte[] {-1, -65, -1, -1, -4, -2, -81, -65, 63, -1, -9, -65, -5, -65, -6, -81, 15};
  // {10111101 11010001 00111011 11010000}
  public static final byte[] GRPSPLIT16 = new byte[] {-67, -117, -36, 11};
  // {11011111 11110000 00100100 01101010}
  public static final byte[] GRPSPLIT17 = new byte[] {-5, 15, 36, 86};
  // {01010000 00100110 10000011 11100100}
  public static final byte[] GRPSPLIT18 = new byte[] {10, 100, -63, 39};
  // {11111101 01101110 00111111 10110011 01011111 01111101 11101110 11111101 10111111 11111111 11111111 11111010 11001011 11110111 11110111 01111101 1111}
  public static final byte[] GRPSPLIT19 = new byte[] {-65, 118, -4, -51, -6, -66, 119, -65, -3, -1, -1, 95, -45, -17, -17, -66, 15};
  // {00000000 10000000 00000001 00000000 11100000 00000000 00001011 00000010 01000011 00001000 00100000 00010001 00101001 10100000 10001000 00000000 0000}
  public static final byte[] GRPSPLIT20 = new byte[] {0, 1, -128, 0, 7, 0, -48, 64, -62, 16, 4, -120, -108, 5, 17, 0, 0};
  // {00010000 00100101 01000000 01000010 11001100 00110000 00000000 01000001 01000101 01010110 00001000 01100010 00000100 01001011 01001001 11100000 000100}
  public static final byte[] GRPSPLIT21 = new byte[] {8, -92, 2, 66, 51, 12, 0, -126, -94, 106, 16, 70, 32, -46, -110, 7, 8};
  // {11101110 11111000 10001111 01101001 01110101 10011111 01110100 01011110 11011110 10100001 00111111 10001111 11001011 00011111 01111111 01111111 0111}
  public static final byte[] GRPSPLIT22 = new byte[] {119, 31, -15, -106, -82, -7, 46, 122, 123, -123, -4, -15, -45, -8, -2, -2, 14};
  // {01100101 00001111 00011010 01010010}
  public static final byte[] GRPSPLIT23 = new byte[] {-90, -16, 88, 74};
  // {10111111 11110111 11011111 11101111 11011111 11111111 01111111 11011111 11011111 01110111 01011011 11110111 11011111 11101111 11111111 11101011 111101}
  public static final byte[] GRPSPLIT24 = new byte[] {-3, -17, -5, -9, -5, -1, -2, -5, -5, -18, -38, -17, -5, -9, -1, -41, 47};
  // {01000000 00010100 00000000 01000100 00000010 10000000 10001000 00000000 00000000 00001000 00000000 00010011 10011000 00010000 00100000 10001000 0000}
  public static final byte[] GRPSPLIT25 = new byte[] {2, 40, 0, 34, 64, 1, 17, 0, 0, 16, 0, -56, 25, 8, 4, 17, 0};
  // {11101100 11111111 11111111 11111111 11011111 11111111 11011111 10111111 11111111 11111111 11111111 11011111 11111111 10111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT26 = new byte[] {55, -1, -1, -1, -5, -1, -5, -3, -1, -1, -1, -5, -1, -3, -1, -1, 15};
  // {00010000 00100000 01000000 01000000 01000000 00000000 00000000 01000001 00000000 00000000 00000000 00000000 00000000 01000010 01000000 00000000 000000}
  public static final byte[] GRPSPLIT27 = new byte[] {8, 4, 2, 2, 2, 0, 0, -126, 0, 0, 0, 0, 0, 66, 2, 0, 0};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_31 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_31_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_31_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 17.5f ? 
         (Double.isNaN(data[3 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 7) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[3])) ? 
             (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[9])) ? 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT3, 132, 0, data[8])) ? 
                        -0.025281576f : 
                        0.008534537f) : 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.020111866f : 
                        0.017567622f)) : 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT6, 134, 0, data[9])) ? 
                        -0.07829126f : 
                        0.08783198f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT7, 132, 0, data[8])) ? 
                        0.0011730716f : 
                        0.109503254f))) : 
             (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[9])) ? 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT9, 132, 0, data[8])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[2])) ? 
                        -0.04460733f : 
                        0.01653281f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                        -0.032342117f : 
                        0.06266105f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                        -0.0376925f : 
                        0.00787234f) : 
                     (data[7 /* AirTime */] < 62.5f ? 
                        -0.0038869001f : 
                        0.025061013f)))) : 
         (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT14, 132, 0, data[8])) ? 
             (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT15, 134, 0, data[9])) ? 
                 (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 25.5f ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                        -0.054951515f : 
                        0.0020391657f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                        -0.0012350222f : 
                        0.05935615f)) : 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT19, 134, 0, data[9])) ? 
                        -0.021273477f : 
                        0.043740906f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT20, 134, 0, data[9])) ? 
                        0.060007606f : 
                        0.11902291f))) : 
             (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT21, 134, 0, data[9])) ? 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT23, 134, 0, data[9])) ? 
                        -0.09739139f : 
                        0.019975115f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT24, 132, 0, data[8])) ? 
                        0.011021249f : 
                        0.06587212f)) : 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT25, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT26, 32, 0, data[2])) ? 
                        -0.015767263f : 
                        0.0919127f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT27, 32, 0, data[2])) ? 
                        0.080190815f : 
                        0.14139178f)))));
    return pred;
  } // constant pool size = 461B, number of visited nodes = 31, static init size = 2010B
  // {10011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {25, 0, 0, 0};
  // {00010100 00011000 00000101 00000010 00001000 11000001 10000000 00000000 00000010 00110000 00010001 01000001 00000010 01000001 00011000 01000001 010001}
  public static final byte[] GRPSPLIT1 = new byte[] {40, 24, -96, 64, 16, -125, 1, 0, 64, 12, -120, -126, 64, -126, 24, -126, 34};
  // {01110000 00010000 00000011 01110110}
  public static final byte[] GRPSPLIT2 = new byte[] {14, 8, -64, 110};
  // {01010000 00101100 00000110 00101000 00001001 00101001 11000010 00000100 10000000 00001100 01001111 10000000 01000000 00000000 01110101 00010100 0101}
  public static final byte[] GRPSPLIT3 = new byte[] {10, 52, 96, 20, -112, -108, 67, 32, 1, 48, -14, 1, 2, 0, -82, 40, 10};
  // {11111011 11111000 01100100 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-33, 31, 38, 0};
  // {00100001 10111110 10110111 11101100}
  public static final byte[] GRPSPLIT5 = new byte[] {-124, 125, -19, 55};
  // {11101111 11101111 11111011 11111111 11111111 10111111 11111111 11111111 11111111 11111111 11111110 10111111 11111111 10111111 11111111 10111111 101111}
  public static final byte[] GRPSPLIT6 = new byte[] {-9, -9, -33, -1, -1, -3, -1, -1, -1, -1, 127, -3, -1, -3, -1, -3, 61};
  // {10111110 11101011 11111111 11111111 01111111 11111111 01111111 11011111 11111111 11111111 11111111 11111110 11111111 11111111 10111111 11111111 1111}
  public static final byte[] GRPSPLIT7 = new byte[] {125, -41, -1, -1, -2, -1, -2, -5, -1, -1, -1, 127, -1, -1, -3, -1, 15};
  // {10101100 11100010 10111011 00110101 11001111 10101000 10100010 10100111 01011111 00110101 00011010 11001110 11111101 10010110 11011011 00110011 101011}
  public static final byte[] GRPSPLIT8 = new byte[] {53, 71, -35, -84, -13, 21, 69, -27, -6, -84, 88, 115, -65, 105, -37, -52, 53};
  // {00000011 01000000 00110000 01000000 00101100 00000000 00000111 00100000 00010001 01000000 00001000 10100000 00000010 10010000 00101100 00000000 1100}
  public static final byte[] GRPSPLIT9 = new byte[] {-64, 2, 12, 2, 52, 0, -32, 4, -120, 2, 16, 5, 64, 9, 52, 0, 3};
  // {00000100 00010100 00000100 00110000}
  public static final byte[] GRPSPLIT10 = new byte[] {32, 40, 32, 12};
  // {11101001 10101101 01101011 10111000}
  public static final byte[] GRPSPLIT11 = new byte[] {-105, -75, -42, 29};
  // {11111101 01111000 11110111 10010011 11010101 11011011 11110100 10110011 11101111 11110000 10101101 00111011 10111101 11100111 01001111 11011010 0001}
  public static final byte[] GRPSPLIT12 = new byte[] {-65, 30, -17, -55, -85, -37, 47, -51, -9, 15, -75, -36, -67, -25, -14, 91, 8};
  // {01001001 11101011 10101110 01111000}
  public static final byte[] GRPSPLIT13 = new byte[] {-110, -41, 117, 30};
  // {11111111 10101100 11111110 11111010 11010011 01001101 11101111 11011111 10111110 10111011 10011111 10110101 11101101 10011111 10010011 01111111 1111}
  public static final byte[] GRPSPLIT14 = new byte[] {-1, 53, 127, 95, -53, -78, -9, -5, 125, -35, -7, -83, -73, -7, -55, -2, 15};
  // {00000010 00000110 00000000 00100010 10101100 00010010 10000100 01000000 10001001 01001000 10001000 10010000 10000000 00001010 00001011 00000000 000000}
  public static final byte[] GRPSPLIT15 = new byte[] {64, 96, 0, 68, 53, 72, 33, 2, -111, 18, 17, 9, 1, 80, -48, 0, 0};
  // {00111100 01100110 00000110 11111000}
  public static final byte[] GRPSPLIT16 = new byte[] {60, 102, 96, 31};
  // {11000011 10000110 10101010 10110110}
  public static final byte[] GRPSPLIT17 = new byte[] {-61, 97, 85, 109};
  // {10000011 10110100 11001111 00110100}
  public static final byte[] GRPSPLIT18 = new byte[] {-63, 45, -13, 44};
  // {11111111 11111111 11111111 11111111 11011011 11111101 01111111 10111111 11110111 11110111 11111111 01111111 01111111 11110101 11111111 11111111 111111}
  public static final byte[] GRPSPLIT19 = new byte[] {-1, -1, -1, -1, -37, -65, -2, -3, -17, -17, -1, -2, -2, -81, -1, -1, 63};
  // {00000000 00000010 00000000 00000000 00100100 00000010 10000100 01000000 00001000 01000000 10000000 00000000 10000000 00001000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT20 = new byte[] {0, 64, 0, 0, 36, 64, 33, 2, 16, 2, 1, 0, 1, 16, 0, 0, 0};
  // {01001001 11001000 00111000 10100001 00100000 00100100 10000000 01000000 01000101 00010001 01000000 00101000 01010100 10101001 11101000 11000000 101010}
  public static final byte[] GRPSPLIT21 = new byte[] {-110, 19, 28, -123, 4, 36, 1, 2, -94, -120, 2, 20, 42, -107, 23, 3, 21};
  // {10000101 11101110 10111010 11110000}
  public static final byte[] GRPSPLIT22 = new byte[] {-95, 119, 93, 15};
  // {01111101 11111111 10111111 11101111 11111111 11111111 11110111 11111011 11110111 11110111 01010011 11101111 01111101 11111111 11111110 11111111 111111}
  public static final byte[] GRPSPLIT23 = new byte[] {-66, -1, -3, -9, -1, -1, -17, -33, -17, -17, -54, -9, -66, -1, 127, -1, 63};
  // {11111101 11111111 11111111 10111111 11111111 11111111 11111111 11111001 11111111 11111111 11110111 11111110 11111111 11111111 01111111 11110111 1111}
  public static final byte[] GRPSPLIT24 = new byte[] {-65, -1, -1, -3, -1, -1, -1, -97, -1, -1, -17, 127, -1, -1, -2, -17, 15};
  // {01000011 10000100 01000000 10001000 11000000 00000000 01000001 01000010 00000000 00000010 00000000 00100000 00100000 00011001 10000010 00100010 0000}
  public static final byte[] GRPSPLIT25 = new byte[] {-62, 33, 2, 17, 3, 0, -126, 66, 0, 64, 0, 4, 4, -104, 65, 68, 0};
  // {00111110 01111110 01001111 01011110}
  public static final byte[] GRPSPLIT26 = new byte[] {124, 126, -14, 122};
  // {01011001 11010101 00111101 01100100}
  public static final byte[] GRPSPLIT27 = new byte[] {-102, -85, -68, 38};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_32 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_32_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_32_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[11 /* TaxiIn */] < 5.5f ? 
         (data[7 /* AirTime */] < 326.5f ? 
             (data[4 /* CRSDepTime */] < 1023.5f ? 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT0, 130, 0, data[8])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
                        -0.086809136f : 
                        -0.02885541f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT2, 133, 0, data[9])) ? 
                        -0.095396176f : 
                        -0.0039451574f)) : 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT4, 133, 0, data[9])) ? 
                        -0.05922214f : 
                        -0.008114711f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT5, 130, 0, data[8])) ? 
                        -0.019562632f : 
                        0.030844897f))) : 
             (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 11.5f ? 
                 (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                        0.027899295f : 
                        0.11124056f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(126, 1, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(126, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT8, 126, 1, data[8])) ? 
                        0.1123073f : 
                        0.11871591f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(126, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT9, 126, 1, data[8])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[2])) ? 
                        -0.10340291f : 
                        0.12995513f) : 
                     (data[7 /* AirTime */] < 338.5f ? 
                        0.08608589f : 
                        0.14489244f)))) : 
         (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[9])) ? 
             (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[8])) ? 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT14, 134, 0, data[9])) ? 
                        -0.055918347f : 
                        -0.012381455f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT15, 134, 0, data[9])) ? 
                        -0.021035839f : 
                        0.013587308f)) : 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT16, 134, 0, data[9])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                        -0.03308922f : 
                        0.008351874f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT18, 132, 0, data[8])) ? 
                        0.018537035f : 
                        0.08098221f))) : 
             (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT20, 132, 0, data[8])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[2])) ? 
                        -0.05013694f : 
                        0.018455897f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[2])) ? 
                        0.0015873064f : 
                        0.059350945f)) : 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT23, 132, 0, data[8])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[2])) ? 
                        -0.015416279f : 
                        0.073023394f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT25, 134, 0, data[9])) ? 
                        0.06994002f : 
                        0.15222819f)))));
    return pred;
  } // constant pool size = 449B, number of visited nodes = 31, static init size = 1938B
  // {01000011 00000101 01100001 11000110 01111000 00010000 11111000 01000010 00000100 11001000 01100000 10110000 10111100 11000000 00010000 00001000 11}
  public static final byte[] GRPSPLIT0 = new byte[] {-62, -96, -122, 99, 30, 8, 31, 66, 32, 19, 6, 13, 61, 3, 8, 16, 3};
  // {01111100 01111111 00000001 10011000}
  public static final byte[] GRPSPLIT1 = new byte[] {62, -2, -128, 25};
  // {10110111 11011111 11101111 11101011 10111111 11011111 11111110 11111011 11100011 10101110 11110111 11001101 00111111 11100111 10111101 01111111 11100}
  public static final byte[] GRPSPLIT2 = new byte[] {-19, -5, -9, -41, -3, -5, 127, -33, -57, 117, -17, -77, -4, -25, -67, -2, 7};
  // {10001001 00011100 00000010 01110000}
  public static final byte[] GRPSPLIT3 = new byte[] {-111, 56, 64, 14};
  // {00101101 00111011 11011111 10100101 11101010 11111111 11111111 10010011 01110111 11110101 11011101 11110111 11111101 11111001 10011100 11101001 11100}
  public static final byte[] GRPSPLIT4 = new byte[] {-76, -36, -5, -91, 87, -1, -1, -55, -18, -81, -69, -17, -65, -97, 57, -105, 7};
  // {01001001 00000111 00110001 11101000 01110010 00000100 00000000 00000111 00000101 01000000 00101011 11101001 10010010 01110000 10101110 00100000 00}
  public static final byte[] GRPSPLIT5 = new byte[] {-110, -32, -116, 23, 78, 32, 0, -32, -96, 2, -44, -105, 73, 14, 117, 4, 0};
  // {00000000 01101100 00010000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 54, 8, 0};
  // {01111110 11011111 11111111 11111110}
  public static final byte[] GRPSPLIT7 = new byte[] {126, -5, -1, 127};
  // {...1 0-bits... 00000000 00001000 10000001 00000000 01000000 01000010 00000000 00001000 00000000 00000000 00000000 00000100 00000000 10000000 10110001 000000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 16, -127, 0, 2, 66, 0, 16, 0, 0, 0, 32, 0, 1, -115, 0};
  // {...1 0-bits... 11111111 11111110 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 00111001 11111110 11111111 11111111 111011}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 127, -2, -1, -1, -1, -1, -1, -1, -1, -1, -100, 127, -1, -1, 55};
  // {11001111 11111011 11111111 11111100}
  public static final byte[] GRPSPLIT10 = new byte[] {-13, -33, -1, 63};
  // {10011101 11110000 10001001 10010011 11001001 10000000 10100010 01000000 01000010 00101101 10011000 01001000 11010010 01001100 00011100 11100011 001111}
  public static final byte[] GRPSPLIT11 = new byte[] {-71, 15, -111, -55, -109, 1, 69, 2, 66, -76, 25, 18, 75, 50, 56, -57, 60};
  // {11010011 11110000 01100100 00100100 00111001 00100111 01100001 00100101 10000010 00100000 01001101 00101011 00101011 11110001 01001110 10010000 1101}
  public static final byte[] GRPSPLIT12 = new byte[] {-53, 15, 38, 36, -100, -28, -122, -92, 65, 4, -78, -44, -44, -113, 114, 9, 11};
  // {01111111 11001000 01100010 01110110}
  public static final byte[] GRPSPLIT13 = new byte[] {-2, 19, 70, 110};
  // {10111111 11111011 11101111 11110111 11111111 11111010 11100011 01010111 01100111 11111111 11011111 01101111 11111111 11101111 10011110 11101011 001111}
  public static final byte[] GRPSPLIT14 = new byte[] {-3, -33, -9, -17, -1, 95, -57, -22, -26, -1, -5, -10, -1, -9, 121, -41, 60};
  // {11011101 11111111 10101011 11010111 11111001 11111011 10110011 11011111 11101111 11111101 11111010 11011111 11011011 01011110 11111111 11100011 111111}
  public static final byte[] GRPSPLIT15 = new byte[] {-69, -1, -43, -21, -97, -33, -51, -5, -9, -65, 95, -5, -37, 122, -1, -57, 63};
  // {01000010 00000001 01010000 00100000 00000100 00000000 00001100 00100000 00011000 00000000 01000000 00100100 00001100 00100010 00000011 00010100 000000}
  public static final byte[] GRPSPLIT16 = new byte[] {66, -128, 10, 4, 32, 0, 48, 4, 24, 0, 2, 36, 48, 68, -64, 40, 0};
  // {00111111 10010011 00101110 01100010}
  public static final byte[] GRPSPLIT17 = new byte[] {-4, -55, 116, 70};
  // {00000000 00000000 00000000 00000000 00010001 00000000 01100001 00000001 00000000 00100000 00000001 00001001 00001000 00000001 00001000 00000000 1000}
  public static final byte[] GRPSPLIT18 = new byte[] {0, 0, 0, 0, -120, 0, -122, -128, 0, 4, -128, -112, 16, -128, 16, 0, 1};
  // {01000000 10000011 11111000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {2, -63, 31, 0};
  // {10111101 11111111 10001111 01111111 10111111 11111101 11110111 00111011 11101111 10111111 11011101 11101110 11010101 10011011 11110111 01011011 1111}
  public static final byte[] GRPSPLIT20 = new byte[] {-67, -1, -15, -2, -3, -65, -17, -36, -9, -3, -69, 119, -85, -39, -17, -38, 15};
  // {00100101 10010101 00000000 11001010}
  public static final byte[] GRPSPLIT21 = new byte[] {-92, -87, 0, 83};
  // {00000100 01001000 00110111 11001100}
  public static final byte[] GRPSPLIT22 = new byte[] {32, 18, -20, 51};
  // {01000000 00010000 10100010 10000010 01100000 00110000 00011010 11000111 00010010 01001000 00000000 00010011 00000100 00100000 01000111 10000010 0000}
  public static final byte[] GRPSPLIT23 = new byte[] {2, 8, 69, 65, 6, 12, 88, -29, 72, 18, 0, -56, 32, 4, -30, 65, 0};
  // {00111000 01101101 10100011 00101000}
  public static final byte[] GRPSPLIT24 = new byte[] {28, -74, -59, 20};
  // {11101011 11111111 11111111 01111111 11111111 11111111 11111111 10111111 11111111 11010110 11111111 11110111 11101101 10110111 11111011 01111111 110111}
  public static final byte[] GRPSPLIT25 = new byte[] {-41, -1, -1, -2, -1, -1, -1, -3, -1, 107, -1, -17, -73, -19, -33, -2, 59};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_33 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_33_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_33_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 23.5f ? 
         (data[11 /* TaxiIn */] < 4.5f ? 
             (data[7 /* AirTime */] < 218.5f ? 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT0, 129, 1, data[8])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(133, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT1, 133, 0, data[9])) ? 
                        -0.06696326f : 
                        4.0334446E-4f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT2, 133, 0, data[9])) ? 
                        -0.0400295f : 
                        -0.0022714406f)) : 
                 (data[10 /* Distance */] < 1650.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* AirTime */] < 226.5f ? 
                        0.08299049f : 
                        0.118898354f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(132, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT3, 132, 0, data[9])) ? 
                        -0.057333503f : 
                        0.011529123f))) : 
             (!Double.isNaN(data[3 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[3])) ? 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT5, 132, 0, data[8])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT6, 134, 0, data[9])) ? 
                        -0.04768933f : 
                        0.016463937f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT7, 134, 0, data[9])) ? 
                        -0.03039945f : 
                        0.023333449f)) : 
                 (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[9])) ? 
                     (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                        -0.002103468f : 
                        0.023620455f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT10, 132, 0, data[8])) ? 
                        -0.010071109f : 
                        0.06252705f)))) : 
         (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 39.5f ? 
             (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT11, 133, 0, data[9])) ? 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT12, 129, 1, data[8])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                        -0.26420042f : 
                        -0.08582346f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
                        -0.06253203f : 
                        0.025099657f)) : 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[2])) ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(129, 1, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT16, 129, 1, data[8])) ? 
                        -0.0179372f : 
                        0.08907035f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT17, 129, 1, data[8])) ? 
                        -0.078789435f : 
                        0.07812489f))) : 
             (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT19, 129, 1, data[8])) ? 
                    -0.1176558f : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(129, 1, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT20, 129, 1, data[8])) ? 
                        0.10998439f : 
                        0.11854735f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT21, 129, 1, data[8])) ? 
                     (data[7 /* AirTime */] < 252.5f ? 
                        0.11085151f : 
                        -0.0063933223f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(133, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT22, 133, 0, data[9])) ? 
                        0.10774611f : 
                        0.11733731f)))));
    return pred;
  } // constant pool size = 458B, number of visited nodes = 30, static init size = 2016B
  // {...1 0-bits... 11111011 01010001 11111011 11010111 11111111 00011011 10111000 11111111 01111011 11100111 01111001 11001111 11010110 10101101 11001110 11111111 0}
  public static final byte[] GRPSPLIT0 = new byte[] {-33, -118, -33, -21, -1, -40, 29, -1, -34, -25, -98, -13, 107, -75, 115, -1, 0};
  // {00000000 00100010 00010000 01110001 01000001 00010000 00000000 00000000 10000000 00000101 00000100 10100000 01000000 00100000 00001101 01000000 00011}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 68, 8, -114, -126, 8, 0, 0, 1, -96, 32, 5, 2, 4, -80, 2, 24};
  // {00100101 00011111 00101111 01100001 00101010 11111011 01011110 10111001 01110111 10110001 10011111 11001111 00111111 11101111 11011000 01111101 11100}
  public static final byte[] GRPSPLIT2 = new byte[] {-92, -8, -12, -122, 84, -33, 122, -99, -18, -115, -7, -13, -4, -9, 27, -66, 7};
  // {11111111 11111111 11101111 11111111 11011111 11111111 11111111 11111111 11100111 11111111 01111111 11111111 10101111 01011111 01111011 10011111 1101}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -9, -1, -5, -1, -1, -1, -25, -1, -2, -1, -11, -6, -34, -7, 11};
  // {11111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {31, 0, 0, 0};
  // {01000011 10000101 00101110 00100000 01110001 00100111 11010011 00001010 10101011 00000110 11101111 11010100 01100010 01110000 11111100 10000000 0100}
  public static final byte[] GRPSPLIT5 = new byte[] {-62, -95, 116, 4, -114, -28, -53, 80, -43, 96, -9, 43, 70, 14, 63, 1, 2};
  // {01010000 00010100 11000100 10000000 01010000 10000001 01000000 00100010 01011010 00100110 11100100 00000001 00000010 01000001 00100011 00000101 001011}
  public static final byte[] GRPSPLIT6 = new byte[] {10, 40, 35, 1, 10, -127, 2, 68, 90, 100, 39, -128, 64, -126, -60, -96, 52};
  // {10111111 11111110 01001111 11010111 11111111 11111111 11110111 11001111 11011111 01111101 11110011 01011101 10111110 11111111 11111100 11011011 110101}
  public static final byte[] GRPSPLIT7 = new byte[] {-3, 127, -14, -21, -1, -1, -17, -13, -5, -66, -49, -70, 125, -1, 63, -37, 43};
  // {00100101 11100000 00011011 00010011 00001001 10000000 10100010 10000001 01000010 01100000 00000000 01100000 11100000 00010100 01001000 11100011 001111}
  public static final byte[] GRPSPLIT8 = new byte[] {-92, 7, -40, -56, -112, 1, 69, -127, 66, 6, 0, 6, 7, 40, 18, -57, 60};
  // {10010001 11000000 00000100 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-119, 3, 32, 0};
  // {11101111 10111011 10101110 11111111 11110111 11011111 11111101 11111111 11111010 11110111 11101111 01101111 11011111 11111110 10111111 01111111 1111}
  public static final byte[] GRPSPLIT10 = new byte[] {-9, -35, 117, -1, -17, -5, -65, -1, 95, -17, -9, -10, -5, 127, -3, -2, 15};
  // {10101101 11011011 01111111 11111111 10101111 11011111 11110111 11011111 11101111 11110010 10111111 01111011 00111001 10111100 10111001 00111111 11011}
  public static final byte[] GRPSPLIT11 = new byte[] {-75, -37, -2, -1, -11, -5, -17, -5, -9, 79, -3, -34, -100, 61, -99, -4, 27};
  // {...1 0-bits... 11111111 11111111 11111111 11111111 10101110 10011111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 1}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -1, -1, -1, 117, -7, -1, -1, -2, -1, -1, -1, -1, -1, -1, -9, 1};
  // {00110000 01010000 00010001 00001000}
  public static final byte[] GRPSPLIT13 = new byte[] {12, 10, -120, 16};
  // {10110010 01111011 10111010 11111100}
  public static final byte[] GRPSPLIT14 = new byte[] {77, -34, 93, 63};
  // {01001101 10000110 11011010 00110110}
  public static final byte[] GRPSPLIT15 = new byte[] {-78, 97, 91, 108};
  // {...1 0-bits... 11111011 01110101 11011101 01110111 10110110 11111111 11111111 11111111 11111111 11101111 11111111 01111011 11111111 11111111 01101010 11111111 1}
  public static final byte[] GRPSPLIT16 = new byte[] {-33, -82, -69, -18, 109, -1, -1, -1, -1, -9, -1, -34, -1, -1, 86, -1, 1};
  // {...1 0-bits... 11111111 11111111 11111111 11111111 11111110 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11101111 11111111 1}
  public static final byte[] GRPSPLIT17 = new byte[] {-1, -1, -1, -1, 127, -1, -5, -1, -1, -1, -1, -1, 127, -1, -9, -1, 1};
  // {11111101 11101111 01111111 10111010}
  public static final byte[] GRPSPLIT18 = new byte[] {-65, -9, -2, 93};
  // {...1 0-bits... 11111111 11111111 11111111 11110111 10111111 11111111 11111111 11111111 01111111 11111111 11111111 11111011 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT19 = new byte[] {-1, -1, -1, -17, -3, -1, -1, -1, -2, -1, -1, -33, -1, -1, -1, -1, 1};
  // {...1 0-bits... 00000000 00000000 00000001 00000000 00100001 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00010001 00000000 0}
  public static final byte[] GRPSPLIT20 = new byte[] {0, 0, -128, 0, -124, 0, 0, 0, 0, 0, 0, 1, 0, 0, -120, 0, 0};
  // {...1 0-bits... 00000110 00000010 00000010 01001010 01010000 00000000 00110100 00000100 10000000 00000000 00010000 10000110 00000000 00000000 10010001 00010000 0}
  public static final byte[] GRPSPLIT21 = new byte[] {96, 64, 64, 82, 10, 0, 44, 32, 1, 0, 8, 97, 0, 0, -119, 8, 0};
  // {00000000 00000000 10000000 00000000 00010000 00000000 00000000 00100000 10010000 00000000 00000000 00000000 01001100 00000000 00000100 01000100 00100}
  public static final byte[] GRPSPLIT22 = new byte[] {0, 0, 1, 0, 8, 0, 0, 4, 9, 0, 0, 0, 50, 0, 32, 34, 4};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_34 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_34_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_34_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* TaxiIn */] < 18.5f ? 
         (data[12 /* TaxiOut */] < 12.0f ? 
             (data[7 /* AirTime */] < 130.5f ? 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT0, 129, 1, data[8])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(133, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT1, 133, 0, data[9])) ? 
                        -0.071889035f : 
                        0.15359741f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                        -0.031621017f : 
                        -4.2173412E-4f)) : 
                 (data[10 /* Distance */] < 961.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* AirTime */] < 140.5f ? 
                        0.079055816f : 
                        0.17361408f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT3, 133, 0, data[9])) ? 
                        -0.078005105f : 
                        -0.0012131388f))) : 
             (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT5, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                        -0.07217957f : 
                        -0.006373121f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT7, 132, 0, data[8])) ? 
                        7.953549E-4f : 
                        0.062083658f)) : 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT9, 132, 0, data[8])) ? 
                        -0.029918257f : 
                        0.026451152f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT10, 134, 0, data[9])) ? 
                        0.021857291f : 
                        0.07119668f)))) : 
         (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[9])) ? 
             (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[8])) ? 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[8])) ? 
                    -0.188563f : 
                    -0.12695217f) : 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT15, 132, 0, data[8])) ? 
                        -0.19329737f : 
                        0.033102848f) : 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                        0.044263337f : 
                        0.1321876f))) : 
             (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT17, 132, 0, data[8])) ? 
                 (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                    -0.030285385f : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[8])) ? 
                        0.10600123f : 
                        0.16118358f)) : 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                     (data[4 /* CRSDepTime */] < 1383.0f ? 
                        0.15812828f : 
                        0.13609546f) : 
                    0.1847112f))));
    return pred;
  } // constant pool size = 384B, number of visited nodes = 27, static init size = 1644B
  // {...1 0-bits... 11111001 11111011 11111111 11011101 11011111 00111011 11101011 11111111 01111111 11110111 01111111 11111111 11111111 01101110 11111111 11111011 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-97, -33, -1, -69, -5, -36, -41, -1, -2, -17, -2, -1, -1, 118, -1, -33, 1};
  // {00000000 00100000 00000000 00000000 00000000 00000000 00000001 00000100 00011000 00000000 00000000 00000000 10000000 00000000 00000101 01000000 00100}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 4, 0, 0, 0, 0, -128, 32, 24, 0, 0, 0, 1, 0, -96, 2, 4};
  // {11011010 01111100 00010011 11110000}
  public static final byte[] GRPSPLIT2 = new byte[] {91, 62, -56, 15};
  // {10111111 11111111 11111111 11111111 11101111 11111111 01111111 10111011 11100111 11111010 01011011 01110111 01111111 01111111 01111101 01001011 11011}
  public static final byte[] GRPSPLIT3 = new byte[] {-3, -1, -1, -1, -9, -1, -2, -35, -25, 95, -38, -18, -2, -2, -66, -46, 27};
  // {10000000 11000100 00001100 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 35, 48, 0};
  // {11011111 11111101 11110111 11111011 11111101 11111011 11111111 10111111 11111111 11111100 11110111 11111011 11110101 11110101 11010101 01111110 1111}
  public static final byte[] GRPSPLIT5 = new byte[] {-5, -65, -17, -33, -65, -33, -1, -3, -1, 63, -17, -33, -81, -81, -85, 126, 15};
  // {01101110 10000111 00111011 11101110}
  public static final byte[] GRPSPLIT6 = new byte[] {118, -31, -36, 119};
  // {01000001 00000000 00000100 00000000 00010001 00000000 11000000 00000000 10001000 00000000 10000110 00000000 00000001 00010001 00000000 00100000 0000}
  public static final byte[] GRPSPLIT7 = new byte[] {-126, 0, 32, 0, -120, 0, 3, 0, 17, 0, 97, 0, -128, -120, 0, 4, 0};
  // {00000001 01111111 11000000 01000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-128, -2, 3, 2};
  // {10111110 11101010 11111110 11111111 10011111 11111111 11111110 11111111 11101101 11100111 01111111 10111101 11111111 11011111 11110111 11111111 1111}
  public static final byte[] GRPSPLIT9 = new byte[] {125, 87, 127, -1, -7, -1, 127, -1, -73, -25, -2, -67, -1, -5, -17, -1, 15};
  // {10111110 11110011 11011111 10111111 11011011 11111101 01111111 11111101 11100111 10111110 01111111 01011111 10101111 01111111 00111100 11101111 111111}
  public static final byte[] GRPSPLIT10 = new byte[] {125, -49, -5, -3, -37, -65, -2, -65, -25, 125, -2, -6, -11, -2, 60, -9, 63};
  // {11111101 11111011 11111111 11111111 11101111 11111111 11111111 11111111 11100111 11111111 10110111 01111111 11110111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT11 = new byte[] {-65, -33, -1, -1, -9, -1, -1, -1, -25, -1, -19, -2, -17, -1, -1, -1, 63};
  // {11111111 10111111 11111110 11111111 11010111 11111111 11111101 11011111 11101110 11111111 11111111 10111101 01111111 11111111 10111111 11111101 1111}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -3, 127, -1, -21, -1, -65, -5, 119, -1, -1, -67, -2, -1, -3, -65, 15};
  // {11111111 10111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 10111101 01111111 11111111 10111111 11111111 1111}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, -3, -1, -1, -5, -1, -1, -1, -1, -1, -1, -67, -2, -1, -3, -1, 15};
  // {11110010 10101011 10111111 10100110}
  public static final byte[] GRPSPLIT14 = new byte[] {79, -43, -3, 101};
  // {10111101 11111110 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT15 = new byte[] {-67, 127, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
  // {11111111 11111111 11101000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, -1, 23, 0};
  // {00000010 01010111 00000000 11000000 10001000 00000000 00011000 00000000 00000000 00000000 00100000 01000010 00000100 00000001 00000000 10000000 0000}
  public static final byte[] GRPSPLIT17 = new byte[] {64, -22, 0, 3, 17, 0, 24, 0, 0, 0, 4, 66, 32, -128, 0, 1, 0};
  // {11111111 11111101 01111100 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {-1, -65, 62, 0};
  // {00000000 00000000 00010000 00000000 00100000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT19 = new byte[] {0, 0, 8, 0, 4, 0, 64, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0};
  // {00000001 10000100 01110001 00001010}
  public static final byte[] GRPSPLIT20 = new byte[] {-128, 33, -114, 80};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_35 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_35_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_35_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* CRSArrTime */] < 1546.5f ? 
         (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT0, 132, 0, data[8])) ? 
             (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[9])) ? 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[9])) ? 
                        -0.07879132f : 
                        -0.034180094f) : 
                     (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.027696287f : 
                        0.011742637f)) : 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT6, 134, 0, data[9])) ? 
                        -0.13861677f : 
                        -0.0028302893f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT7, 132, 0, data[8])) ? 
                        0.0132373925f : 
                        0.07514771f))) : 
             (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[9])) ? 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[2])) ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT10, 132, 0, data[8])) ? 
                        -0.057266008f : 
                        0.011236515f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[9])) ? 
                        -0.036263786f : 
                        0.04272994f)) : 
                 (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                        -0.039153412f : 
                        0.0039708717f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT14, 132, 0, data[8])) ? 
                        0.006645014f : 
                        0.048201043f)))) : 
         (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT15, 134, 0, data[9])) ? 
             (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT17, 134, 0, data[9])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT18, 132, 0, data[8])) ? 
                        -0.06326822f : 
                        -0.014834012f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[8])) ? 
                        -0.021129346f : 
                        0.011111968f)) : 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT20, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT21, 134, 0, data[9])) ? 
                        -0.025403732f : 
                        0.019458698f) : 
                     (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[0])) ? 
                        0.02718022f : 
                        0.07468887f))) : 
             (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT23, 132, 0, data[8])) ? 
                 (Double.isNaN(data[7]) || data[7 /* AirTime */] < 208.5f ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[2])) ? 
                        -0.027659085f : 
                        0.027219158f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT25, 32, 0, data[2])) ? 
                        -0.054160677f : 
                        0.13933352f)) : 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT26, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT27, 32, 0, data[0])) ? 
                        -0.022031678f : 
                        0.07949337f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT28, 134, 0, data[9])) ? 
                        0.050282408f : 
                        0.12558429f)))));
    return pred;
  } // constant pool size = 492B, number of visited nodes = 31, static init size = 2196B
  // {11011111 01101001 11100110 11101110 10111101 00001101 01110111 00011111 10101010 11111000 11011101 00100111 10100101 01100111 01011011 11111010 0101}
  public static final byte[] GRPSPLIT0 = new byte[] {-5, -106, 103, 119, -67, -80, -18, -8, 85, 31, -69, -28, -91, -26, -38, 95, 10};
  // {00010010 00001100 00010000 00010000 00010000 00001000 10000000 00000000 10000001 00000100 00000000 00001010 00000000 00011101 01000101 01100100 100100}
  public static final byte[] GRPSPLIT1 = new byte[] {72, 48, 8, 8, 8, 16, 1, 0, -127, 32, 0, 80, 0, -72, -94, 38, 9};
  // {01111100 10101100 10001010 11111000}
  public static final byte[] GRPSPLIT2 = new byte[] {62, 53, 81, 31};
  // {11111111 11011110 10111111 11111011 11111110 11111011 11111011 11011100 11110111 10110110 01111111 01001011 11111111 01111111 01110111 11101111 110111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, 123, -3, -33, 127, -33, -33, 59, -17, 109, -2, -46, -1, -2, -18, -9, 59};
  // {00100010 10111111 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {68, -3, 0, 0};
  // {10001000 01111101 01110010 01011110}
  public static final byte[] GRPSPLIT5 = new byte[] {17, -66, 78, 122};
  // {11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 11111110 11111111 111111}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -9, 127, -1, 63};
  // {00000000 00000110 00010001 00000000 01000010 10010010 00000000 11000000 00010000 00000000 00000000 00000000 00000000 00010000 00000100 00000100 1000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 96, -120, 0, 66, 73, 0, 3, 8, 0, 0, 0, 0, 8, 32, 32, 1};
  // {01100111 11011000 11111111 11101111 11111101 11111011 11010111 10001111 10111010 10111001 11110111 11011111 11111111 11011010 10111011 00010111 101011}
  public static final byte[] GRPSPLIT8 = new byte[] {-26, 27, -1, -9, -65, -33, -21, -15, 93, -99, -17, -5, -1, 91, -35, -24, 53};
  // {00011000 01000110 00010001 00010100}
  public static final byte[] GRPSPLIT9 = new byte[] {24, 98, -120, 40};
  // {01010000 00000001 00100000 00000000 00001000 00000000 00000010 00000000 00000000 01000000 00000000 00100000 00000000 00000001 01000000 00000000 0000}
  public static final byte[] GRPSPLIT10 = new byte[] {10, -128, 4, 0, 16, 0, 64, 0, 0, 2, 0, 4, 0, -128, 2, 0, 0};
  // {01101111 11111111 11111111 11111111 11111111 11111111 11010111 10111111 11111110 11111111 11111111 11111111 11111111 11111010 11111111 00110111 111111}
  public static final byte[] GRPSPLIT11 = new byte[] {-10, -1, -1, -1, -1, -1, -21, -3, 127, -1, -1, -1, -1, 95, -1, -20, 63};
  // {10111011 11001110 10100000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-35, 115, 5, 0};
  // {01101111 11010011 00100111 01111110}
  public static final byte[] GRPSPLIT13 = new byte[] {-10, -53, -28, 126};
  // {10010010 00000000 10000000 10001100 00010000 00000000 01000001 00000000 00000000 10000000 01001001 00000000 00100100 01000000 00001001 00000010 0000}
  public static final byte[] GRPSPLIT14 = new byte[] {73, 0, 1, 49, 8, 0, -126, 0, 0, 1, -110, 0, 36, 2, -112, 64, 0};
  // {00010001 00110111 01001001 00000011 00001000 00010010 10100010 10100111 01000110 01110001 10001000 01100100 00000000 00100101 00001001 11100000 001001}
  public static final byte[] GRPSPLIT15 = new byte[] {-120, -20, -110, -64, 16, 72, 69, -27, 98, -114, 17, 38, 0, -92, -112, 7, 36};
  // {11100001 01010100 00000011 01000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-121, 42, -64, 2};
  // {10011101 11111111 11101101 10110111 11001111 11111111 10110111 11111111 01111111 11111101 10111101 01100101 11011111 10100101 10111111 11111011 011011}
  public static final byte[] GRPSPLIT17 = new byte[] {-71, -1, -73, -19, -13, -1, -19, -1, -2, -65, -67, -90, -5, -91, -3, -33, 54};
  // {11111111 11111101 11111111 01111111 00111111 01111111 11111100 11111101 11111100 11111111 11101110 11111101 11111111 11111111 10011111 11111101 1111}
  public static final byte[] GRPSPLIT18 = new byte[] {-1, -65, -1, -2, -4, -2, 63, -65, 63, -1, 119, -65, -1, -1, -7, -65, 15};
  // {01111111 01111110 11001110 00011111 11011101 11111111 11101111 11111111 10111111 11111111 01111111 11011011 11001011 10010101 11100111 11100101 1111}
  public static final byte[] GRPSPLIT19 = new byte[] {-2, 126, 115, -8, -69, -1, -9, -1, -3, -1, -2, -37, -45, -87, -25, -89, 15};
  // {10000000 11000000 00100111 00100001 01100001 10010000 00010100 00000010 01000111 10000100 10101110 01001101 00111110 00110001 00000110 00011010 0101}
  public static final byte[] GRPSPLIT20 = new byte[] {1, 3, -28, -124, -122, 9, 40, 64, -30, 33, 117, -78, 124, -116, 96, 88, 10};
  // {10110101 11110111 01111111 11011011 01001110 10111011 10110010 11110111 11001111 11111111 11011111 01110110 11010011 11101111 01011001 11101101 111101}
  public static final byte[] GRPSPLIT21 = new byte[] {-83, -17, -2, -37, 114, -35, 77, -17, -13, -1, -5, 110, -53, -9, -102, -73, 47};
  // {00001000 00011001 01001000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {16, -104, 18, 0};
  // {01000000 00010100 00110000 00000011 00010010 10000001 00000010 11000010 00010000 01000100 00001011 10011000 00000000 10000000 10101000 10000000 1000}
  public static final byte[] GRPSPLIT23 = new byte[] {2, 40, 12, -64, 72, -127, 64, 67, 8, 34, -48, 25, 0, 1, 21, 1, 1};
  // {10111110 01111110 01111110 01110110}
  public static final byte[] GRPSPLIT24 = new byte[] {125, 126, 126, 110};
  // {11111110 11111111 01111110 10011110}
  public static final byte[] GRPSPLIT25 = new byte[] {127, -1, 126, 121};
  // {01111000 00110100 10101100 10101110}
  public static final byte[] GRPSPLIT26 = new byte[] {30, 44, 53, 117};
  // {11010101 11111111 01111100 00000000}
  public static final byte[] GRPSPLIT27 = new byte[] {-85, -1, 62, 0};
  // {11101110 11101111 10111111 11111110 11111111 11111111 11111111 11111111 10111111 11111111 01111111 10011111 11111111 11111111 11111110 10011111 111111}
  public static final byte[] GRPSPLIT28 = new byte[] {119, -9, -3, 127, -1, -1, -1, -1, -3, -1, -2, -7, -1, -1, 127, -7, 63};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_36 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_36_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_36_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* TaxiIn */] < 10.5f ? 
         (data[4 /* CRSDepTime */] < 820.5f ? 
             (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT0, 132, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[9])) ? 
                        -0.061177924f : 
                        -0.023660962f) : 
                     (data[7 /* AirTime */] < 127.5f ? 
                        -0.03800446f : 
                        0.016375575f)) : 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT4, 132, 0, data[8])) ? 
                        -0.045289204f : 
                        0.022465957f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT5, 132, 0, data[8])) ? 
                        0.029823883f : 
                        0.095778205f))) : 
             (Double.isNaN(data[3 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[3])) ? 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[9])) ? 
                        -0.044798642f : 
                        -0.0055392743f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT9, 132, 0, data[8])) ? 
                        -0.022607392f : 
                        0.014352659f)) : 
                 (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT10, 134, 0, data[9])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT11, 132, 0, data[8])) ? 
                        -0.02358855f : 
                        0.019074501f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
                        0.018055364f : 
                        0.057789866f)))) : 
         (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[8])) ? 
             (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
                 (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT15, 134, 0, data[9])) ? 
                     (Double.isNaN(data[11]) || data[11 /* TaxiIn */] < 16.5f ? 
                        -0.05415602f : 
                        0.016717533f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT16, 132, 0, data[8])) ? 
                        0.03523885f : 
                        0.15153784f)) : 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT17, 132, 0, data[8])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT18, 134, 0, data[9])) ? 
                        -0.029742522f : 
                        0.08251564f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT19, 134, 0, data[9])) ? 
                        0.08309234f : 
                        0.17647372f))) : 
             (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT21, 132, 0, data[8])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT22, 134, 0, data[9])) ? 
                        0.0018446629f : 
                        0.17585446f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[2])) ? 
                        0.033153985f : 
                        0.17556106f)) : 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT24, 132, 0, data[8])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT25, 134, 0, data[9])) ? 
                        0.05657875f : 
                        0.14362265f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT26, 32, 0, data[2])) ? 
                        0.119996f : 
                        0.16385505f)))));
    return pred;
  } // constant pool size = 495B, number of visited nodes = 31, static init size = 2214B
  // {10010000 01101001 11000000 10000011 00010000 00000001 01110000 00000000 10000010 11000000 01000000 10110000 10100100 10100100 00011000 00001010 1100}
  public static final byte[] GRPSPLIT0 = new byte[] {9, -106, 3, -63, 8, -128, 14, 0, 65, 3, 2, 13, 37, 37, 24, 80, 3};
  // {10010010 11100100 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {73, 39, 0, 0};
  // {00000001 00101111 01110000 00100000 01110001 00000000 00000000 01000100 10001001 00000000 01000100 10010010 01001000 00000001 01000010 01100100 001000}
  public static final byte[] GRPSPLIT2 = new byte[] {-128, -12, 14, 4, -114, 0, 0, 34, -111, 0, 34, 73, 18, -128, 66, 38, 4};
  // {01011011 11101111 11000101 00111000}
  public static final byte[] GRPSPLIT3 = new byte[] {-38, -9, -93, 28};
  // {11111111 11111111 11111111 01111110 11111111 11111111 11101111 11111111 11111111 01111111 11111111 11001111 01111011 11011111 11101111 11110111 1111}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, 126, -1, -1, -9, -1, -1, -2, -1, -13, -34, -5, -9, -17, 15};
  // {10000000 00000000 01000000 00000001 00000000 00000001 01010000 00000000 00000000 00000000 01000000 00000000 00100100 00000000 00011000 00001000 0000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 2, -128, 0, -128, 10, 0, 0, 0, 2, 0, 36, 0, 24, 16, 0};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {24, 0, 0, 0};
  // {11110000 01010100 00100010 01111110}
  public static final byte[] GRPSPLIT7 = new byte[] {15, 42, 68, 126};
  // {10011101 11011011 00100111 11110111 11001101 11010011 11110111 00101111 01111110 11110100 10011111 01100101 10011111 11111100 11111110 10101011 001011}
  public static final byte[] GRPSPLIT8 = new byte[] {-71, -37, -28, -17, -77, -53, -17, -12, 126, 47, -7, -90, -7, 63, 127, -43, 52};
  // {01101111 01001101 10111100 11100101 01010011 10111001 01000001 01111110 11101011 01101101 00011101 01110011 11110001 01010111 11010111 01111100 0111}
  public static final byte[] GRPSPLIT9 = new byte[] {-10, -78, 61, -89, -54, -99, -126, 126, -41, -74, -72, -50, -113, -22, -21, 62, 14};
  // {01101001 00100010 01011010 00110001 01000001 01101010 00100000 10100011 01010010 00011001 10001000 11001110 11110010 11110000 10001011 01100011 001010}
  public static final byte[] GRPSPLIT10 = new byte[] {-106, 68, 90, -116, -126, 86, 4, -59, 74, -104, 17, 115, 79, 15, -47, -58, 20};
  // {01000001 11100000 01110100 00101000 11110000 10000000 00011000 10100010 00100111 11000010 10101000 00001000 00100010 10110010 11100110 10000000 0001}
  public static final byte[] GRPSPLIT11 = new byte[] {-126, 7, 46, 20, 15, 1, 24, 69, -28, 67, 21, 16, 68, 77, 103, 1, 8};
  // {00101110 10111001 00000000 10011000}
  public static final byte[] GRPSPLIT12 = new byte[] {116, -99, 0, 25};
  // {11101100 10100000 11111110 00111101 10100101 01001111 11101101 10011011 10111011 10110111 11111110 11111101 01001111 11100111 10100111 01111111 1111}
  public static final byte[] GRPSPLIT13 = new byte[] {55, 5, 127, -68, -91, -14, -73, -39, -35, -19, 127, -65, -14, -25, -27, -2, 15};
  // {00000100 00101011 11010010 00100100}
  public static final byte[] GRPSPLIT14 = new byte[] {32, -44, 75, 36};
  // {00000010 00000100 00000000 11010000 01000000 00000000 00000000 00000100 00000001 00001001 00000000 00001000 00000010 00000000 00000010 10010000 000000}
  public static final byte[] GRPSPLIT15 = new byte[] {64, 32, 0, 11, 2, 0, 0, 32, -128, -112, 0, 16, 64, 0, 64, 9, 0};
  // {11111111 11111111 11111111 10111111 10111111 11111111 11111111 10111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111 11111111 1111}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, -1, -1, -3, -3, -1, -1, -3, -1, -1, -1, -1, -1, -1, -3, -1, 15};
  // {00000001 00000101 00000001 00000000 00001000 00000000 00000010 00000000 00000000 01000000 00000001 00000010 00000000 00011000 00010000 10000000 0000}
  public static final byte[] GRPSPLIT17 = new byte[] {-128, -96, -128, 0, 16, 0, 64, 0, 0, 2, -128, 64, 0, 24, 8, 1, 0};
  // {11111111 11111111 11111111 11011111 11001111 11111101 11111111 11111011 11110110 11111110 11111111 11111011 11101011 11111111 11111111 11101111 111111}
  public static final byte[] GRPSPLIT18 = new byte[] {-1, -1, -1, -5, -13, -65, -1, -33, 111, 127, -1, -33, -41, -1, -1, -9, 63};
  // {00000000 00000000 00000000 00000000 00100100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010100 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT19 = new byte[] {0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0};
  // {10010000 01011011 01100110 11111000}
  public static final byte[] GRPSPLIT20 = new byte[] {9, -38, 102, 31};
  // {00000000 10000000 00000000 00000000 10100000 00000000 00000000 00000000 00000000 10000000 00000000 00011000 00000100 00100000 00100000 00101000 0100}
  public static final byte[] GRPSPLIT21 = new byte[] {0, 1, 0, 0, 5, 0, 0, 0, 0, 1, 0, 24, 32, 4, 4, 20, 2};
  // {00000000 00000000 00000000 00000000 00000100 00000000 00000000 01000100 00010000 00000000 00000000 00000000 00000000 00000000 00000100 00000000 000000}
  public static final byte[] GRPSPLIT22 = new byte[] {0, 0, 0, 0, 32, 0, 0, 34, 8, 0, 0, 0, 0, 0, 32, 0, 0};
  // {11011001 11111111 01101111 11111000}
  public static final byte[] GRPSPLIT23 = new byte[] {-101, -1, -10, 31};
  // {00000000 10000000 00100010 00100101 00000000 00000010 00001000 10000000 00000000 10000100 01100010 00100001 00001000 10000001 00000100 00000000 0000}
  public static final byte[] GRPSPLIT24 = new byte[] {0, 1, 68, -92, 0, 64, 16, 1, 0, 33, 70, -124, 16, -127, 32, 0, 0};
  // {00000000 00100000 00000000 00000001 00000101 00000000 00000000 01000100 00010001 00001000 01000000 00000000 00000100 00000000 10000010 00000000 001000}
  public static final byte[] GRPSPLIT25 = new byte[] {0, 4, 0, -128, -96, 0, 0, 34, -120, 16, 2, 0, 32, 0, 65, 0, 4};
  // {11111111 11101111 11111101 10011110}
  public static final byte[] GRPSPLIT26 = new byte[] {-1, -9, -65, 121};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_37 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_37_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_37_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 17.5f ? 
         (data[7 /* AirTime */] < 58.5f ? 
             (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT0, 134, 0, data[9])) ? 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT1, 132, 0, data[8])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                        -0.07018534f : 
                        -0.025220165f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                        -0.11022245f : 
                        0.058094062f)) : 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT4, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                        -0.042721134f : 
                        0.0035934208f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT6, 134, 0, data[9])) ? 
                        0.029294718f : 
                        0.19568916f))) : 
             (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT7, 132, 0, data[8])) ? 
                 (data[7 /* AirTime */] < 129.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* Distance */] < 849.5f ? 
                        -0.005197011f : 
                        -0.054564133f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(131, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(131, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT8, 131, 0, data[8])) ? 
                        3.9656967E-4f : 
                        0.08663348f)) : 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT9, 134, 0, data[9])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[2])) ? 
                        -0.013405576f : 
                        0.042978812f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                        0.005447982f : 
                        0.061256375f)))) : 
         (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[8])) ? 
             (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT13, 134, 0, data[9])) ? 
                 (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 25.5f ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
                        -0.05302675f : 
                        0.0043386635f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(115, 6, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT15, 115, 6, data[8])) ? 
                        -0.14868212f : 
                        0.028779693f)) : 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT17, 134, 0, data[9])) ? 
                        -0.026485343f : 
                        0.0449751f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT18, 134, 0, data[9])) ? 
                        0.064102694f : 
                        0.12707643f))) : 
             (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT19, 134, 0, data[9])) ? 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                     (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 34.0f ? 
                        -0.060941342f : 
                        0.116622865f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT21, 134, 0, data[9])) ? 
                        -0.0126056075f : 
                        0.10419549f)) : 
                 (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT22, 134, 0, data[9])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[2])) ? 
                        0.009043079f : 
                        0.065995514f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[2])) ? 
                        0.053547584f : 
                        0.11030433f)))));
    return pred;
  } // constant pool size = 444B, number of visited nodes = 31, static init size = 1908B
  // {01110111 10110010 01110111 11110001 00111011 11011011 11111111 10111111 11110110 10110011 01111101 11101111 11110111 11010111 11011101 11001111 111001}
  public static final byte[] GRPSPLIT0 = new byte[] {-18, 77, -18, -113, -36, -37, -1, -3, 111, -51, -66, -9, -17, -21, -69, -13, 39};
  // {00000000 01010100 01010010 01000000 10000000 00100000 00010000 01000010 00000010 00000000 00001000 00000000 00000000 10100000 00100010 00000000 0000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 42, 74, 2, 1, 4, 8, 66, 64, 0, 16, 0, 0, 5, 68, 0, 0};
  // {00001010 10110100 00000101 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {80, 45, -96, 0};
  // {11011010 11110100 01111011 11110100}
  public static final byte[] GRPSPLIT3 = new byte[] {91, 47, -34, 47};
  // {00000010 00000010 00100010 01000001 00000110 00000000 10000011 01000000 00010101 01001000 00011000 01011010 00010000 00110001 00011110 10000010 1000}
  public static final byte[] GRPSPLIT4 = new byte[] {64, 64, 68, -126, 96, 0, -63, 2, -88, 18, 24, 90, 8, -116, 120, 65, 1};
  // {00011001 01111100 11010011 10100000}
  public static final byte[] GRPSPLIT5 = new byte[] {-104, 62, -53, 5};
  // {00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 10000100 00000000 00000100 00000000 10010000 10000010 00000000 01000000 100000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 2, 0, 0, 0, 0, 0, 33, 0, 32, 0, 9, 65, 0, 2, 1};
  // {01000000 00111000 00100100 00000010 00010001 00000001 01000100 00100100 10001000 01000000 01000100 10101000 00100001 10000000 00000101 00000000 0001}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 28, 36, 64, -120, -128, 34, 36, 17, 2, 34, 21, -124, 1, -96, 0, 8};
  // {00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 000}
  public static final byte[] GRPSPLIT8 = new byte[] {-128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0};
  // {10111111 11011101 11001111 11111111 10011010 11011101 01111111 10111101 11000110 00110110 01110111 01111011 11111111 11110111 00111001 11001111 110101}
  public static final byte[] GRPSPLIT9 = new byte[] {-3, -69, -13, -1, 89, -69, -2, -67, 99, 108, -18, -34, -1, -17, -100, -13, 43};
  // {00000011 10000000 00011100 01100100}
  public static final byte[] GRPSPLIT10 = new byte[] {-64, 1, 56, 38};
  // {01111011 11010110 00111011 00011110}
  public static final byte[] GRPSPLIT11 = new byte[] {-34, 107, -36, 120};
  // {11111101 11101100 11111110 11111010 11010011 01001101 11101111 11011011 10111100 10111011 10011110 10110101 11101111 10011111 10010011 01111111 1111}
  public static final byte[] GRPSPLIT12 = new byte[] {-65, 55, 127, 95, -53, -78, -9, -37, 61, -35, 121, -83, -9, -7, -55, -2, 15};
  // {00001011 00001110 00100000 00100010 10101100 00010010 10000100 01000000 10001101 01011000 10001000 00111000 10000000 00001010 10001010 00000000 000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-48, 112, 4, 68, 53, 72, 33, 2, -79, 26, 17, 28, 1, 80, 81, 0, 0};
  // {00111100 01100110 10010110 01111010}
  public static final byte[] GRPSPLIT14 = new byte[] {60, 102, 105, 94};
  // {...6 0-bits... 11111111 11111111 11111111 11111101 11011111 11111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 111}
  public static final byte[] GRPSPLIT15 = new byte[] {-1, -1, -1, -65, -5, -1, -17, -1, -1, -1, -1, -1, -1, -1, 7};
  // {11000011 10011100 01001001 00110100}
  public static final byte[] GRPSPLIT16 = new byte[] {-61, 57, -110, 44};
  // {11111111 11111001 11111111 11111111 11011011 11111111 01111111 11111111 11111111 11110111 11111111 11111111 01111111 11110101 01111111 11111111 111111}
  public static final byte[] GRPSPLIT17 = new byte[] {-1, -97, -1, -1, -37, -1, -2, -1, -1, -17, -1, -1, -2, -81, -2, -1, 63};
  // {00000000 00000110 00000000 00000000 00000100 00000000 00000000 01000000 10000000 01000000 00000000 00000000 10000000 00001010 10000010 00000000 000000}
  public static final byte[] GRPSPLIT18 = new byte[] {0, 96, 0, 0, 32, 0, 0, 2, 1, 2, 0, 0, 1, 80, 65, 0, 0};
  // {00111101 11111111 10111111 10110111 01101011 11111101 11110101 10111011 01110111 11111111 01110111 01101111 01111101 11111111 11111011 11101101 111011}
  public static final byte[] GRPSPLIT19 = new byte[] {-68, -1, -3, -19, -42, -65, -81, -35, -18, -1, -18, -10, -66, -1, -33, -73, 55};
  // {10000000 01110110 00010010 11110000}
  public static final byte[] GRPSPLIT20 = new byte[] {1, 110, 72, 15};
  // {11111101 11111111 11111111 11110111 01111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 11111111 11111011 11111111 111011}
  public static final byte[] GRPSPLIT21 = new byte[] {-65, -1, -1, -17, -2, -1, -1, -1, -17, -1, -1, -1, -1, -1, -33, -1, 55};
  // {11111110 11011010 11111111 11001111 11111111 11111111 11011011 11110111 10101110 11110010 11011011 11111001 11110111 11100010 00111101 11111011 111111}
  public static final byte[] GRPSPLIT22 = new byte[] {127, 91, -1, -13, -1, -1, -37, -17, 117, 79, -37, -97, -17, 71, -68, -33, 63};
  // {10101111 11101100 10111100 01100000}
  public static final byte[] GRPSPLIT23 = new byte[] {-11, 55, 61, 6};
  // {00111010 10000110 01111001 10010100}
  public static final byte[] GRPSPLIT24 = new byte[] {92, 97, -98, 41};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_38 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_38_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_38_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 30.5f ? 
         (data[4 /* CRSDepTime */] < 820.5f ? 
             (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT0, 132, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[9])) ? 
                        -0.05057846f : 
                        -0.014330311f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT3, 132, 0, data[8])) ? 
                        -0.012601168f : 
                        0.047107384f)) : 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT5, 134, 0, data[9])) ? 
                        -0.029461805f : 
                        0.08718393f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT6, 132, 0, data[8])) ? 
                        0.029546635f : 
                        0.077142656f))) : 
             (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[9])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[2])) ? 
                        -0.048516937f : 
                        -0.012416324f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT10, 132, 0, data[8])) ? 
                        -0.024681892f : 
                        0.003228803f)) : 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[9])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[8])) ? 
                        -0.11404732f : 
                        0.007791476f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[8])) ? 
                        -0.0047741f : 
                        0.07779372f)))) : 
         (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT14, 132, 0, data[8])) ? 
             (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 44.5f ? 
                 (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(131, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(131, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT15, 131, 0, data[9])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                        -0.11230482f : 
                        0.016301934f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(131, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(131, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT17, 131, 0, data[9])) ? 
                        0.111999825f : 
                        0.12004341f)) : 
                 (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(131, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(131, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT18, 131, 0, data[9])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(96, 29, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT19, 96, 29, data[8])) ? 
                        0.086328134f : 
                        0.1143712f) : 
                    0.13904025f)) : 
             (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT21, 134, 0, data[9])) ? 
                    -0.12352865f : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT22, 134, 0, data[9])) ? 
                        0.06649612f : 
                        0.12388439f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT23, 132, 0, data[8])) ? 
                     (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[0])) ? 
                        0.109267764f : 
                        0.11559243f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT25, 134, 0, data[9])) ? 
                        0.11331891f : 
                        0.12076083f)))));
    return pred;
  } // constant pool size = 490B, number of visited nodes = 29, static init size = 2232B
  // {10010000 00100001 11000000 10000011 00010000 00000001 01110000 00000000 10000010 11000000 01000000 00110000 10110100 00100101 00001000 00001000 1100}
  public static final byte[] GRPSPLIT0 = new byte[] {9, -124, 3, -63, 8, -128, 14, 0, 65, 3, 2, 12, 45, -92, 16, 16, 3};
  // {10010010 11101100 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {73, 55, 0, 0};
  // {00000000 00001110 00110000 00100000 01110001 00000000 00000000 01000000 10001001 00000000 01000100 10010010 01000000 00000001 00000010 01100100 001000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 112, 12, 4, -114, 0, 0, 2, -111, 0, 34, 73, 2, -128, 64, 38, 4};
  // {00000000 00000100 00010000 00000000 10001000 10100000 00000000 00000100 00000000 00000000 00001000 00000000 00000000 10000000 00010000 00000000 0000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 32, 8, 0, 17, 5, 0, 32, 0, 0, 16, 0, 0, 1, 8, 0, 0};
  // {01011011 11101111 11000101 01111010}
  public static final byte[] GRPSPLIT4 = new byte[] {-38, -9, -93, 94};
  // {00000001 00001100 01000000 01000000 00100000 00000000 00000100 00000001 00010001 00000000 11000100 10010000 00000000 00100000 11001100 00000100 000010}
  public static final byte[] GRPSPLIT5 = new byte[] {-128, 48, 2, 2, 4, 0, 32, -128, -120, 0, 35, 9, 0, 4, 51, 32, 16};
  // {10000000 00000000 11000000 00000001 00000000 00000001 01010000 00000000 00000000 00000000 01000000 00010000 00100100 00000100 00001000 00001000 0000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 3, -128, 0, -128, 10, 0, 0, 0, 2, 8, 36, 32, 16, 16, 0};
  // {00000000 00000000 00000010 01000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 0, 64, 2};
  // {10110100 11111111 11111101 11110011 01101101 11111011 10110111 01101101 01011111 10111101 10011011 01100111 11011111 11111111 11111111 11110111 101111}
  public static final byte[] GRPSPLIT8 = new byte[] {45, -1, -65, -49, -74, -33, -19, -74, -6, -67, -39, -26, -5, -1, -1, -17, 61};
  // {01101100 01011000 10001101 00010110}
  public static final byte[] GRPSPLIT9 = new byte[] {54, 26, -79, 104};
  // {01101111 11011100 01110111 11101110 11111101 10111111 11000110 01111111 11101011 11101111 10111111 01111011 11101101 11110101 11110111 11111010 0101}
  public static final byte[] GRPSPLIT10 = new byte[] {-10, 59, -18, 119, -65, -3, 99, -2, -41, -9, -3, -34, -73, -81, -17, 95, 10};
  // {01011011 01000010 01010011 01101001 10111100 10100000 00001000 10100011 10001001 10110000 01100000 11011000 00101000 11011110 10011001 01100000 110100}
  public static final byte[] GRPSPLIT11 = new byte[] {-38, 66, -54, -106, 61, 5, 16, -59, -111, 13, 6, 27, 20, 123, -103, 6, 11};
  // {11011111 11111011 11101101 01110111 11110111 11111100 11101111 11111110 11101111 01111101 10011011 11011111 10111011 10111111 11100010 11111111 1111}
  public static final byte[] GRPSPLIT12 = new byte[] {-5, -33, -73, -18, -17, 63, -9, 127, -9, -66, -39, -5, -35, -3, 71, -1, 15};
  // {11111110 11101101 10111111 10111011 01101111 01011110 11101111 10111111 10011111 11110111 01101100 01111111 11011011 11101111 10011111 11111111 1011}
  public static final byte[] GRPSPLIT13 = new byte[] {127, -73, -3, -35, -10, 122, -9, -3, -7, -17, 54, -2, -37, -9, -7, -1, 13};
  // {11111111 11111111 11111111 11111010 01111101 01111011 11111111 11011111 10111111 11110111 11111111 11110101 01011111 11111111 10110111 11110111 1111}
  public static final byte[] GRPSPLIT14 = new byte[] {-1, -1, -1, 95, -66, -34, -1, -5, -3, -17, -1, -81, -6, -1, -19, -17, 15};
  // {11111111 11111111 11111111 11111111 11001111 11011111 11111111 11011111 11111111 11110111 10111111 11111011 11100011 11111111 11111011 11111011 110}
  public static final byte[] GRPSPLIT15 = new byte[] {-1, -1, -1, -1, -13, -5, -1, -5, -1, -17, -3, -33, -57, -1, -33, -33, 3};
  // {10010110 11101111 11101110 00110110}
  public static final byte[] GRPSPLIT16 = new byte[] {105, -9, 119, 108};
  // {00000000 00000001 00010000 01000000 00000100 00000000 00000000 00000100 10010000 00000100 00000000 00000000 10000000 00000000 00000000 01000000 000}
  public static final byte[] GRPSPLIT17 = new byte[] {0, -128, 8, 2, 32, 0, 0, 32, 9, 32, 0, 0, 1, 0, 0, 2, 0};
  // {00000000 00000000 00000000 00000000 00110000 00000000 00000000 00000000 00010000 00000000 00100000 00000000 00000100 00000000 00000000 00000000 000}
  public static final byte[] GRPSPLIT18 = new byte[] {0, 0, 0, 0, 12, 0, 0, 0, 8, 0, 4, 0, 32, 0, 0, 0, 0};
  // {...29 0-bits... 11101111 10111111 01111111 11111011 11111111 11111110 11111111 11111110 11101111 11111111 11111111 11111111}
  public static final byte[] GRPSPLIT19 = new byte[] {-9, -3, -2, -33, -1, 127, -1, 127, -9, -1, -1, -1};
  // {11010011 00100110 11011001 10101010}
  public static final byte[] GRPSPLIT20 = new byte[] {-53, 100, -101, 85};
  // {11111111 11111111 00111111 11111111 11111111 11111111 11111111 11111111 11101111 11111111 11111111 11111111 10111111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT21 = new byte[] {-1, -1, -4, -1, -1, -1, -1, -1, -9, -1, -1, -1, -3, -1, -1, -1, 63};
  // {01000010 00100000 00000000 00000000 01010000 00000000 00000000 01100000 00000000 00000011 00000000 00000000 00000100 00010000 10000000 00000000 001000}
  public static final byte[] GRPSPLIT22 = new byte[] {66, 4, 0, 0, 10, 0, 0, 6, 0, -64, 0, 0, 32, 8, 1, 0, 4};
  // {00000010 00000001 00000001 00100000 00101000 00010000 00011000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 10100000 10000000 0000}
  public static final byte[] GRPSPLIT23 = new byte[] {64, -128, -128, 4, 20, 8, 24, 0, 0, 0, 0, 2, 0, 0, 5, 1, 0};
  // {00000000 00010001 00000000 00000000}
  public static final byte[] GRPSPLIT24 = new byte[] {0, -120, 0, 0};
  // {00000000 00000000 10000000 00000000 00010000 00000000 00000000 00100000 00000000 00000000 00000000 10000000 01001100 00000000 11000010 01000000 000010}
  public static final byte[] GRPSPLIT25 = new byte[] {0, 0, 1, 0, 8, 0, 0, 4, 0, 0, 0, 1, 50, 0, 67, 2, 16};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_39 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_39_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_39_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* TaxiOut */] < 12.5f ? 
         (data[7 /* AirTime */] < 234.5f ? 
             (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT0, 129, 1, data[8])) ? 
                 (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(133, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT1, 133, 0, data[9])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                        -0.060344435f : 
                        -0.018255685f) : 
                     (Double.isNaN(data[4]) || data[4 /* CRSDepTime */] < 1622.5f ? 
                        -0.0028408344f : 
                        0.07706159f)) : 
                 (data[12 /* TaxiOut */] < 6.5f ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(132, 1, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(132, 1, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT3, 132, 1, data[9])) ? 
                        -0.044899657f : 
                        0.09630899f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(132, 1, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT4, 132, 1, data[9])) ? 
                        -0.038704656f : 
                        0.005221577f))) : 
             (Double.isNaN(data[10]) || data[10 /* Distance */] < 1784.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* AirTime */] < 256.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* Distance */] < 1728.5f ? 
                        0.090811506f : 
                        -0.031725664f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                        0.083789326f : 
                        0.18678638f)) : 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                     (data[7 /* AirTime */] < 322.5f ? 
                        -0.09275873f : 
                        0.10684111f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(126, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT7, 126, 1, data[8])) ? 
                        -0.15100026f : 
                        0.032810193f)))) : 
         (Double.isNaN(data[6]) || data[6 /* FlightNum */] < 2712.0f ? 
             (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT9, 132, 0, data[8])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT10, 134, 0, data[9])) ? 
                        -0.023443125f : 
                        0.020161245f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                        -0.0036657078f : 
                        0.015079906f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT13, 134, 0, data[9])) ? 
                        -0.026040528f : 
                        0.018880906f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
                        -0.018737266f : 
                        0.054615185f))) : 
             (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT15, 134, 0, data[9])) ? 
                 (Double.isNaN(data[4]) || data[4 /* CRSDepTime */] < 1032.5f ? 
                    -0.21879455f : 
                    -0.115661606f) : 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                     (Double.isNaN(data[3 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 7) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[3])) ? 
                        -0.08628611f : 
                        0.051221844f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT18, 132, 0, data[8])) ? 
                        0.05314507f : 
                        0.11986837f)))));
    return pred;
  } // constant pool size = 355B, number of visited nodes = 29, static init size = 1422B
  // {...1 0-bits... 11011010 01111001 11111100 00010100 11011111 01011010 11011001 11111111 01011111 11100011 00111011 11111100 11011111 10001110 11011111 10111111 1}
  public static final byte[] GRPSPLIT0 = new byte[] {91, -98, 63, 40, -5, 90, -101, -1, -6, -57, -36, 63, -5, 113, -5, -3, 1};
  // {01000000 10100100 11010000 00000001 01000100 00000000 00000010 00000001 00000000 00010010 10001100 10010010 11000010 10000010 11000101 01000000 00010}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 37, 11, -128, 34, 0, 64, -128, 0, 72, 49, 73, 67, 65, -93, 2, 8};
  // {01010000 11001101 11000011 00111010}
  public static final byte[] GRPSPLIT2 = new byte[] {10, -77, -61, 92};
  // {...1 0-bits... 00000010 00001010 00100000 10000000 01000000 00000000 00000000 00000000 00001010 00101000 00001000 01010000 00000000 00010000 00011100 00001000 0010}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 80, 4, 1, 2, 0, 0, 0, 80, 20, 16, 10, 0, 8, 56, 16, 4};
  // {...1 0-bits... 01101111 11111101 11111111 11101111 01111111 11011111 11111111 00111101 11100101 01111011 11101110 11011011 01111110 11101111 01110011 11111111 1101}
  public static final byte[] GRPSPLIT4 = new byte[] {-10, -65, -1, -9, -2, -5, -1, -68, -89, -34, 119, -37, 126, -9, -50, -1, 11};
  // {11111111 11011001 10011101 01010100}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -101, -71, 42};
  // {11101100 01111111 01101000 01100000}
  public static final byte[] GRPSPLIT6 = new byte[] {55, -2, 22, 6};
  // {...1 0-bits... 11111111 01110111 11111110 11111111 11111110 10111111 11011101 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 111110}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -18, 127, -1, 127, -3, -69, -1, -65, -1, -1, -1, -1, -1, -1, 31};
  // {10000000 11000010 01001100 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 67, 50, 0};
  // {01011101 01111001 11110110 00111011 10111001 11111011 11110111 10111111 11111111 10111100 11110111 01101011 10110101 10110101 11010101 01111010 1111}
  public static final byte[] GRPSPLIT9 = new byte[] {-70, -98, 111, -36, -99, -33, -17, -3, -1, 61, -17, -42, -83, -83, -85, 94, 15};
  // {00000000 10100010 00001000 00100000 10100000 00101000 00001000 00000000 00010011 00100000 11001011 00000010 01000010 10010000 01000001 00000110 001100}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 69, 16, 4, 5, 20, 16, 0, -56, 4, -45, 64, 66, 9, -126, 96, 12};
  // {01111101 10010000 00000010 01001100}
  public static final byte[] GRPSPLIT11 = new byte[] {-66, 9, 64, 50};
  // {10111110 10101010 11101111 11011111 01110111 01011011 11101100 01111101 10101010 10000111 00111111 10111101 01011111 10011111 01111001 11111101 1011}
  public static final byte[] GRPSPLIT12 = new byte[] {125, 85, -9, -5, -18, -38, 55, -66, 85, -31, -4, -67, -6, -7, -98, -65, 13};
  // {10111111 11111101 11111111 10101111 10011011 11011101 11111101 10111101 11111111 11111010 00010111 01111111 11110011 11111101 00111111 10111111 110111}
  public static final byte[] GRPSPLIT13 = new byte[] {-3, -65, -1, -11, -39, -69, -65, -67, -1, 95, -24, -2, -49, -65, -4, -3, 59};
  // {01000001 11111111 11111111 11110110}
  public static final byte[] GRPSPLIT14 = new byte[] {-126, -1, -1, 111};
  // {10111111 11110111 11101111 11111111 11011111 11111111 11111111 11111111 11111111 11110111 11111011 11110111 10111111 11010111 10111111 11111111 110011}
  public static final byte[] GRPSPLIT15 = new byte[] {-3, -17, -9, -1, -5, -1, -1, -1, -1, -17, -33, -17, -3, -21, -3, -1, 51};
  // {01111111 01011100 11011010 01111010}
  public static final byte[] GRPSPLIT16 = new byte[] {-2, 58, 91, 94};
  // {11000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {35, 0, 0, 0};
  // {10111100 11111010 11111111 10111111 11111111 11111111 11111111 11111111 11111111 10111111 11110110 11111100 01111101 11111111 10111111 11111111 1111}
  public static final byte[] GRPSPLIT18 = new byte[] {61, 95, -1, -3, -1, -1, -1, -1, -1, -3, 111, 63, -66, -1, -3, -1, 15};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_40 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_40_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_40_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* TaxiIn */] < 5.5f ? 
         (data[7 /* AirTime */] < 220.5f ? 
             (Double.isNaN(data[10]) || data[10 /* Distance */] < 1439.5f ? 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT1, 133, 0, data[9])) ? 
                        -0.06907997f : 
                        -0.013351833f) : 
                     (data[4 /* CRSDepTime */] < 1216.5f ? 
                        -0.016436389f : 
                        0.014446665f)) : 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(130, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT2, 130, 0, data[8])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                        -0.12361108f : 
                        -0.033228353f) : 
                     (Double.isNaN(data[7]) || data[7 /* AirTime */] < 203.5f ? 
                        -0.05061751f : 
                        0.05395208f))) : 
             (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT4, 132, 0, data[8])) ? 
                 (!Double.isNaN(data[3 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 7) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[3])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT6, 134, 0, data[9])) ? 
                        -0.025563214f : 
                        0.015533712f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                        -0.0019087703f : 
                        0.026989484f)) : 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                     (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                        -0.046465516f : 
                        0.09054208f) : 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                        0.025097588f : 
                        0.0963056f)))) : 
         (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[9])) ? 
             (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[8])) ? 
                 (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 16.5f ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                        -0.022586541f : 
                        0.007130444f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(127, 3, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT14, 127, 3, data[8])) ? 
                        -0.032899227f : 
                        0.031353917f)) : 
                 (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT15, 134, 0, data[9])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT16, 132, 0, data[8])) ? 
                        -0.03502516f : 
                        0.025885684f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                        0.008986923f : 
                        0.078535974f))) : 
             (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT18, 132, 0, data[8])) ? 
                 (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT19, 134, 0, data[9])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                        -0.11168649f : 
                        0.019027665f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[2])) ? 
                        0.07448657f : 
                        0.19024515f)) : 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT23, 134, 0, data[9])) ? 
                        -0.07024016f : 
                        0.12625043f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT24, 134, 0, data[9])) ? 
                        0.12911248f : 
                        0.19386789f)))));
    return pred;
  } // constant pool size = 419B, number of visited nodes = 31, static init size = 1758B
  // {10111001 00111100 00010011 11110000}
  public static final byte[] GRPSPLIT0 = new byte[] {-99, 60, -56, 15};
  // {01101111 10111010 11111111 10100111 00101011 11011111 01111111 11011011 11111111 11111101 00011111 01010111 11111001 10101001 10111011 11101011 11100}
  public static final byte[] GRPSPLIT1 = new byte[] {-10, 93, -1, -27, -44, -5, -2, -37, -1, -65, -8, -22, -97, -107, -35, -41, 7};
  // {01000000 00000000 00000001 00000000 01000000 00000000 00000000 00000110 00000010 01000000 00000000 00000011 00000000 00000000 10110000 00000000 00}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, -128, 0, 2, 0, 0, 96, 64, 2, 0, -64, 0, 0, 13, 0, 0};
  // {11101000 10000111 11010000 01111110}
  public static final byte[] GRPSPLIT3 = new byte[] {23, -31, 11, 126};
  // {00000010 00010100 00000100 00100100 00010001 00000000 11000000 00100000 00001000 01100000 01000100 00001000 00000001 00010001 00010000 10100000 0000}
  public static final byte[] GRPSPLIT4 = new byte[] {64, 40, 32, 36, -120, 0, 3, 4, 16, 6, 34, 16, -128, -120, 8, 5, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {30, 0, 0, 0};
  // {10010010 01010000 10000100 11000000 11110100 10001001 11000000 00100010 00001010 10100110 00011001 01000111 00001001 00001111 10011101 00010101 000000}
  public static final byte[] GRPSPLIT6 = new byte[] {73, 10, 33, 3, 47, -111, 3, 68, 80, 101, -104, -30, -112, -16, -71, -88, 0};
  // {00111111 00000001 10000000 01000110}
  public static final byte[] GRPSPLIT7 = new byte[] {-4, -128, 1, 98};
  // {01111001 11100110 11100111 10111110}
  public static final byte[] GRPSPLIT8 = new byte[] {-98, 103, -25, 125};
  // {01000000 11001011 01000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {2, -45, 2, 0};
  // {10110111 11111100 10001100 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-19, 63, 49, 0};
  // {10011101 10100000 10010000 00010011 01000001 00000100 10100010 00000000 11000000 00001000 10001000 00000000 11000000 00100100 10001000 11100010 000110}
  public static final byte[] GRPSPLIT11 = new byte[] {-71, 5, 9, -56, -126, 32, 69, 0, 3, 16, 17, 0, 3, 36, 17, 71, 24};
  // {01000000 10010100 10100000 00100000 00001000 00100010 01100001 01000011 00000010 10100010 00010000 00011001 00001110 10000001 00000111 10001010 1000}
  public static final byte[] GRPSPLIT12 = new byte[] {2, 41, 5, 4, 16, 68, -122, -62, 64, 69, 8, -104, 112, -127, -32, 81, 1};
  // {01000111 01101010 00100010 00110100}
  public static final byte[] GRPSPLIT13 = new byte[] {-30, 86, 68, 44};
  // {...3 0-bits... 11111101 11101111 11110111 11111111 11011111 01111111 10111110 11111101 11110111 10111111 11111011 11111110 01111101 11111111 10111111 1111111}
  public static final byte[] GRPSPLIT14 = new byte[] {-65, -9, -17, -1, -5, -2, 125, -65, -17, -3, -33, 127, -66, -1, -3, 127};
  // {11111111 11110011 11111111 11111111 11011111 11111101 11111111 11011111 11110110 11111110 11111011 01110011 11110011 11111111 11111111 11101111 111111}
  public static final byte[] GRPSPLIT15 = new byte[] {-1, -49, -1, -1, -5, -65, -1, -5, 111, 127, -33, -50, -49, -1, -1, -9, 63};
  // {11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111110 11110101 01111110 11111111 01110101 0111}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, 127, -81, 126, -1, -82, 14};
  // {10100100 01111011 11011011 11110010}
  public static final byte[] GRPSPLIT17 = new byte[] {37, -34, -37, 79};
  // {10111111 11111111 10101111 10111111 01111101 11111111 01111111 00111101 11111111 11110111 11110101 10110111 01111111 10001111 01111111 11110101 1111}
  public static final byte[] GRPSPLIT18 = new byte[] {-3, -1, -11, -3, -66, -1, -2, -68, -1, -17, -81, -19, -2, -15, -2, -81, 15};
  // {11111111 11011111 01101111 11111111 10111111 11111111 11111111 11111111 01111111 11110111 01110111 11111111 11111111 11111111 01111111 10111111 111111}
  public static final byte[] GRPSPLIT19 = new byte[] {-1, -5, -10, -1, -3, -1, -1, -1, -2, -17, -18, -1, -1, -1, -2, -3, 63};
  // {01010011 11101110 11110110 10110010}
  public static final byte[] GRPSPLIT20 = new byte[] {-54, 119, 111, 77};
  // {00100100 01000101 01111000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {36, -94, 30, 0};
  // {10111101 01011111 11110101 11111100}
  public static final byte[] GRPSPLIT22 = new byte[] {-67, -6, -81, 63};
  // {11111111 11011111 11111111 11111110 11111111 11111111 11111111 11111111 01111111 11110111 01111111 11111111 11111111 11111111 11111111 11011111 111111}
  public static final byte[] GRPSPLIT23 = new byte[] {-1, -5, -1, 127, -1, -1, -1, -1, -2, -17, -2, -1, -1, -1, -1, -5, 63};
  // {00000001 10000000 10000000 00000001 01000001 00000000 10000000 00000000 10000000 00000000 10001000 00000000 01000000 00000000 00000000 00000010 000100}
  public static final byte[] GRPSPLIT24 = new byte[] {-128, 1, 1, -128, -126, 0, 1, 0, 1, 0, 17, 0, 2, 0, 0, 64, 8};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_41 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_41_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_41_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* TaxiIn */] < 18.5f ? 
         (data[12 /* TaxiOut */] < 12.0f ? 
             (data[7 /* AirTime */] < 130.5f ? 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT0, 129, 1, data[8])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
                        -0.11923249f : 
                        -0.03567761f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(133, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT2, 133, 0, data[9])) ? 
                        -0.016024193f : 
                        0.018153487f)) : 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(129, 1, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT3, 129, 1, data[8])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT4, 133, 0, data[9])) ? 
                        -0.08444255f : 
                        0.004435366f) : 
                     (data[11 /* TaxiIn */] < 3.5f ? 
                        0.045242585f : 
                        0.11710606f))) : 
             (!Double.isNaN(data[3 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 7) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[3])) ? 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT6, 134, 0, data[9])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT7, 132, 0, data[8])) ? 
                        -0.060188342f : 
                        -0.002755955f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                        -0.016276924f : 
                        0.024991402f)) : 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT9, 132, 0, data[8])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT10, 134, 0, data[9])) ? 
                        -0.0053090365f : 
                        0.03559775f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[9])) ? 
                        -0.026161011f : 
                        0.021024672f)))) : 
         (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[8])) ? 
             (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[0])) ? 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[0])) ? 
                        -0.17000099f : 
                        -0.07688861f) : 
                    0.012706877f) : 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                    -0.081045836f : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                        0.09419641f : 
                        0.14806531f))) : 
             (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[0])) ? 
                        -0.0364247f : 
                        0.08161929f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT21, 132, 0, data[8])) ? 
                        0.123535745f : 
                        0.14509845f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT22, 132, 0, data[8])) ? 
                     (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[0])) ? 
                        0.09226685f : 
                        0.14605922f) : 
                     (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 17.5f ? 
                        0.1455217f : 
                        0.12763706f)))));
    return pred;
  } // constant pool size = 407B, number of visited nodes = 29, static init size = 1734B
  // {...1 0-bits... 11111101 11111111 11111111 11011101 11011111 01111111 11111011 11111111 01111111 11110111 01111111 11111111 11111111 11101110 11111101 11111011 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-65, -1, -1, -69, -5, -2, -33, -1, -2, -17, -2, -1, -1, 119, -65, -33, 1};
  // {11110101 00010011 11011111 00110010}
  public static final byte[] GRPSPLIT1 = new byte[] {-81, -56, -5, 76};
  // {00010000 00101101 10110000 01010000 00000001 01000000 00100010 00000100 10010100 00010001 00000100 10001000 01000000 10100111 11001000 01100000 10100}
  public static final byte[] GRPSPLIT2 = new byte[] {8, -76, 13, 10, -128, 2, 68, 32, 41, -120, 32, 17, 2, -27, 19, 6, 5};
  // {...1 0-bits... 00000010 00000000 10000000 00000000 00000000 01000010 00000000 10000100 00000000 00001000 00010001 01100100 00000000 00000011 00010010 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 0, 1, 0, 0, 66, 0, 33, 0, 16, -120, 38, 0, -64, 72, 0, 0};
  // {10111111 11111111 11101111 11111111 11111111 11111111 01111111 11111011 11101111 11110110 00011011 11110111 01111111 01111111 01111110 01011011 11011}
  public static final byte[] GRPSPLIT4 = new byte[] {-3, -1, -9, -1, -1, -1, -2, -33, -9, 111, -40, -17, -2, -2, 126, -38, 27};
  // {11111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {31, 0, 0, 0};
  // {11011101 11011110 11000101 11000111 01111001 11011001 11001111 00001011 01011110 01111110 01111110 11111101 11011010 01001011 10111101 10011111 001100}
  public static final byte[] GRPSPLIT6 = new byte[] {-69, 123, -93, -29, -98, -101, -13, -48, 122, 126, 126, -65, 91, -46, -67, -7, 12};
  // {00001110 10001011 11001110 00111110 11011111 01010111 11111101 10111011 10111111 00101110 11110111 11011111 00111010 00110111 11101011 11100100 1100}
  public static final byte[] GRPSPLIT7 = new byte[] {112, -47, 115, 124, -5, -22, -65, -35, -3, 116, -17, -5, 92, -20, -41, 39, 3};
  // {11100011 10011000 01110010 01111110}
  public static final byte[] GRPSPLIT8 = new byte[] {-57, 25, 78, 126};
  // {11011101 01111000 11110011 01111111 10111001 11001001 01100111 00110101 10001100 11011000 01000000 10101001 10110001 11100111 00000111 01111010 1111}
  public static final byte[] GRPSPLIT9 = new byte[] {-69, 30, -49, -2, -99, -109, -26, -84, 49, 27, 2, -107, -115, -25, -32, 94, 15};
  // {00000001 00001010 00001010 00000011 10001001 00110000 10110100 00101000 00000010 00100010 10001010 10000010 10000000 11010010 00001000 00100100 000100}
  public static final byte[] GRPSPLIT10 = new byte[] {-128, 80, 80, -64, -111, 12, 45, 20, 64, 68, 81, 65, 1, 75, 16, 36, 8};
  // {10101111 11110001 01111111 11111111 11111110 11111010 10110101 11011101 11011111 10111101 11010011 01111111 01111111 10111101 00011111 11101011 101011}
  public static final byte[] GRPSPLIT11 = new byte[] {-11, -113, -2, -1, 127, 95, -83, -69, -5, -67, -53, -2, -2, -67, -8, -41, 53};
  // {10111101 10111111 11101110 11111111 11010111 01001111 11111101 01011111 11101110 11110111 11111111 10110111 01111111 11111111 10111111 11111111 1111}
  public static final byte[] GRPSPLIT12 = new byte[] {-67, -3, 119, -1, -21, -14, -65, -6, 119, -17, -1, -19, -2, -1, -3, -1, 15};
  // {11111111 11011101 01100000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, -69, 6, 0};
  // {10000000 01100010 00000010 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 70, 64, 0};
  // {00000000 00000000 00010000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 0, 8, 0};
  // {11011011 11011110 11001111 01111110}
  public static final byte[] GRPSPLIT16 = new byte[] {-37, 123, -13, 126};
  // {11110110 01101111 10111100 10111000}
  public static final byte[] GRPSPLIT17 = new byte[] {111, -10, 61, 29};
  // {11100101 00111101 10111100 10000110}
  public static final byte[] GRPSPLIT18 = new byte[] {-89, -68, 61, 97};
  // {11111111 11111110 10111111 10111111 10111111 11111111 11111111 11111011 11111101 10111111 11110111 11111101 11111111 11011111 01011111 11010101 1111}
  public static final byte[] GRPSPLIT19 = new byte[] {-1, 127, -3, -3, -3, -1, -1, -33, -65, -3, -17, -65, -1, -5, -6, -85, 15};
  // {11111111 11101011 00111100 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {-1, -41, 60, 0};
  // {00000001 00000110 00000000 00000000 00000000 00000000 00010000 00000000 01000000 00000000 01100000 00000000 00000000 00000000 00000000 10000000 0000}
  public static final byte[] GRPSPLIT21 = new byte[] {-128, 96, 0, 0, 0, 0, 8, 0, 2, 0, 6, 0, 0, 0, 0, 1, 0};
  // {11111110 11111011 10011111 11111111 11101111 11111111 01111111 11111111 11111111 11111111 10111110 11111110 11111111 01111111 11101001 11110101 1111}
  public static final byte[] GRPSPLIT22 = new byte[] {127, -33, -7, -1, -9, -1, -2, -1, -1, -1, 125, 127, -1, -2, -105, -81, 15};
  // {00000000 01010101 00001000 00000000}
  public static final byte[] GRPSPLIT23 = new byte[] {0, -86, 16, 0};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_42 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_42_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_42_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* TaxiIn */] < 7.5f ? 
         (data[7 /* AirTime */] < 60.5f ? 
             (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT0, 132, 0, data[8])) ? 
                 (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[9])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                        -0.055884507f : 
                        -0.018552188f) : 
                     (data[12 /* TaxiOut */] < 8.5f ? 
                        -0.035130166f : 
                        0.011276202f)) : 
                 (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[9])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                        0.0028094088f : 
                        0.11202636f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                        -0.016629422f : 
                        0.12658563f))) : 
             (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT6, 132, 0, data[8])) ? 
                 (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[9])) ? 
                        -0.014729706f : 
                        0.025917491f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT9, 134, 0, data[9])) ? 
                        -0.017223729f : 
                        0.007624127f)) : 
                 (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[9])) ? 
                        -0.011609259f : 
                        0.054348305f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
                        0.029327799f : 
                        0.100881375f)))) : 
         (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[8])) ? 
             (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT14, 134, 0, data[9])) ? 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT16, 132, 0, data[8])) ? 
                        -0.06306477f : 
                        -0.009002257f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT17, 132, 0, data[8])) ? 
                        -0.02814122f : 
                        0.026864009f)) : 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[8])) ? 
                        -0.16850397f : 
                        0.021897279f) : 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[0])) ? 
                        0.032789674f : 
                        0.15097266f))) : 
             (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[2])) ? 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT22, 132, 0, data[8])) ? 
                     (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 17.5f ? 
                        -0.016074779f : 
                        0.09035581f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT23, 134, 0, data[9])) ? 
                        0.039898556f : 
                        0.14272371f)) : 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT24, 132, 0, data[8])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT25, 134, 0, data[9])) ? 
                        0.055315044f : 
                        0.17153935f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT26, 32, 0, data[2])) ? 
                        0.09352241f : 
                        0.21127184f)))));
    return pred;
  } // constant pool size = 469B, number of visited nodes = 31, static init size = 2058B
  // {00001011 00000010 00000011 01001000 00010100 00010000 10100001 01000000 00000101 01001010 00011001 01011000 00010010 00010000 00101110 00000010 0000}
  public static final byte[] GRPSPLIT0 = new byte[] {-48, 64, -64, 18, 40, 8, -123, 2, -96, 82, -104, 26, 72, 8, 116, 64, 0};
  // {01100100 11110000 11111111 10000111 00011011 10011101 11111111 10111111 11110111 10110011 11111101 01101011 11110011 11011111 00011101 11101111 110101}
  public static final byte[] GRPSPLIT1 = new byte[] {38, 15, -1, -31, -40, -71, -1, -3, -17, -51, -65, -42, -49, -5, -72, -9, 43};
  // {01000100 00111100 10101010 11001000}
  public static final byte[] GRPSPLIT2 = new byte[] {34, 60, 85, 19};
  // {00000000 00001000 00000000 00100000 10001000 00000000 00000000 00000000 10000000 00000000 00000100 10000100 10011000 00000001 11000100 01000000 001000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 16, 0, 4, 17, 0, 0, 0, 1, 0, 32, 33, 25, -128, 35, 2, 4};
  // {00001000 10100000 00100101 10110010}
  public static final byte[] GRPSPLIT4 = new byte[] {16, 5, -92, 77};
  // {11011110 01111101 00011110 10011110}
  public static final byte[] GRPSPLIT5 = new byte[] {123, -66, 120, 121};
  // {01000000 00100000 00100100 00000010 00010001 00000000 01000000 00100000 10001000 00100000 01000101 10100000 00000001 00000000 00000001 00000000 0001}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 4, 36, 64, -120, 0, 2, 4, 17, 4, -94, 5, -128, 0, -128, 0, 8};
  // {10111011 11100010 01010100 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-35, 71, 42, 0};
  // {10001000 00011111 00000000 01110001 00001001 01000000 10100100 10000000 11000110 00110001 00010000 00000000 10000010 00010101 00000000 01010000 100000}
  public static final byte[] GRPSPLIT8 = new byte[] {17, -8, 0, -114, -112, 2, 37, 1, 99, -116, 8, 0, 65, -88, 0, 10, 1};
  // {00111111 11101011 10111011 10101110 11111011 11111011 10000001 00111111 00011111 10111110 11010011 11011111 00011110 11111111 10111011 01110001 001011}
  public static final byte[] GRPSPLIT9 = new byte[] {-4, -41, -35, 117, -33, -33, -127, -4, -8, 125, -53, -5, 120, -1, -35, -114, 52};
  // {00000001 10111110 11000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-128, 125, 3, 0};
  // {10111111 11111111 11111111 11111111 11011110 11011111 11111111 11111111 11100111 11111111 11111111 01111111 11110011 11111111 01111101 10111111 111101}
  public static final byte[] GRPSPLIT11 = new byte[] {-3, -1, -1, -1, 123, -5, -1, -1, -25, -1, -1, -2, -49, -1, -66, -3, 47};
  // {01011001 10010110 00001011 01001110}
  public static final byte[] GRPSPLIT12 = new byte[] {-102, 105, -48, 114};
  // {01010000 10010000 10100010 10100000 10001000 00000110 00001001 10000001 00010010 00000100 00001010 10111001 00101110 10000000 00000101 10101010 1000}
  public static final byte[] GRPSPLIT13 = new byte[] {10, 9, 69, 5, 17, 96, -112, -127, 72, 32, 80, -99, 116, 1, -96, 85, 1};
  // {00010001 00000000 01010000 00000011 11001000 00000000 00000010 01100000 11000000 00001100 01101100 00000000 01000000 00001000 00001010 10000000 001000}
  public static final byte[] GRPSPLIT14 = new byte[] {-120, 0, 10, -64, 19, 0, 64, 6, 3, 48, 54, 0, 2, 16, 80, 1, 4};
  // {00000101 11111010 11100010 11110110}
  public static final byte[] GRPSPLIT15 = new byte[] {-96, 95, 71, 111};
  // {11111111 10111001 10111111 10110110 10111101 01111111 11101101 11011101 10111110 11010111 11011110 11111111 11111111 11110111 10000111 11111111 1111}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, -99, -3, 109, -67, -2, -73, -69, 125, -21, 123, -1, -1, -17, -31, -1, 15};
  // {11111111 10110101 10111110 11111101 11011111 01001111 01101111 10111111 10111010 01111101 11011111 11111111 01101111 11110110 10111101 11111111 1011}
  public static final byte[] GRPSPLIT17 = new byte[] {-1, -83, 125, -65, -5, -14, -10, -3, 93, -66, -5, -1, -10, 111, -67, -1, 13};
  // {00110001 11011011 10011010 10111100}
  public static final byte[] GRPSPLIT18 = new byte[] {-116, -37, 89, 61};
  // {00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 01000010 10000000 00000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT19 = new byte[] {0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 66, 1, 0, 0, 0, 0};
  // {11111111 11111101 01111000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {-1, -65, 30, 0};
  // {01010001 01011011 01010011 01100010}
  public static final byte[] GRPSPLIT21 = new byte[] {-118, -38, -54, 70};
  // {01010000 10000000 00100010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00011001 00100100 00000000 00000100 00000000 1000}
  public static final byte[] GRPSPLIT22 = new byte[] {10, 1, 68, 0, 0, 0, 0, 0, 0, 0, 64, -104, 36, 0, 32, 0, 1};
  // {11111111 11111111 11101111 11011111 11001111 11111111 11111111 11111111 10110111 11111111 11111111 11110111 11110011 11111111 11111101 11101111 111111}
  public static final byte[] GRPSPLIT23 = new byte[] {-1, -1, -9, -5, -13, -1, -1, -1, -19, -1, -1, -17, -49, -1, -65, -9, 63};
  // {00000000 10000000 00000000 00000000 00001000 00000010 00001001 10000001 00000000 00000100 00000010 10110000 00001110 00000000 00000100 00000000 0000}
  public static final byte[] GRPSPLIT24 = new byte[] {0, 1, 0, 0, 16, 64, -112, -127, 0, 32, 64, 13, 112, 0, 32, 0, 0};
  // {00000000 00000100 00000000 00100001 01000001 00100000 00000000 00001000 00000001 00001000 00000000 00000000 00000000 00000000 00000110 00110010 000000}
  public static final byte[] GRPSPLIT25 = new byte[] {0, 32, 0, -124, -126, 4, 0, 16, -128, 16, 0, 0, 0, 0, 96, 76, 0};
  // {10101111 11100110 11111101 10111110}
  public static final byte[] GRPSPLIT26 = new byte[] {-11, 103, -65, 125};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_43 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_43_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_43_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 7) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[3])) ? 
         (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[9])) ? 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT3, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.053587604f : 
                        -0.016970476f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT5, 132, 0, data[8])) ? 
                        -0.0015098365f : 
                        0.1319781f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT6, 132, 0, data[8])) ? 
                     (data[12 /* TaxiOut */] < 26.5f ? 
                        -0.095346816f : 
                        -0.015987705f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT7, 132, 0, data[8])) ? 
                        0.019652115f : 
                        0.1393368f))) : 
             (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT8, 132, 0, data[8])) ? 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT9, 134, 0, data[9])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT10, 132, 0, data[8])) ? 
                        -0.08172104f : 
                        -0.02269581f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[9])) ? 
                        -0.005112458f : 
                        0.060142428f)) : 
                 (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT12, 134, 0, data[9])) ? 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[0])) ? 
                        -0.011671262f : 
                        0.021657832f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT14, 132, 0, data[8])) ? 
                        0.046740305f : 
                        0.13191618f)))) : 
         (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT15, 134, 0, data[9])) ? 
             (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                 (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT18, 132, 0, data[8])) ? 
                        -0.14258985f : 
                        -0.03259426f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT19, 134, 0, data[9])) ? 
                        -0.05832305f : 
                        0.08408996f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT20, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT21, 134, 0, data[9])) ? 
                        -0.110028416f : 
                        -0.03619468f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT22, 134, 0, data[9])) ? 
                        -0.029120531f : 
                        0.02659134f))) : 
             (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT24, 132, 0, data[8])) ? 
                     (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT25, 32, 0, data[0])) ? 
                        -0.054602835f : 
                        0.020024156f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT26, 132, 0, data[8])) ? 
                        0.0011337027f : 
                        0.05850595f)) : 
                 (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT27, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT28, 132, 0, data[8])) ? 
                        -0.02763707f : 
                        0.018643707f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT29, 132, 0, data[8])) ? 
                        5.4331886E-4f : 
                        0.047217555f)))));
    return pred;
  } // constant pool size = 549B, number of visited nodes = 31, static init size = 2538B
  // {10011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {25, 0, 0, 0};
  // {01110110 10010010 01010011 11110110}
  public static final byte[] GRPSPLIT1 = new byte[] {110, 73, -54, 111};
  // {00010000 10110011 11001101 11000010 00001100 00001111 01100000 01001000 11010011 00100100 10011101 00000100 00100010 00011101 00101000 01110101 111101}
  public static final byte[] GRPSPLIT2 = new byte[] {8, -51, -77, 67, 48, -16, 6, 18, -53, 36, -71, 32, 68, -72, 20, -82, 47};
  // {11010000 00001001 10100010 11001000 10011001 00111011 01000001 00000000 10000010 00001011 01100100 10000000 01000000 00000000 00110101 00011010 0100}
  public static final byte[] GRPSPLIT3 = new byte[] {11, -112, 69, 19, -103, -36, -126, 0, 65, -48, 38, 1, 2, 0, -84, 88, 2};
  // {10110011 11010111 00011100 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-51, -21, 56, 0};
  // {00010000 00001000 00000000 00000000 00000001 00101000 00000001 00000000 00000000 00000010 01000100 10000000 00000000 00000000 00000001 00010000 0000}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 16, 0, 0, -128, 20, -128, 0, 0, 64, 34, 1, 0, 0, -128, 8, 0};
  // {11111101 11111111 10111111 10111111 01111111 11011011 11101110 11011001 11111100 11111101 10111111 11111111 11111111 11111111 01111011 01111101 1011}
  public static final byte[] GRPSPLIT6 = new byte[] {-65, -1, -3, -3, -2, -37, 119, -101, 63, -65, -3, -1, -1, -1, -34, -66, 13};
  // {00010000 00000000 00000000 00000000 00011000 00000000 10001000 00000000 00000000 00000100 00000001 00110000 00000000 00000000 00001000 00000100 0000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0, 24, 0, 17, 0, 0, 32, -128, 12, 0, 0, 16, 32, 0};
  // {00100010 10000100 00001100 01101101 01100101 00000101 01101110 00001110 00101000 00100100 01011111 01000011 00000010 00010001 11010100 10100000 0110}
  public static final byte[] GRPSPLIT8 = new byte[] {68, 33, 48, -74, -90, -96, 118, 112, 20, 36, -6, -62, 64, -120, 43, 5, 6};
  // {00010101 11111101 01111001 01011011 01101110 11111001 00111111 10000101 11100111 11110111 11111111 11111101 01011110 11010111 01111111 10111101 111101}
  public static final byte[] GRPSPLIT9 = new byte[] {-88, -65, -98, -38, 118, -97, -4, -95, -25, -17, -1, -65, 122, -21, -2, -67, 47};
  // {10110110 10111110 11111111 01111111 11110101 11010101 01111111 11011111 11101001 00110110 11111111 01101111 11011111 01110111 11111111 11111110 1111}
  public static final byte[] GRPSPLIT10 = new byte[] {109, 125, -1, -2, -81, -85, -2, -5, -105, 108, -1, -10, -5, -18, -1, 127, 15};
  // {00000000 11001000 00000000 00000000 00000010 10010000 00010000 10000000 00000010 00110010 01000101 00000000 01000010 00000001 00000101 00000001 010000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 19, 0, 0, 64, 9, 8, 1, 64, 76, -94, 0, 66, -128, -96, -128, 2};
  // {10001110 00000100 00000001 00100000 10000001 01000011 10000100 00000000 01000100 10010001 00010000 01100011 10000001 01100010 00011000 01000000 100000}
  public static final byte[] GRPSPLIT12 = new byte[] {113, 32, -128, 4, -127, -62, 33, 0, 34, -119, 8, -58, -127, 70, 24, 2, 1};
  // {11010110 11111010 01101100 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {107, 95, 54, 0};
  // {00000010 00000000 00001000 00000001 01100000 00000000 00000000 00001110 00000000 00100000 00010000 00000000 00000000 00000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT14 = new byte[] {64, 0, 16, -128, 6, 0, 0, 112, 0, 4, 8, 0, 0, 0, 0, 0, 0};
  // {11101110 11100010 10110011 10110111 11111111 10101010 10100010 11101111 01011111 00111101 10011010 11001110 11111101 10111110 11011011 00110011 101111}
  public static final byte[] GRPSPLIT15 = new byte[] {119, 71, -51, -19, -1, 85, 69, -9, -6, -68, 89, 115, -65, 125, -37, -52, 61};
  // {10111110 11111111 10001111 10010110}
  public static final byte[] GRPSPLIT16 = new byte[] {125, -1, -15, 105};
  // {11010001 11111111 11011100 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {-117, -1, 59, 0};
  // {00000000 00000001 00010000 00000000 00000000 00000000 00000000 00000010 00100000 00000000 00000000 00000010 00000000 00000000 01000000 00000000 0000}
  public static final byte[] GRPSPLIT18 = new byte[] {0, -128, 8, 0, 0, 0, 0, 64, 4, 0, 0, 64, 0, 0, 2, 0, 0};
  // {00000000 00010001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00100000 00000000 01000000 00000000 00000100 000000}
  public static final byte[] GRPSPLIT19 = new byte[] {0, -120, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 0, 2, 0, 32, 0};
  // {11111111 11111110 10111111 11111110 01111111 11011111 11101110 10111100 11111011 11111111 11110110 11110100 11010111 11011110 01111111 11111101 1111}
  public static final byte[] GRPSPLIT20 = new byte[] {-1, 127, -3, 127, -2, -5, 119, 61, -33, -1, 111, 47, -21, 123, -2, -65, 15};
  // {11111111 11111011 10111111 11111111 11111111 11101110 11111011 11111111 11111111 11111111 11111011 11011111 11111111 11111110 11111011 11111111 111111}
  public static final byte[] GRPSPLIT21 = new byte[] {-1, -33, -3, -1, -1, 119, -33, -1, -1, -1, -33, -5, -1, 127, -33, -1, 63};
  // {00010001 00000101 01000000 01000000 00000000 00000000 00001100 00000000 10100000 10000000 00000000 00000000 00000010 00000000 00000100 00000000 000000}
  public static final byte[] GRPSPLIT22 = new byte[] {-120, -96, 2, 2, 0, 0, 48, 0, 5, 1, 0, 0, 64, 0, 32, 0, 0};
  // {00001101 11101101 10100110 01011000}
  public static final byte[] GRPSPLIT23 = new byte[] {-80, -73, 101, 26};
  // {01101101 11110100 11110111 10111011 11110001 10001111 11111100 10110011 11111111 10111010 10111110 01111111 10110111 11111101 01110111 11011010 0100}
  public static final byte[] GRPSPLIT24 = new byte[] {-74, 47, -17, -35, -113, -15, 63, -51, -1, 93, 125, -2, -19, -65, -18, 91, 2};
  // {10101000 01000011 00000000 00000000}
  public static final byte[] GRPSPLIT25 = new byte[] {21, -62, 0, 0};
  // {00100000 00100000 10000000 00001001 00010001 00000101 00011000 00000000 00001000 10010000 10010100 00001000 00110101 01001001 00110001 00010000 0000}
  public static final byte[] GRPSPLIT26 = new byte[] {4, 4, 1, -112, -120, -96, 24, 0, 16, 9, 41, 16, -84, -110, -116, 8, 0};
  // {10010110 11101011 01111000 00000000}
  public static final byte[] GRPSPLIT27 = new byte[] {105, -41, 30, 0};
  // {11111100 01110101 11111111 11010111 00010110 11001001 11110110 10111111 11100111 11111011 11101001 10111001 11011111 10111111 11011111 11110111 1111}
  public static final byte[] GRPSPLIT28 = new byte[] {63, -82, -1, -21, 104, -109, 111, -3, -25, -33, -105, -99, -5, -3, -5, -17, 15};
  // {11111111 01011001 11011111 11110111 11011111 11111101 11100101 10111101 10111111 11111101 11011110 11000110 10101011 11100110 10001011 11111101 1111}
  public static final byte[] GRPSPLIT29 = new byte[] {-1, -102, -5, -17, -5, -65, -89, -67, -3, -65, 123, 99, -43, 103, -47, -65, 15};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_44 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_44_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_44_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* CRSArrTime */] < 1546.5f ? 
         (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT0, 132, 0, data[8])) ? 
             (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
                 (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[9])) ? 
                     (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                        -0.04850317f : 
                        -0.015923617f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT4, 132, 0, data[8])) ? 
                        0.014354016f : 
                        0.10939441f)) : 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT5, 134, 0, data[9])) ? 
                     (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                        -0.038398042f : 
                        0.016699122f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT7, 132, 0, data[8])) ? 
                        -0.0047413157f : 
                        0.047528807f))) : 
             (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[9])) ? 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT10, 132, 0, data[8])) ? 
                        -0.09143095f : 
                        -0.02894694f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT11, 132, 0, data[8])) ? 
                        -0.032658234f : 
                        0.030265274f)) : 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[0])) ? 
                        -0.009973501f : 
                        0.00801439f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
                        0.0030706811f : 
                        0.053927626f)))) : 
         (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT15, 132, 0, data[8])) ? 
             (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT16, 134, 0, data[9])) ? 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                        -0.09395489f : 
                        -0.027209116f) : 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[0])) ? 
                        -0.03252748f : 
                        0.011741734f)) : 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT21, 134, 0, data[9])) ? 
                        -0.123267025f : 
                        0.007585777f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT22, 134, 0, data[9])) ? 
                        0.06578742f : 
                        0.15854356f))) : 
             (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT23, 134, 0, data[9])) ? 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT25, 132, 0, data[8])) ? 
                        -0.044788267f : 
                        -0.00677548f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT26, 132, 0, data[8])) ? 
                        -0.0016333417f : 
                        0.04561471f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT27, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT28, 32, 0, data[2])) ? 
                        -0.014274299f : 
                        0.017450053f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT29, 32, 0, data[2])) ? 
                        0.0067741848f : 
                        0.047775615f)))));
    return pred;
  } // constant pool size = 497B, number of visited nodes = 31, static init size = 2226B
  // {11011111 01101011 11100110 11101110 10111111 00001111 01110111 00011111 10101000 11111000 11011101 00100110 11100101 01100111 11011011 11111010 0111}
  public static final byte[] GRPSPLIT0 = new byte[] {-5, -42, 103, 119, -3, -16, -18, -8, 21, 31, -69, 100, -89, -26, -37, 95, 14};
  // {01011100 00101000 00000010 11111000}
  public static final byte[] GRPSPLIT1 = new byte[] {58, 20, 64, 31};
  // {00010110 00001110 00100000 00010000 00010000 00011000 10000001 00000000 10000001 00000100 00000000 00001010 11000000 00010001 00000100 01100000 000110}
  public static final byte[] GRPSPLIT2 = new byte[] {104, 112, 4, 8, 8, 24, -127, 0, -127, 32, 0, 80, 3, -120, 32, 6, 24};
  // {11010010 01101111 00010100 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {75, -10, 40, 0};
  // {00000000 00010100 00000001 00000000 00000000 00010000 00000000 11000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 40, -128, 0, 0, 8, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0};
  // {10111110 11011111 10011111 11001111 10111011 11001101 01111010 10101011 11101110 11111111 01111011 11000101 00111011 11001111 11111011 10111011 110001}
  public static final byte[] GRPSPLIT5 = new byte[] {125, -5, -7, -13, -35, -77, 94, -43, 119, -1, -34, -93, -36, -13, -33, -35, 35};
  // {00000010 00000011 00010000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {64, -64, 8, 0};
  // {00000000 00000000 00010000 00000000 00000000 10100000 00000000 01000000 01000111 00000000 00000000 01000001 00000000 00000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 0, 8, 0, 0, 5, 0, 2, -30, 0, 0, -126, 0, 0, 0, 0, 0};
  // {01100111 11001000 11111111 11101111 11111101 11111011 11010111 00011111 10100010 10111001 11111111 11011111 11111111 11011010 10111010 00010111 101101}
  public static final byte[] GRPSPLIT8 = new byte[] {-26, 19, -1, -9, -65, -33, -21, -8, 69, -99, -1, -5, -1, 91, 93, -24, 45};
  // {00011111 11000111 00010101 01010110}
  public static final byte[] GRPSPLIT9 = new byte[] {-8, -29, -88, 106};
  // {11110111 10111111 10111111 10111101 01011111 11111111 11111100 11111110 11111111 11110111 11110110 11111111 11011011 10111111 11111111 01110111 1011}
  public static final byte[] GRPSPLIT10 = new byte[] {-17, -3, -3, -67, -6, -1, 63, 127, -1, -17, 111, -1, -37, -3, -1, -18, 13};
  // {10111111 11111110 11111111 01111111 11011111 11111111 11101101 11111101 11111111 11111111 11111111 11111111 11111011 11111111 00111111 11110111 1111}
  public static final byte[] GRPSPLIT11 = new byte[] {-3, 127, -1, -2, -5, -1, -73, -65, -1, -1, -1, -1, -33, -1, -4, -17, 15};
  // {10001000 00100001 10000000 00101010 00010000 00000000 01110011 00000010 10000000 01000000 01000001 00000000 00100000 01000000 00001001 00001000 0000}
  public static final byte[] GRPSPLIT12 = new byte[] {17, -124, 1, 84, 8, 0, -50, 64, 1, 2, -126, 0, 4, 2, -112, 16, 0};
  // {10111011 11001110 10101000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-35, 115, 21, 0};
  // {01001111 10101001 01000110 00011110}
  public static final byte[] GRPSPLIT14 = new byte[] {-14, -107, 98, 120};
  // {01100111 10111100 01011111 10000011 01110101 10111111 01001110 00111110 11111111 11001101 00101110 11011011 11001111 10110100 11100111 01111101 1111}
  public static final byte[] GRPSPLIT15 = new byte[] {-26, 61, -6, -63, -82, -3, 114, 124, -1, -77, 116, -37, -13, 45, -25, -66, 15};
  // {00000001 00100010 00000000 00010000 00000000 00100010 00100000 00000011 10000100 00010001 00000000 00100000 01000000 10000001 01000001 01000100 000100}
  public static final byte[] GRPSPLIT16 = new byte[] {-128, 68, 0, 8, 0, 68, 4, -64, 33, -120, 0, 4, 2, -127, -126, 34, 8};
  // {01110111 01110101 10011011 01101110}
  public static final byte[] GRPSPLIT17 = new byte[] {-18, -82, -39, 118};
  // {10000100 11111111 11111100 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {33, -1, 63, 0};
  // {11001001 11011110 01100000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {-109, 123, 6, 0};
  // {11100110 11111111 01011110 01111110}
  public static final byte[] GRPSPLIT20 = new byte[] {103, -1, 122, 126};
  // {00000000 00100000 00000000 00000000 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT21 = new byte[] {0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {11111110 11111101 11111111 11101111 11111111 11011101 11111111 11111101 11111111 11111110 11111111 11011111 11111111 11111111 11111110 11111011 111111}
  public static final byte[] GRPSPLIT22 = new byte[] {127, -65, -1, -9, -1, -69, -1, -65, -1, 127, -1, -5, -1, -1, 127, -33, 63};
  // {10010101 11110111 01001101 01110111 01001010 10011010 10110011 11111110 01011111 01110001 11011000 01110100 00011101 01100111 00011101 11101001 111001}
  public static final byte[] GRPSPLIT23 = new byte[] {-87, -17, -78, -18, 82, 89, -51, 127, -6, -114, 27, 46, -72, -26, -72, -105, 39};
  // {10000101 10010000 01000011 01011010}
  public static final byte[] GRPSPLIT24 = new byte[] {-95, 9, -62, 90};
  // {11111111 11111111 10111111 11111111 10011111 11011111 11111101 11111001 11111100 11111011 11111111 10111110 11111111 11011111 11011101 11111111 1111}
  public static final byte[] GRPSPLIT25 = new byte[] {-1, -1, -3, -1, -7, -5, -65, -97, 63, -33, -1, 125, -1, -5, -69, -1, 15};
  // {11111110 11111111 11101111 01111101 10001111 01111110 11110001 11111011 10001110 10111111 11111111 11101101 01111111 11011111 01111111 11111111 1011}
  public static final byte[] GRPSPLIT26 = new byte[] {127, -1, -9, -66, -15, 126, -113, -33, 113, -3, -1, -73, -2, -5, -2, -1, 13};
  // {10111100 01101011 10111110 01111111 11111111 11101001 11110111 11011111 11111001 11110111 11110111 01101101 01111011 11101111 00011111 11000111 1110}
  public static final byte[] GRPSPLIT27 = new byte[] {61, -42, 125, -2, -1, -105, -17, -5, -97, -17, -17, -74, -34, -9, -8, -29, 7};
  // {01101011 11111110 01110110 01101100}
  public static final byte[] GRPSPLIT28 = new byte[] {-42, 127, 110, 54};
  // {10111010 01110100 10101110 10000000}
  public static final byte[] GRPSPLIT29 = new byte[] {93, 46, 117, 1};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_45 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_45_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_45_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 23.5f ? 
         (data[11 /* TaxiIn */] < 4.5f ? 
             (data[7 /* AirTime */] < 290.5f ? 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(129, 1, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(129, 1, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT0, 129, 1, data[8])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(133, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT1, 133, 0, data[9])) ? 
                        -0.029432468f : 
                        0.010663309f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                        -0.020088872f : 
                        0.012554026f)) : 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT3, 133, 0, data[9])) ? 
                    -0.06265092f : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                        0.06050373f : 
                        0.119383395f))) : 
             (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT5, 134, 0, data[9])) ? 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT6, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[3 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 7) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                        -0.01961269f : 
                        -0.0012376743f) : 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                        -0.0060009966f : 
                        0.020547954f)) : 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT9, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                        -0.027886672f : 
                        0.0146373045f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                        0.017957779f : 
                        0.07859135f)))) : 
         (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT12, 134, 0, data[9])) ? 
             (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[8])) ? 
                 (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 38.0f ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
                        -0.04275436f : 
                        0.018359877f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[2])) ? 
                        0.026280344f : 
                        0.116011165f)) : 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                        -0.10094533f : 
                        0.054389935f) : 
                     (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                        0.053417403f : 
                        0.112697236f))) : 
             (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT20, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT21, 134, 0, data[9])) ? 
                        -0.10837971f : 
                        0.02767551f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT22, 134, 0, data[9])) ? 
                        0.09697097f : 
                        0.12494179f)) : 
                 (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 31.0f ? 
                     (data[12 /* TaxiOut */] < 25.5f ? 
                        0.1466926f : 
                        0.106582835f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(109, 6, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(109, 6, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT23, 109, 6, data[8])) ? 
                        0.11002577f : 
                        0.11914137f)))));
    return pred;
  } // constant pool size = 395B, number of visited nodes = 30, static init size = 1638B
  // {...1 0-bits... 10010111 00101000 00000000 10001111 10011100 00000001 10010000 10001100 00001010 10000100 01110001 01000000 00000100 10000000 00001110 01010101 0}
  public static final byte[] GRPSPLIT0 = new byte[] {-23, 20, 0, -15, 57, -128, 9, 49, 80, 33, -114, 2, 32, 1, 112, -86, 0};
  // {00000000 00001011 00001000 00000001 00011001 01110000 00000010 00101000 00001001 00000000 00001010 10101010 00000010 11001101 10001001 00110000 10110}
  public static final byte[] GRPSPLIT1 = new byte[] {0, -48, 16, -128, -104, 14, 64, 20, -112, 0, 80, 85, 64, -77, -111, 12, 13};
  // {00111000 10010001 11110010 11110000}
  public static final byte[] GRPSPLIT2 = new byte[] {28, -119, 79, 15};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 01111011 11111111 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -9, -1, -1, -1, -1, -1, -34, -1, 31};
  // {11100110 01010101 11011000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {103, -86, 27, 0};
  // {00011101 11110000 10001001 10010001 00001001 10000000 10100010 01000011 01000010 01101000 11010000 01001000 11010010 01010001 01011100 11100111 001101}
  public static final byte[] GRPSPLIT5 = new byte[] {-72, 15, -111, -119, -112, 1, 69, -62, 66, 22, 11, 18, 75, -118, 58, -25, 44};
  // {01010000 01100100 01100110 00101010 00110001 00100001 01100001 10100000 10100010 10000000 01001101 11111001 00011011 00110001 01001100 10000000 0101}
  public static final byte[] GRPSPLIT6 = new byte[] {10, 38, 102, 84, -116, -124, -122, 5, 69, 1, -78, -97, -40, -116, 50, 1, 10};
  // {11111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {31, 0, 0, 0};
  // {10100111 11111111 00001100 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-27, -1, 48, 0};
  // {11101101 00101010 00001111 10111101 00011111 11011101 11110011 10111011 10111011 11111011 11011111 00011110 01100111 10111110 10110110 01011111 1111}
  public static final byte[] GRPSPLIT9 = new byte[] {-73, 84, -16, -67, -8, -69, -49, -35, -35, -33, -5, 120, -26, 125, 109, -6, 15};
  // {01111001 11110101 11111000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-98, -81, 31, 0};
  // {01000100 01111001 00010000 11001100}
  public static final byte[] GRPSPLIT11 = new byte[] {34, -98, 8, 51};
  // {10000001 11000011 01010000 11010010 10100100 00000100 10100110 00001100 10000001 00000010 10100110 00111010 00000000 10011100 10100001 00110000 000110}
  public static final byte[] GRPSPLIT12 = new byte[] {-127, -61, 10, 75, 37, 32, 101, 48, -127, 64, 101, 92, 0, 57, -123, 12, 24};
  // {11111111 10111010 11111110 01111111 11110111 01001111 11111111 11011111 10111111 01111111 11111111 10101101 01111111 11111111 10010101 11110111 1111}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, 93, 127, -2, -17, -14, -1, -5, -3, -2, -1, -75, -2, -1, -87, -17, 15};
  // {01000101 01100110 11110010 00110000}
  public static final byte[] GRPSPLIT14 = new byte[] {-94, 102, 79, 12};
  // {10001001 11100110 11101101 10110010}
  public static final byte[] GRPSPLIT15 = new byte[] {-111, 103, -73, 77};
  // {11110100 11000111 10011011 00111110}
  public static final byte[] GRPSPLIT16 = new byte[] {47, -29, -39, 124};
  // {11111111 11001110 11111100 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {-1, 115, 63, 0};
  // {00000000 01001011 00001100 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {0, -46, 48, 0};
  // {11001011 10101100 10100100 10101010}
  public static final byte[] GRPSPLIT19 = new byte[] {-45, 53, 37, 85};
  // {11111111 11111110 11111111 11111111 11111011 01111111 11101111 11111111 11111111 11111111 11111111 10111101 01111111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT20 = new byte[] {-1, 127, -1, -1, -33, -2, -9, -1, -1, -1, -1, -67, -2, -1, -1, -1, 15};
  // {11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 01111111 11111101 11011011 11111111 11111111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT21 = new byte[] {-1, -1, -1, -1, -5, -1, -1, -1, -2, -65, -37, -1, -1, -1, -1, -1, 63};
  // {00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000100 10000000 00000000 00000100 00000010 00000000 10011000 00000001 00000000 000000}
  public static final byte[] GRPSPLIT22 = new byte[] {0, 0, 0, 2, 0, 0, 0, 32, 1, 0, 32, 64, 0, 25, -128, 0, 0};
  // {...6 0-bits... 00000000 00000000 00000000 00000000 00100000 00000100 00000000 00010000 00000000 00000000 00000000 10000000 00000000 00000}
  public static final byte[] GRPSPLIT23 = new byte[] {0, 0, 0, 0, 4, 32, 0, 8, 0, 0, 0, 1, 0, 0};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_46 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_46_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_46_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* TaxiOut */] < 9.5f ? 
         (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT0, 132, 0, data[8])) ? 
             (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[9])) ? 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT3, 132, 0, data[8])) ? 
                        -0.063499905f : 
                        -0.019747298f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT4, 134, 0, data[9])) ? 
                        -0.052214622f : 
                        0.0028353515f)) : 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT6, 134, 0, data[9])) ? 
                        -0.07384689f : 
                        0.1367239f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT7, 132, 0, data[8])) ? 
                        0.04051237f : 
                        0.1678711f))) : 
             (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[9])) ? 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                        -0.034145653f : 
                        0.014270824f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT11, 132, 0, data[8])) ? 
                        0.0028141572f : 
                        0.11376629f)) : 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
                    -0.13427652f : 
                     (data[5 /* CRSArrTime */] < 1327.5f ? 
                        0.015859738f : 
                        0.14026925f)))) : 
         (Double.isNaN(data[6]) || data[6 /* FlightNum */] < 2754.5f ? 
             (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                     (data[11 /* TaxiIn */] < 5.5f ? 
                        -0.0138075035f : 
                        0.0015185615f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[2])) ? 
                        0.0010497432f : 
                        0.03435087f)) : 
                 (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                        -0.0941412f : 
                        0.012412573f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT18, 134, 0, data[9])) ? 
                        0.045264162f : 
                        0.18324085f))) : 
             (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT20, 134, 0, data[9])) ? 
                     (Double.isNaN(data[4]) || data[4 /* CRSDepTime */] < 1253.5f ? 
                        -0.20192973f : 
                        -0.037791967f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[2])) ? 
                        -0.04197811f : 
                        0.04305657f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT22, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT23, 132, 0, data[8])) ? 
                        -0.09374971f : 
                        0.05213635f) : 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[0])) ? 
                        0.099219665f : 
                        0.17757255f)))));
    return pred;
  } // constant pool size = 416B, number of visited nodes = 30, static init size = 1764B
  // {00000000 01001101 11000000 00001100 00100000 10100110 01100000 00000010 01000000 01001000 00111000 00011010 00000010 10000000 11011111 10001000 0100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, -78, 3, 48, 4, 101, 6, 64, 2, 18, 28, 88, 64, 1, -5, 17, 2};
  // {10010010 01101001 00000000 01011000 00001100 00000000 00100010 00000100 00000000 00010000 00000100 00000000 10000000 00010101 01001100 01100100 101000}
  public static final byte[] GRPSPLIT1 = new byte[] {73, -106, 0, 26, 48, 0, 68, 32, 0, 8, 32, 0, 1, -88, 50, 38, 5};
  // {01111001 00101111 00100011 10011000}
  public static final byte[] GRPSPLIT2 = new byte[] {-98, -12, -60, 25};
  // {11111111 01111111 11101101 00101110 00100011 11101111 11111101 01111110 11101000 01111101 11111101 10111111 01010111 11001111 11111111 11111111 0111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -2, -73, 116, -60, -9, -65, 126, 23, -66, -65, -3, -22, -13, -1, -1, 14};
  // {01000001 00000010 01010000 00000001 00010001 00000000 00000100 00000010 00001001 00001100 00000000 10011000 01011100 10000000 10100000 00000000 000110}
  public static final byte[] GRPSPLIT4 = new byte[] {-126, 64, 10, -128, -120, 0, 32, 64, -112, 48, 0, 25, 58, 1, 5, 0, 24};
  // {11110010 10111110 00000000 11111110}
  public static final byte[] GRPSPLIT5 = new byte[] {79, 125, 0, 127};
  // {10010010 00100000 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 00000000 01000000 000000}
  public static final byte[] GRPSPLIT6 = new byte[] {73, 4, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 2, 0};
  // {00000000 00000010 00000000 11000000 01001010 00000000 00000000 01000100 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 1000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 64, 0, 3, 82, 0, 0, 34, 0, 0, 0, -128, 0, 0, 0, 0, 1};
  // {00010000 00100000 01010000 00010001 00000001 00000000 00000000 00000000 10000001 00000001 10000100 00100010 01000000 00100010 00001100 00000000 000100}
  public static final byte[] GRPSPLIT8 = new byte[] {8, 4, 10, -120, -128, 0, 0, 0, -127, -128, 33, 68, 2, 68, 48, 0, 8};
  // {01000000 00000111 00011000 00001000}
  public static final byte[] GRPSPLIT9 = new byte[] {2, -32, 24, 16};
  // {00000000 10001110 01010100 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 113, 42, 0};
  // {11111111 11111110 10111111 11110111 11111111 11111101 11111111 11111101 10111111 11111111 11111111 11111111 11111111 01111111 11111101 11111111 1111}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, 127, -3, -17, -1, -65, -1, -65, -3, -1, -1, -1, -1, -2, -65, -1, 15};
  // {11110111 11111000 01100011 11110110}
  public static final byte[] GRPSPLIT12 = new byte[] {-17, 31, -58, 111};
  // {01000000 10000000 00000100 01000010 00010101 00000000 01000000 00000001 10001100 01100000 00000100 00100000 00110101 00010000 00000001 00100000 0001}
  public static final byte[] GRPSPLIT13 = new byte[] {2, 1, 32, 66, -88, 0, 2, -128, 49, 6, 32, 4, -84, 8, -128, 4, 8};
  // {10000000 11100000 00000100 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 7, 32, 0};
  // {01100001 10000111 11010000 11010010}
  public static final byte[] GRPSPLIT15 = new byte[] {-122, -31, 11, 75};
  // {01100001 11101111 01101100 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-122, -9, 54, 0};
  // {11111010 11110100 11100011 11001110}
  public static final byte[] GRPSPLIT17 = new byte[] {95, 47, -57, 115};
  // {00000001 00000000 00000000 00010001 00000001 00000000 00000100 00000100 00000100 00000000 00000100 00000000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT18 = new byte[] {-128, 0, 0, -120, -128, 0, 32, 32, 32, 0, 32, 0, 0, 0, 0, 0, 0};
  // {01111011 00010000 00010000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {-34, 8, 8, 0};
  // {10111111 11110111 11111111 11111111 11111111 11111111 11111011 11111111 11111111 11110111 11111011 11111111 10101111 11010111 11111011 10101111 111011}
  public static final byte[] GRPSPLIT20 = new byte[] {-3, -17, -1, -1, -1, -1, -33, -1, -1, -17, -33, -1, -11, -21, -33, -11, 55};
  // {11111111 01111110 11011010 01110010}
  public static final byte[] GRPSPLIT21 = new byte[] {-1, 126, 91, 78};
  // {00000000 00000000 00000000 00100000 01001000 00100000 00000010 01000110 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT22 = new byte[] {0, 0, 0, 4, 18, 4, 64, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {00000011 00000001 00010000 01000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT23 = new byte[] {-64, -128, 8, 2, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00001000 00000000}
  public static final byte[] GRPSPLIT24 = new byte[] {0, 8, 16, 0};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_47 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_47_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_47_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* TaxiIn */] < 10.5f ? 
         (data[4 /* CRSDepTime */] < 820.5f ? 
             (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT0, 132, 0, data[8])) ? 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[9])) ? 
                        -0.06267265f : 
                        0.0013694395f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT3, 132, 0, data[8])) ? 
                        -0.032997392f : 
                        0.0016368652f)) : 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT5, 132, 0, data[8])) ? 
                        -0.027956292f : 
                        0.031470854f) : 
                     (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                        0.015022723f : 
                        0.05938278f))) : 
             (Double.isNaN(data[4]) || data[4 /* CRSDepTime */] < 2143.5f ? 
                 (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                        -0.043739125f : 
                        0.030881643f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT9, 132, 0, data[8])) ? 
                        -0.00469795f : 
                        0.007798342f)) : 
                 (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                        -0.13082044f : 
                        -0.021468623f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
                        -0.04465368f : 
                        0.059698153f)))) : 
         (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[8])) ? 
             (Double.isNaN(data[11]) || data[11 /* TaxiIn */] < 18.5f ? 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(130, 1, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(130, 1, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT15, 130, 1, data[9])) ? 
                        -0.062828965f : 
                        0.11868815f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(130, 1, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(130, 1, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT16, 130, 1, data[9])) ? 
                        0.009473644f : 
                        0.148971f)) : 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(118, 3, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT18, 118, 3, data[8])) ? 
                        -0.10758492f : 
                        0.04332976f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(118, 3, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT19, 118, 3, data[8])) ? 
                        0.06877885f : 
                        0.14140278f))) : 
             (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT21, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT22, 134, 0, data[9])) ? 
                        -0.14246802f : 
                        0.0040545273f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[2])) ? 
                        0.05286798f : 
                        0.15923959f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT24, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT25, 32, 0, data[2])) ? 
                        0.0017379309f : 
                        0.08782473f) : 
                     (Double.isNaN(data[3 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 7) && !GenModel.bitSetContains(GRPSPLIT26, 32, 0, data[3])) ? 
                        0.082884334f : 
                        0.15190601f)))));
    return pred;
  } // constant pool size = 426B, number of visited nodes = 31, static init size = 1800B
  // {10010000 01101101 11000000 11000011 10110000 00000001 01110000 00000000 10000010 11001000 01000000 10110000 10111100 10100101 00001000 00001010 1100}
  public static final byte[] GRPSPLIT0 = new byte[] {9, -74, 3, -61, 13, -128, 14, 0, 65, 19, 2, 13, 61, -91, 16, 80, 3};
  // {00111101 00101011 10101100 11111110}
  public static final byte[] GRPSPLIT1 = new byte[] {-68, -44, 53, 127};
  // {00000001 00101110 00110000 00010000 00000000 00000000 00000100 01000100 00001001 00000000 10000100 10010000 00000100 00000000 01000000 00000100 000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-128, 116, 12, 8, 0, 0, 32, 34, -112, 0, 33, 9, 32, 0, 2, 32, 0};
  // {01000011 00000000 00100010 00000000 01000000 10000010 00000000 00000100 00000000 00000010 00001000 01000011 00000010 00000000 10000010 10000000 0000}
  public static final byte[] GRPSPLIT3 = new byte[] {-62, 0, 68, 0, 2, 65, 0, 32, 0, 64, 16, -62, 64, 0, 65, 1, 0};
  // {01000011 10101111 11000100 11110000}
  public static final byte[] GRPSPLIT4 = new byte[] {-62, -11, 35, 15};
  // {11101111 10111011 11111111 01111111 01011111 11111111 11101111 11111111 11111101 01110111 11111111 01101111 01110011 01011010 11111111 11111101 1111}
  public static final byte[] GRPSPLIT5 = new byte[] {-9, -35, -1, -2, -6, -1, -9, -1, -65, -18, -1, -10, -50, 90, -1, -65, 15};
  // {10110010 01001101 10000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {77, -78, 1, 0};
  // {11111111 11111111 01111100 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, 62, 0};
  // {10000000 00010011 00001001 10100000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, -56, -112, 5};
  // {01000011 01000110 00100110 01101000 01110011 10110011 00000110 00100111 01001101 01001000 00111101 01001011 10000011 01000000 11000111 10000000 0001}
  public static final byte[] GRPSPLIT9 = new byte[] {-62, 98, 100, 22, -50, -51, 96, -28, -78, 18, -68, -46, -63, 2, -29, 1, 8};
  // {00100110 10000010 11001100 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {100, 65, 51, 0};
  // {00110011 01100000 00111111 00011110}
  public static final byte[] GRPSPLIT11 = new byte[] {-52, 6, -4, 120};
  // {01011010 10010011 10000110 11000000}
  public static final byte[] GRPSPLIT12 = new byte[] {90, -55, 97, 3};
  // {11101100 10100010 10111110 00111101 10100101 01001111 11101111 10011011 10111011 10110011 11110110 11111101 01001111 11110111 00100111 01111111 1111}
  public static final byte[] GRPSPLIT13 = new byte[] {55, 69, 125, -68, -91, -14, -9, -39, -35, -51, 111, -65, -14, -17, -28, -2, 15};
  // {00100110 00101011 11010010 11100100}
  public static final byte[] GRPSPLIT14 = new byte[] {100, -44, 75, 39};
  // {...1 0-bits... 00000000 00001000 00000001 10100000 10000000 00000000 00000000 00000000 00000010 00000010 10000000 00000000 00000100 00000000 00000100 00000000 00}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 16, -128, 5, 1, 0, 0, 0, 64, 64, 1, 0, 32, 0, 32, 0, 0};
  // {...1 0-bits... 00000101 00000000 00000000 00000000 00001000 00000000 00000100 00000000 00000000 00001000 01000000 00000000 00000000 00000000 00000001 00000000 00}
  public static final byte[] GRPSPLIT16 = new byte[] {-96, 0, 0, 0, 16, 0, 32, 0, 0, 16, 2, 0, 0, 0, -128, 0, 0};
  // {01000111 10111000 00001100 00100100}
  public static final byte[] GRPSPLIT17 = new byte[] {-30, 29, 48, 36};
  // {...3 0-bits... 11111101 11111111 11110111 11111111 10111010 01111111 11111110 11111111 11111111 11111111 11111111 11111011 11111111 11111111 111111}
  public static final byte[] GRPSPLIT18 = new byte[] {-65, -1, -17, -1, 93, -2, 127, -1, -1, -1, -1, -33, -1, -1, 63};
  // {...3 0-bits... 11111101 11011111 11110001 11111111 01111111 11111111 11111111 11111111 11111111 10111111 11110111 11111111 11111111 11111111 011111}
  public static final byte[] GRPSPLIT19 = new byte[] {-65, -5, -113, -1, -2, -1, -1, -1, -1, -3, -17, -1, -1, -1, 62};
  // {10010001 01011011 11110111 01111010}
  public static final byte[] GRPSPLIT20 = new byte[] {-119, -38, -17, 94};
  // {00000000 00000000 00000000 00000000 10100000 00000000 00000000 00000000 00000000 10000000 00000000 00011000 00000100 01100000 00000110 00101000 0100}
  public static final byte[] GRPSPLIT21 = new byte[] {0, 0, 0, 0, 5, 0, 0, 0, 0, 1, 0, 24, 32, 6, 96, 20, 2};
  // {11111111 11111110 11111111 11101111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 01111011 11111111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT22 = new byte[] {-1, 127, -1, -9, -1, -1, -1, -1, 127, -1, -1, -34, -1, -1, -1, -1, 63};
  // {00001000 10100000 00001000 00000000}
  public static final byte[] GRPSPLIT23 = new byte[] {16, 5, 16, 0};
  // {11111111 11111111 01101111 11011111 01011111 11111111 01111111 11111100 11111101 11111111 10111111 01111111 11111011 10011110 11111000 11110111 1111}
  public static final byte[] GRPSPLIT24 = new byte[] {-1, -1, -10, -5, -6, -1, -2, 63, -65, -1, -3, -2, -33, 121, 31, -17, 15};
  // {00010000 00001001 01000010 01100010}
  public static final byte[] GRPSPLIT25 = new byte[] {8, -112, 66, 70};
  // {00011100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT26 = new byte[] {56, 0, 0, 0};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_48 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_48_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_48_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 19.5f ? 
         (data[7 /* AirTime */] < 60.5f ? 
             (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
                 (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT1, 132, 0, data[8])) ? 
                     (!Double.isNaN(data[3 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 7) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[3])) ? 
                        -0.064705476f : 
                        -0.026367325f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[9])) ? 
                        -5.5267796E-4f : 
                        0.1394829f)) : 
                 (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT4, 132, 0, data[8])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT5, 134, 0, data[9])) ? 
                        -0.05020353f : 
                        0.018753462f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT6, 132, 0, data[8])) ? 
                        0.012595476f : 
                        0.09823801f))) : 
             (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT7, 132, 0, data[8])) ? 
                 (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT9, 134, 0, data[9])) ? 
                        -0.043010253f : 
                        -0.001822584f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT10, 134, 0, data[9])) ? 
                        -0.003780978f : 
                        0.013841054f)) : 
                 (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
                        -0.032583207f : 
                        0.02420821f) : 
                     (Double.isNaN(data[6]) || data[6 /* FlightNum */] < 2160.5f ? 
                        0.092189685f : 
                        0.032086737f)))) : 
         (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[8])) ? 
             (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT14, 134, 0, data[9])) ? 
                 (data[7 /* AirTime */] < 216.5f ? 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[0])) ? 
                        -0.14016016f : 
                        -0.018712403f) : 
                     (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                        -0.15719324f : 
                        0.038755406f)) : 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT18, 134, 0, data[9])) ? 
                        -0.036245864f : 
                        0.059370503f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT19, 134, 0, data[9])) ? 
                        0.03963136f : 
                        0.10754259f))) : 
             (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT21, 134, 0, data[9])) ? 
                     (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 27.5f ? 
                        -0.13154295f : 
                        0.110588565f) : 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT22, 134, 0, data[9])) ? 
                        0.03089808f : 
                        0.13767032f)) : 
                 (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT23, 134, 0, data[9])) ? 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT24, 134, 0, data[9])) ? 
                        -0.101626925f : 
                        0.08202666f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT25, 32, 0, data[2])) ? 
                        0.13871846f : 
                        0.1938028f)))));
    return pred;
  } // constant pool size = 464B, number of visited nodes = 31, static init size = 2028B
  // {10001000 01111100 10010010 00100000}
  public static final byte[] GRPSPLIT0 = new byte[] {17, 62, 73, 4};
  // {00000010 01000000 00000010 01000000 00000100 00000000 00000000 00000000 00000000 00000010 00010000 01000000 00010000 00000000 00010100 10000000 0000}
  public static final byte[] GRPSPLIT1 = new byte[] {64, 2, 64, 2, 32, 0, 0, 0, 0, 64, 8, 2, 8, 0, 40, 1, 0};
  // {11101010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {87, 0, 0, 0};
  // {00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000100 00010100 00000000 00000000 00000100 000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 2, 0, 0, 0, 0, 0, 8, 0, 0, 32, 40, 0, 0, 32, 0};
  // {11101111 01110110 11011110 11101101 10111011 11111001 11101111 01111010 11111111 11111101 10011100 01111101 11111111 10110111 00111011 11111111 1011}
  public static final byte[] GRPSPLIT4 = new byte[] {-9, 110, 123, -73, -35, -97, -9, 94, -1, -65, 57, -66, -1, -19, -36, -1, 13};
  // {01000001 00000000 10110000 00000001 00000001 00000000 10000100 00000000 00010100 01010000 00000000 00001000 00000100 11000000 00000001 01000000 000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-126, 0, 13, -128, -128, 0, 33, 0, 40, 10, 0, 16, 32, 3, -128, 2, 0};
  // {00000010 00000000 00000010 00000001 10011000 00000000 00000000 01000000 00000000 00001000 00000000 00001000 00000000 00000000 00001010 00000010 0000}
  public static final byte[] GRPSPLIT6 = new byte[] {64, 0, 64, -128, 25, 0, 0, 2, 0, 16, 0, 16, 0, 0, 80, 64, 0};
  // {01000000 10001000 00100100 00000010 00010001 00000000 01000000 00000000 00001000 00000000 01000100 10000000 00000001 10000000 00000001 00000000 0000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 17, 36, 64, -120, 0, 2, 0, 16, 0, 34, 1, -128, 1, -128, 0, 0};
  // {11111011 11100011 00110100 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-33, -57, 44, 0};
  // {10101101 11111110 00101111 11011111 11101111 11011111 11111111 10001100 11100111 10110101 00111011 01010101 11111111 11110111 10111100 11111111 111011}
  public static final byte[] GRPSPLIT9 = new byte[] {-75, 127, -12, -5, -9, -5, -1, 49, -25, -83, -36, -86, -1, -17, 61, -1, 55};
  // {00010111 01111010 10001000 00100000 10011000 10101001 00100000 01101011 01001010 00101100 11010010 01100000 00010010 01100100 11111110 00110001 001111}
  public static final byte[] GRPSPLIT10 = new byte[] {-24, 94, 17, 4, 25, -107, 4, -42, 82, 52, 75, 6, 72, 38, 127, -116, 60};
  // {00001000 10111110 11000100 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {16, 125, 35, 0};
  // {00010111 11010000 10011101 01001110}
  public static final byte[] GRPSPLIT12 = new byte[] {-24, 11, -71, 114};
  // {11111101 11111100 11111111 01111010 11110001 01001111 11110101 11011001 10111110 01111011 11011111 10110100 01111111 01011111 00000001 01110111 1111}
  public static final byte[] GRPSPLIT13 = new byte[] {-65, 63, -1, 94, -113, -14, -81, -101, 125, -34, -5, 45, -2, -6, -128, -18, 15};
  // {00101101 11011111 00111111 11111111 10111111 11111111 01110111 11011111 11111111 11111001 10011001 01111001 10110001 10101100 11111010 01001111 111101}
  public static final byte[] GRPSPLIT14 = new byte[] {-76, -5, -4, -1, -3, -1, -18, -5, -1, -97, -103, -98, -115, 53, 95, -14, 47};
  // {00000000 01001111 11111000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {0, -14, 31, 0};
  // {00000000 01111111 11101100 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {0, -2, 55, 0};
  // {01000011 11111111 01101001 10111100}
  public static final byte[] GRPSPLIT17 = new byte[] {-62, -1, -106, 61};
  // {11111111 11111011 11111111 11111111 01001011 11111101 11011111 11111011 11111111 11110111 11111111 11111111 01101111 11111111 01111101 11111011 110111}
  public static final byte[] GRPSPLIT18 = new byte[] {-1, -33, -1, -1, -46, -65, -5, -33, -1, -17, -1, -1, -10, -1, -66, -33, 59};
  // {00000000 01001000 00010000 10000000 10000100 00000100 00100010 00000000 10010000 00001000 10000000 00000000 10000000 00001100 10000010 00000000 000000}
  public static final byte[] GRPSPLIT19 = new byte[] {0, 18, 8, 1, 33, 32, 68, 0, 9, 16, 1, 0, 1, 48, 65, 0, 0};
  // {10100100 01000110 10010111 01000000}
  public static final byte[] GRPSPLIT20 = new byte[] {37, 98, -23, 2};
  // {11111101 11111110 11111111 11100111 11101111 11111111 11111111 11111111 11110111 11111011 11111111 11111111 11111111 11111111 11111111 11101111 111011}
  public static final byte[] GRPSPLIT21 = new byte[] {-65, 127, -1, -25, -9, -1, -1, -1, -17, -33, -1, -1, -1, -1, -1, -9, 55};
  // {11111111 11111111 11111111 11011111 11111111 11111111 11111111 10111111 01111110 11110111 10111111 11100011 11100011 11110111 10111111 11111011 111111}
  public static final byte[] GRPSPLIT22 = new byte[] {-1, -1, -1, -5, -1, -1, -1, -3, 126, -17, -3, -57, -57, -17, -3, -33, 63};
  // {00000010 00000000 00000000 01010000 01000000 00000000 00000000 00000000 00000000 00000100 01000000 00000000 01000000 10000000 00000000 00000000 101000}
  public static final byte[] GRPSPLIT23 = new byte[] {64, 0, 0, 10, 2, 0, 0, 0, 0, 32, 2, 0, 2, 1, 0, 0, 5};
  // {11111111 11111111 11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111011 11111111 111111}
  public static final byte[] GRPSPLIT24 = new byte[] {-1, -1, -1, -1, -9, -1, -1, -1, -1, -1, -2, -1, -1, -1, -33, -1, 63};
  // {01011011 11111111 11111101 11111110}
  public static final byte[] GRPSPLIT25 = new byte[] {-38, -1, -65, 127};
}


class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Forest_49 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_49_class_0.score0(fdata);
  }
}
class gbm_07d35245_f554_4b53_9ca3_83863c4f31f4_Tree_49_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[4 /* CRSDepTime */] < 1151.5f ? 
         (data[7 /* AirTime */] < 90.5f ? 
             (Double.isNaN(data[10]) || data[10 /* Distance */] < 544.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* AirTime */] < 62.5f ? 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(130, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(130, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT0, 130, 0, data[8])) ? 
                        -0.043078713f : 
                        -0.0036379278f) : 
                     (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(132, 1, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT1, 132, 1, data[9])) ? 
                        -0.02948323f : 
                        0.0603763f)) : 
                 (data[6 /* FlightNum */] < 432.5f ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                        -0.088834986f : 
                        0.057889223f) : 
                     (Double.isNaN(data[12]) || data[12 /* TaxiOut */] < 26.5f ? 
                        -0.087779f : 
                        0.034094203f))) : 
             (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(131, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT3, 131, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* Year */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 22) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                        -0.05273157f : 
                        -0.0039470806f) : 
                     (data[7 /* AirTime */] < 130.0f ? 
                        -0.035579063f : 
                        0.017732915f)) : 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT6, 133, 0, data[9])) ? 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                        -0.042504054f : 
                        0.0068157245f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(131, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(131, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT8, 131, 0, data[8])) ? 
                        0.014696444f : 
                        0.060026992f)))) : 
         (!Double.isNaN(data[0 /* Year */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 22) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
             (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT10, 132, 0, data[8])) ? 
                 (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[9])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[8])) ? 
                        -0.112568535f : 
                        -0.028512375f) : 
                     (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                        -0.01975277f : 
                        0.022946049f)) : 
                 (!Double.isNaN(data[9 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT14, 134, 0, data[9])) ? 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[2])) ? 
                        -0.07260516f : 
                        0.017059345f) : 
                     (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                        0.0037737682f : 
                        0.051438782f))) : 
             (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT17, 134, 0, data[9])) ? 
                 (Double.isNaN(data[2 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 31) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[8])) ? 
                        -0.016841356f : 
                        0.009784917f) : 
                     (!Double.isNaN(data[8 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT20, 132, 0, data[8])) ? 
                        -0.03593095f : 
                        0.03909744f)) : 
                 (!Double.isNaN(data[2 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 31) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[2])) ? 
                     (Double.isNaN(data[9 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[9]) || (data[9] >= 134) || (GenModel.bitSetIsInRange(134, 0, data[9]) && (data[9] < 134) && !GenModel.bitSetContains(GRPSPLIT22, 134, 0, data[9])) ? 
                        -0.028293658f : 
                        0.07270042f) : 
                     (Double.isNaN(data[8 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[8]) || (data[8] >= 132) || (GenModel.bitSetIsInRange(132, 0, data[8]) && (data[8] < 132) && !GenModel.bitSetContains(GRPSPLIT23, 132, 0, data[8])) ? 
                        0.029071938f : 
                        0.072306745f)))));
    return pred;
  } // constant pool size = 428B, number of visited nodes = 31, static init size = 1812B
  // {00000000 10000100 00010000 10000010 00011000 00110000 10100011 01000000 00010101 01001000 00000001 11101001 10101110 10110001 00000100 00001010 00}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 33, 8, 65, 24, 12, -59, 2, -88, 18, -128, -105, 117, -115, 32, 80, 0};
  // {...1 0-bits... 10000000 00001000 10000000 01000010 01000010 00000000 00000000 10000001 00110000 00001001 00011100 00000000 00111000 00000000 10010100 10001000 0111}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 16, 1, 66, 66, 0, 0, -127, 12, -112, 56, 0, 28, 0, 41, 17, 14};
  // {10010001 11001010 11110110 01101110}
  public static final byte[] GRPSPLIT2 = new byte[] {-119, 83, 111, 118};
  // {11010000 01100001 11000001 11101010 11001000 00001001 01010010 00000110 10000010 10000000 01000000 11001011 10000100 00000001 00000000 10000010 010}
  public static final byte[] GRPSPLIT3 = new byte[] {11, -122, -125, 87, 19, -112, 74, 96, 65, 1, 2, -45, 33, -128, 0, 65, 2};
  // {10010010 11100101 00100100 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {73, -89, 36, 0};
  // {01000111 11001110 00001101 01111110}
  public static final byte[] GRPSPLIT5 = new byte[] {-30, 115, -80, 126};
  // {01000011 00100100 00000000 11110000 01110001 10000010 00000100 00100100 01001101 00010000 00000000 10110010 01011100 00000010 00000000 01100100 00100}
  public static final byte[] GRPSPLIT6 = new byte[] {-62, 36, 0, 15, -114, 65, 32, 36, -78, 8, 0, 77, 58, 64, 0, 38, 4};
  // {00111110 00011011 10101101 11101010}
  public static final byte[] GRPSPLIT7 = new byte[] {124, -40, -75, 87};
  // {10000000 00000000 11000000 00101000 01000000 00000001 01010000 00000110 00000000 00000000 01000000 10000000 10000000 00000000 00000000 00000000 010}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 3, 20, 2, -128, 10, 96, 0, 0, 2, 1, 1, 0, 0, 0, 2};
  // {11100001 11111100 01111100 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-121, 63, 62, 0};
  // {00000011 10010000 00000000 10000101 00011000 10100000 00001101 00000000 00000001 10000110 00110000 00110000 00101000 11100000 01000000 00000000 0000}
  public static final byte[] GRPSPLIT10 = new byte[] {-64, 9, 0, -95, 24, 5, -80, 0, -128, 97, 12, 12, 20, 7, 2, 0, 0};
  // {10101101 11111010 11001111 11010111 11001111 11011111 11111111 10101011 00110110 11110001 11110011 11011001 10111011 11110101 10111010 11101011 111011}
  public static final byte[] GRPSPLIT11 = new byte[] {-75, 95, -13, -21, -13, -5, -1, -43, 108, -113, -49, -101, -35, -81, 93, -41, 55};
  // {01111111 11111011 11111111 11111111 11111111 11111101 11111111 11111101 11111111 11111111 11111111 11111111 11111011 11111111 11101111 11111111 1111}
  public static final byte[] GRPSPLIT12 = new byte[] {-2, -33, -1, -1, -1, -65, -1, -65, -1, -1, -1, -1, -33, -1, -9, -1, 15};
  // {11011110 11000001 10010111 01101100}
  public static final byte[] GRPSPLIT13 = new byte[] {123, -125, -23, 54};
  // {11111111 11111011 11101111 10111111 11011011 10111101 11111111 11111111 11111111 11111111 11111111 11111101 10101110 11100111 11111101 11111111 111111}
  public static final byte[] GRPSPLIT14 = new byte[] {-1, -33, -9, -3, -37, -67, -1, -1, -1, -1, -1, -65, 117, -25, -65, -1, 63};
  // {10100000 01100011 00011001 01101000}
  public static final byte[] GRPSPLIT15 = new byte[] {5, -58, -104, 22};
  // {10010001 11111100 00000000 10111110}
  public static final byte[] GRPSPLIT16 = new byte[] {-119, 63, 0, 125};
  // {10010100 00110001 00000001 01000001 01011000 00110000 00100001 01000000 11000011 00111010 00011000 01100110 10000100 11111101 01001001 10100000 000101}
  public static final byte[] GRPSPLIT17 = new byte[] {41, -116, -128, -126, 26, 12, -124, 2, -61, 92, 24, 102, 33, -65, -110, 5, 40};
  // {01000000 00000000 00011010 01100000}
  public static final byte[] GRPSPLIT18 = new byte[] {2, 0, 88, 6};
  // {01000000 01010010 10110010 00100010 01100100 10000011 00100000 01100011 01000111 00000000 10100110 01001011 10101101 11110000 00001111 00001010 0101}
  public static final byte[] GRPSPLIT19 = new byte[] {2, 74, 77, 68, 38, -63, 4, -58, -30, 0, 101, -46, -75, 15, -16, 80, 10};
  // {10111111 11111111 11111111 10111111 11111011 11111101 11101111 10111111 11101111 11110111 01101010 11011101 11000011 11111110 11111101 11111111 1111}
  public static final byte[] GRPSPLIT20 = new byte[] {-3, -1, -1, -3, -33, -65, -9, -3, -9, -17, 86, -69, -61, 127, -65, -1, 15};
  // {10111100 01110101 11101110 00111110}
  public static final byte[] GRPSPLIT21 = new byte[] {61, -82, 119, 124};
  // {00000000 00110001 00000001 01000000 00001000 00000000 00000000 00000000 01000010 00000000 00010000 01000000 10000000 00100000 01000000 00000000 000100}
  public static final byte[] GRPSPLIT22 = new byte[] {0, -116, -128, 2, 16, 0, 0, 0, 66, 0, 8, 2, 1, 4, 2, 0, 8};
  // {01001001 01010100 01100101 01000100 01011001 00100000 00001000 00100100 01010000 00001000 00001001 01100011 00010010 00000000 00100000 10000000 0000}
  public static final byte[] GRPSPLIT23 = new byte[] {-110, 42, -90, 34, -102, 4, 16, 36, 10, 16, -112, -58, 72, 0, 4, 1, 0};
}


